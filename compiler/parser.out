Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    VOID
    LBRACKET
    LONG
    ELLIPSIS
    ENUM
    PERIOD
    MINUSEQUAL
    TIMESEQUAL
    OR
    SHORT
    RSHIFTEQUAL
    STATIC
    SIZEOF
    UNSIGNED
    UNION
    COLON
    FOR
    PLUSPLUS
    AND
    TYPEID
    SIGNED
    NOT
    OREQUAL
    MOD
    RSHIFT
    DEFAULT
    WHILE
    DIVEQUAL
    EXTERN
    CASE
    REGISTER
    MODEQUAL
    SWITCH
    PLUSEQUAL
    VOLATILE
    ANDEQUAL
    DO
    LNOT
    CONST
    LSHIFT
    GOTO
    CCONST
    TYPEDEF
    XOR
    AUTO
    MINUSMINUS
    STRUCT
    FLOAT
    XOREQUAL
    LSHIFTEQUAL
    RBRACKET

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> statement
Rule 5     function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE
Rule 6     function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE
Rule 7     parameter_list -> expression
Rule 8     parameter_list -> parameter_list COMMA expression
Rule 9     parameter_declaration_list -> parameter_declaration
Rule 10    parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration
Rule 11    parameter_declaration -> type ID
Rule 12    parameter_declaration -> type ID EQUALS assignment_expression
Rule 13    type -> INT
Rule 14    type -> DOUBLE
Rule 15    type -> CHAR
Rule 16    type -> STRING
Rule 17    type -> KEY
Rule 18    type -> BOOLEAN
Rule 19    statement -> expression_statement
Rule 20    statement -> compound_statement
Rule 21    statement -> declaration_statement
Rule 22    statement -> selection_statement
Rule 23    statement -> iteration_statement
Rule 24    statement -> return_statement
Rule 25    statement -> break_statement
Rule 26    statement -> continue_statement
Rule 27    iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 28    iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 29    selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 30    selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 31    declaration_statement -> type ID SEMI
Rule 32    declaration_statement -> type ID EQUALS assignment_expression SEMI
Rule 33    more_declaration -> COMMA ID more_declaration
Rule 34    more_declaration -> COMMA ID EQUALS assignment_expression more_declaration
Rule 35    more_declaration -> empty
Rule 36    compound_statement -> LBRACE RBRACE
Rule 37    compound_statement -> LBRACE statement_list RBRACE
Rule 38    expression_statement -> expression SEMI
Rule 39    expression_statement -> SEMI
Rule 40    expression -> assignment_expression
Rule 41    expression -> LPAREN expression RPAREN
Rule 42    function_expression -> ID LPAREN parameter_list RPAREN
Rule 43    assignment_expression -> ID EQUALS assignment_expression
Rule 44    assignment_expression -> logical_OR_expression EQUALS assignment_expression
Rule 45    assignment_expression -> logical_OR_expression
Rule 46    assignment_expression -> function_expression
Rule 47    logical_OR_expression -> logical_AND_expression
Rule 48    logical_OR_expression -> logical_OR_expression LOR logical_AND_expression
Rule 49    logical_AND_expression -> equality_expression
Rule 50    logical_AND_expression -> logical_AND_expression LAND equality_expression
Rule 51    equality_expression -> relational_expression
Rule 52    equality_expression -> equality_expression EQ relational_expression
Rule 53    equality_expression -> equality_expression NE relational_expression
Rule 54    relational_expression -> additive_expression
Rule 55    relational_expression -> relational_expression LT additive_expression
Rule 56    relational_expression -> relational_expression GT additive_expression
Rule 57    relational_expression -> relational_expression LE additive_expression
Rule 58    relational_expression -> relational_expression GE additive_expression
Rule 59    additive_expression -> multiplicative_expression
Rule 60    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 61    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 62    multiplicative_expression -> primary_expression
Rule 63    multiplicative_expression -> multiplicative_expression TIMES primary_expression
Rule 64    multiplicative_expression -> multiplicative_expression DIVIDE primary_expression
Rule 65    statement_list -> statement
Rule 66    statement_list -> statement_list statement
Rule 67    primary_expression -> LPAREN expression RPAREN
Rule 68    primary_expression -> constant
Rule 69    primary_expression -> ID
Rule 70    primary_expression -> reserved
Rule 71    primary_expression -> empty
Rule 72    constant -> ICONST
Rule 73    constant -> FCONST
Rule 74    constant -> SCONST
Rule 75    constant -> MINUS ICONST
Rule 76    reserved -> ENTER
Rule 77    return_statement -> RETURN SEMI
Rule 78    return_statement -> RETURN expression SEMI
Rule 79    break_statement -> BREAK SEMI
Rule 80    continue_statement -> CONTINUE SEMI
Rule 81    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ANDEQUAL             : 
AUTO                 : 
BOOLEAN              : 18
BREAK                : 79
CASE                 : 
CCONST               : 
CHAR                 : 15
COLON                : 
COMMA                : 8 10 33 34
CONST                : 
CONTINUE             : 80
DEFAULT              : 
DIVEQUAL             : 
DIVIDE               : 64
DO                   : 
DOUBLE               : 14
ELLIPSIS             : 
ELSE                 : 30
ENTER                : 76
ENUM                 : 
EQ                   : 52
EQUALS               : 12 32 34 43 44
EXTERN               : 
FCONST               : 73
FLOAT                : 
FOR                  : 
GE                   : 58
GOTO                 : 
GT                   : 56
ICONST               : 72 75
ID                   : 5 6 11 12 31 32 33 34 42 43 69
IF                   : 29 30
INT                  : 13
KEY                  : 17
LAND                 : 50
LBRACE               : 5 6 27 28 29 30 30 36 37
LBRACKET             : 
LE                   : 57
LNOT                 : 
LONG                 : 
LOR                  : 48
LPAREN               : 5 6 27 28 29 30 41 42 67
LSHIFT               : 
LSHIFTEQUAL          : 
LT                   : 55
MINUS                : 61 75
MINUSEQUAL           : 
MINUSMINUS           : 
MOD                  : 
MODEQUAL             : 
NE                   : 53
NOT                  : 
OR                   : 
OREQUAL              : 
PERIOD               : 
PLUS                 : 60
PLUSEQUAL            : 
PLUSPLUS             : 
RBRACE               : 5 6 27 28 29 30 30 36 37
RBRACKET             : 
REGISTER             : 
REPEAT               : 27
RETURN               : 77 78
RPAREN               : 5 6 27 28 29 30 41 42 67
RSHIFT               : 
RSHIFTEQUAL          : 
SCONST               : 74
SEMI                 : 31 32 38 39 77 78 79 80
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 
STRING               : 16
STRUCT               : 
SWITCH               : 
TIMES                : 63
TIMESEQUAL           : 
TYPEDEF              : 
TYPEID               : 
UNION                : 
UNSIGNED             : 
UNTIL                : 28
VOID                 : 
VOLATILE             : 
WHILE                : 
XOR                  : 
XOREQUAL             : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 54 55 56 57 58 60 61
assignment_expression : 12 32 34 40 43 44
break_statement      : 25
compound_statement   : 20
constant             : 68
continue_statement   : 26
declaration_statement : 21
empty                : 35 71
equality_expression  : 49 50 52 53
expression           : 7 8 27 28 29 30 38 41 67 78
expression_statement : 19
external_declaration : 1 2
function_definition  : 3
function_expression  : 46
iteration_statement  : 23
logical_AND_expression : 47 48 50
logical_OR_expression : 44 45 48
more_declaration     : 33 34
multiplicative_expression : 59 60 61 63 64
parameter_declaration : 9 10
parameter_declaration_list : 5 6 10
parameter_list       : 8 42
primary_expression   : 62 63 64
relational_expression : 51 52 53 55 56 57 58
reserved             : 70
return_statement     : 24
selection_statement  : 22
statement            : 4 65 66
statement_list       : 5 27 28 29 30 30 37 66
translation_unit     : 2 0
type                 : 5 6 11 12 31 32

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . statement
    (5) function_definition -> . type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> . type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    external_declaration           shift and go to state 10
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 20
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 22
    translation_unit               shift and go to state 23
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    function_definition            shift and go to state 37
    declaration_statement          shift and go to state 42
    empty                          shift and go to state 43
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 1

    (19) statement -> expression_statement .

    RBRACE          reduce using rule 19 (statement -> expression_statement .)
    SEMI            reduce using rule 19 (statement -> expression_statement .)
    LBRACE          reduce using rule 19 (statement -> expression_statement .)
    IF              reduce using rule 19 (statement -> expression_statement .)
    REPEAT          reduce using rule 19 (statement -> expression_statement .)
    UNTIL           reduce using rule 19 (statement -> expression_statement .)
    RETURN          reduce using rule 19 (statement -> expression_statement .)
    BREAK           reduce using rule 19 (statement -> expression_statement .)
    CONTINUE        reduce using rule 19 (statement -> expression_statement .)
    LPAREN          reduce using rule 19 (statement -> expression_statement .)
    INT             reduce using rule 19 (statement -> expression_statement .)
    DOUBLE          reduce using rule 19 (statement -> expression_statement .)
    CHAR            reduce using rule 19 (statement -> expression_statement .)
    STRING          reduce using rule 19 (statement -> expression_statement .)
    KEY             reduce using rule 19 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 19 (statement -> expression_statement .)
    ID              reduce using rule 19 (statement -> expression_statement .)
    ICONST          reduce using rule 19 (statement -> expression_statement .)
    FCONST          reduce using rule 19 (statement -> expression_statement .)
    SCONST          reduce using rule 19 (statement -> expression_statement .)
    MINUS           reduce using rule 19 (statement -> expression_statement .)
    ENTER           reduce using rule 19 (statement -> expression_statement .)
    EQUALS          reduce using rule 19 (statement -> expression_statement .)
    LOR             reduce using rule 19 (statement -> expression_statement .)
    LAND            reduce using rule 19 (statement -> expression_statement .)
    EQ              reduce using rule 19 (statement -> expression_statement .)
    NE              reduce using rule 19 (statement -> expression_statement .)
    LT              reduce using rule 19 (statement -> expression_statement .)
    GT              reduce using rule 19 (statement -> expression_statement .)
    LE              reduce using rule 19 (statement -> expression_statement .)
    GE              reduce using rule 19 (statement -> expression_statement .)
    PLUS            reduce using rule 19 (statement -> expression_statement .)
    TIMES           reduce using rule 19 (statement -> expression_statement .)
    DIVIDE          reduce using rule 19 (statement -> expression_statement .)
    $end            reduce using rule 19 (statement -> expression_statement .)


state 2

    (77) return_statement -> RETURN . SEMI
    (78) return_statement -> RETURN . expression SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 48
    LPAREN          shift and go to state 30
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    expression                     shift and go to state 49
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 3

    (25) statement -> break_statement .

    RBRACE          reduce using rule 25 (statement -> break_statement .)
    SEMI            reduce using rule 25 (statement -> break_statement .)
    LBRACE          reduce using rule 25 (statement -> break_statement .)
    IF              reduce using rule 25 (statement -> break_statement .)
    REPEAT          reduce using rule 25 (statement -> break_statement .)
    UNTIL           reduce using rule 25 (statement -> break_statement .)
    RETURN          reduce using rule 25 (statement -> break_statement .)
    BREAK           reduce using rule 25 (statement -> break_statement .)
    CONTINUE        reduce using rule 25 (statement -> break_statement .)
    LPAREN          reduce using rule 25 (statement -> break_statement .)
    INT             reduce using rule 25 (statement -> break_statement .)
    DOUBLE          reduce using rule 25 (statement -> break_statement .)
    CHAR            reduce using rule 25 (statement -> break_statement .)
    STRING          reduce using rule 25 (statement -> break_statement .)
    KEY             reduce using rule 25 (statement -> break_statement .)
    BOOLEAN         reduce using rule 25 (statement -> break_statement .)
    ID              reduce using rule 25 (statement -> break_statement .)
    ICONST          reduce using rule 25 (statement -> break_statement .)
    FCONST          reduce using rule 25 (statement -> break_statement .)
    SCONST          reduce using rule 25 (statement -> break_statement .)
    MINUS           reduce using rule 25 (statement -> break_statement .)
    ENTER           reduce using rule 25 (statement -> break_statement .)
    EQUALS          reduce using rule 25 (statement -> break_statement .)
    LOR             reduce using rule 25 (statement -> break_statement .)
    LAND            reduce using rule 25 (statement -> break_statement .)
    EQ              reduce using rule 25 (statement -> break_statement .)
    NE              reduce using rule 25 (statement -> break_statement .)
    LT              reduce using rule 25 (statement -> break_statement .)
    GT              reduce using rule 25 (statement -> break_statement .)
    LE              reduce using rule 25 (statement -> break_statement .)
    GE              reduce using rule 25 (statement -> break_statement .)
    PLUS            reduce using rule 25 (statement -> break_statement .)
    TIMES           reduce using rule 25 (statement -> break_statement .)
    DIVIDE          reduce using rule 25 (statement -> break_statement .)
    $end            reduce using rule 25 (statement -> break_statement .)


state 4

    (80) continue_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 50


state 5

    (68) primary_expression -> constant .

    TIMES           reduce using rule 68 (primary_expression -> constant .)
    DIVIDE          reduce using rule 68 (primary_expression -> constant .)
    PLUS            reduce using rule 68 (primary_expression -> constant .)
    MINUS           reduce using rule 68 (primary_expression -> constant .)
    LT              reduce using rule 68 (primary_expression -> constant .)
    GT              reduce using rule 68 (primary_expression -> constant .)
    LE              reduce using rule 68 (primary_expression -> constant .)
    GE              reduce using rule 68 (primary_expression -> constant .)
    EQ              reduce using rule 68 (primary_expression -> constant .)
    NE              reduce using rule 68 (primary_expression -> constant .)
    LAND            reduce using rule 68 (primary_expression -> constant .)
    EQUALS          reduce using rule 68 (primary_expression -> constant .)
    LOR             reduce using rule 68 (primary_expression -> constant .)
    SEMI            reduce using rule 68 (primary_expression -> constant .)
    RPAREN          reduce using rule 68 (primary_expression -> constant .)
    COMMA           reduce using rule 68 (primary_expression -> constant .)


state 6

    (23) statement -> iteration_statement .

    RBRACE          reduce using rule 23 (statement -> iteration_statement .)
    SEMI            reduce using rule 23 (statement -> iteration_statement .)
    LBRACE          reduce using rule 23 (statement -> iteration_statement .)
    IF              reduce using rule 23 (statement -> iteration_statement .)
    REPEAT          reduce using rule 23 (statement -> iteration_statement .)
    UNTIL           reduce using rule 23 (statement -> iteration_statement .)
    RETURN          reduce using rule 23 (statement -> iteration_statement .)
    BREAK           reduce using rule 23 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 23 (statement -> iteration_statement .)
    LPAREN          reduce using rule 23 (statement -> iteration_statement .)
    INT             reduce using rule 23 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 23 (statement -> iteration_statement .)
    CHAR            reduce using rule 23 (statement -> iteration_statement .)
    STRING          reduce using rule 23 (statement -> iteration_statement .)
    KEY             reduce using rule 23 (statement -> iteration_statement .)
    BOOLEAN         reduce using rule 23 (statement -> iteration_statement .)
    ID              reduce using rule 23 (statement -> iteration_statement .)
    ICONST          reduce using rule 23 (statement -> iteration_statement .)
    FCONST          reduce using rule 23 (statement -> iteration_statement .)
    SCONST          reduce using rule 23 (statement -> iteration_statement .)
    MINUS           reduce using rule 23 (statement -> iteration_statement .)
    ENTER           reduce using rule 23 (statement -> iteration_statement .)
    EQUALS          reduce using rule 23 (statement -> iteration_statement .)
    LOR             reduce using rule 23 (statement -> iteration_statement .)
    LAND            reduce using rule 23 (statement -> iteration_statement .)
    EQ              reduce using rule 23 (statement -> iteration_statement .)
    NE              reduce using rule 23 (statement -> iteration_statement .)
    LT              reduce using rule 23 (statement -> iteration_statement .)
    GT              reduce using rule 23 (statement -> iteration_statement .)
    LE              reduce using rule 23 (statement -> iteration_statement .)
    GE              reduce using rule 23 (statement -> iteration_statement .)
    PLUS            reduce using rule 23 (statement -> iteration_statement .)
    TIMES           reduce using rule 23 (statement -> iteration_statement .)
    DIVIDE          reduce using rule 23 (statement -> iteration_statement .)
    $end            reduce using rule 23 (statement -> iteration_statement .)


state 7

    (75) constant -> MINUS . ICONST

    ICONST          shift and go to state 51


state 8

    (54) relational_expression -> additive_expression .
    (60) additive_expression -> additive_expression . PLUS multiplicative_expression
    (61) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 54 (relational_expression -> additive_expression .)
    GT              reduce using rule 54 (relational_expression -> additive_expression .)
    LE              reduce using rule 54 (relational_expression -> additive_expression .)
    GE              reduce using rule 54 (relational_expression -> additive_expression .)
    EQ              reduce using rule 54 (relational_expression -> additive_expression .)
    NE              reduce using rule 54 (relational_expression -> additive_expression .)
    LAND            reduce using rule 54 (relational_expression -> additive_expression .)
    EQUALS          reduce using rule 54 (relational_expression -> additive_expression .)
    LOR             reduce using rule 54 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 54 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 54 (relational_expression -> additive_expression .)
    SEMI            reduce using rule 54 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 9

    (16) type -> STRING .

    ID              reduce using rule 16 (type -> STRING .)


state 10

    (1) translation_unit -> external_declaration .

    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    STRING          reduce using rule 1 (translation_unit -> external_declaration .)
    KEY             reduce using rule 1 (translation_unit -> external_declaration .)
    BOOLEAN         reduce using rule 1 (translation_unit -> external_declaration .)
    SEMI            reduce using rule 1 (translation_unit -> external_declaration .)
    LBRACE          reduce using rule 1 (translation_unit -> external_declaration .)
    IF              reduce using rule 1 (translation_unit -> external_declaration .)
    REPEAT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNTIL           reduce using rule 1 (translation_unit -> external_declaration .)
    RETURN          reduce using rule 1 (translation_unit -> external_declaration .)
    BREAK           reduce using rule 1 (translation_unit -> external_declaration .)
    CONTINUE        reduce using rule 1 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 1 (translation_unit -> external_declaration .)
    ID              reduce using rule 1 (translation_unit -> external_declaration .)
    ICONST          reduce using rule 1 (translation_unit -> external_declaration .)
    FCONST          reduce using rule 1 (translation_unit -> external_declaration .)
    SCONST          reduce using rule 1 (translation_unit -> external_declaration .)
    MINUS           reduce using rule 1 (translation_unit -> external_declaration .)
    ENTER           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)
    EQUALS          reduce using rule 1 (translation_unit -> external_declaration .)
    LOR             reduce using rule 1 (translation_unit -> external_declaration .)
    LAND            reduce using rule 1 (translation_unit -> external_declaration .)
    EQ              reduce using rule 1 (translation_unit -> external_declaration .)
    NE              reduce using rule 1 (translation_unit -> external_declaration .)
    LT              reduce using rule 1 (translation_unit -> external_declaration .)
    GT              reduce using rule 1 (translation_unit -> external_declaration .)
    LE              reduce using rule 1 (translation_unit -> external_declaration .)
    GE              reduce using rule 1 (translation_unit -> external_declaration .)
    PLUS            reduce using rule 1 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 1 (translation_unit -> external_declaration .)
    DIVIDE          reduce using rule 1 (translation_unit -> external_declaration .)


state 11

    (73) constant -> FCONST .

    TIMES           reduce using rule 73 (constant -> FCONST .)
    DIVIDE          reduce using rule 73 (constant -> FCONST .)
    PLUS            reduce using rule 73 (constant -> FCONST .)
    MINUS           reduce using rule 73 (constant -> FCONST .)
    LT              reduce using rule 73 (constant -> FCONST .)
    GT              reduce using rule 73 (constant -> FCONST .)
    LE              reduce using rule 73 (constant -> FCONST .)
    GE              reduce using rule 73 (constant -> FCONST .)
    EQ              reduce using rule 73 (constant -> FCONST .)
    NE              reduce using rule 73 (constant -> FCONST .)
    LAND            reduce using rule 73 (constant -> FCONST .)
    EQUALS          reduce using rule 73 (constant -> FCONST .)
    LOR             reduce using rule 73 (constant -> FCONST .)
    SEMI            reduce using rule 73 (constant -> FCONST .)
    RPAREN          reduce using rule 73 (constant -> FCONST .)
    COMMA           reduce using rule 73 (constant -> FCONST .)


state 12

    (39) expression_statement -> SEMI .

    RBRACE          reduce using rule 39 (expression_statement -> SEMI .)
    SEMI            reduce using rule 39 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 39 (expression_statement -> SEMI .)
    IF              reduce using rule 39 (expression_statement -> SEMI .)
    REPEAT          reduce using rule 39 (expression_statement -> SEMI .)
    UNTIL           reduce using rule 39 (expression_statement -> SEMI .)
    RETURN          reduce using rule 39 (expression_statement -> SEMI .)
    BREAK           reduce using rule 39 (expression_statement -> SEMI .)
    CONTINUE        reduce using rule 39 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 39 (expression_statement -> SEMI .)
    INT             reduce using rule 39 (expression_statement -> SEMI .)
    DOUBLE          reduce using rule 39 (expression_statement -> SEMI .)
    CHAR            reduce using rule 39 (expression_statement -> SEMI .)
    STRING          reduce using rule 39 (expression_statement -> SEMI .)
    KEY             reduce using rule 39 (expression_statement -> SEMI .)
    BOOLEAN         reduce using rule 39 (expression_statement -> SEMI .)
    ID              reduce using rule 39 (expression_statement -> SEMI .)
    ICONST          reduce using rule 39 (expression_statement -> SEMI .)
    FCONST          reduce using rule 39 (expression_statement -> SEMI .)
    SCONST          reduce using rule 39 (expression_statement -> SEMI .)
    MINUS           reduce using rule 39 (expression_statement -> SEMI .)
    ENTER           reduce using rule 39 (expression_statement -> SEMI .)
    EQUALS          reduce using rule 39 (expression_statement -> SEMI .)
    LOR             reduce using rule 39 (expression_statement -> SEMI .)
    LAND            reduce using rule 39 (expression_statement -> SEMI .)
    EQ              reduce using rule 39 (expression_statement -> SEMI .)
    NE              reduce using rule 39 (expression_statement -> SEMI .)
    LT              reduce using rule 39 (expression_statement -> SEMI .)
    GT              reduce using rule 39 (expression_statement -> SEMI .)
    LE              reduce using rule 39 (expression_statement -> SEMI .)
    GE              reduce using rule 39 (expression_statement -> SEMI .)
    PLUS            reduce using rule 39 (expression_statement -> SEMI .)
    TIMES           reduce using rule 39 (expression_statement -> SEMI .)
    DIVIDE          reduce using rule 39 (expression_statement -> SEMI .)
    $end            reduce using rule 39 (expression_statement -> SEMI .)


state 13

    (20) statement -> compound_statement .

    RBRACE          reduce using rule 20 (statement -> compound_statement .)
    SEMI            reduce using rule 20 (statement -> compound_statement .)
    LBRACE          reduce using rule 20 (statement -> compound_statement .)
    IF              reduce using rule 20 (statement -> compound_statement .)
    REPEAT          reduce using rule 20 (statement -> compound_statement .)
    UNTIL           reduce using rule 20 (statement -> compound_statement .)
    RETURN          reduce using rule 20 (statement -> compound_statement .)
    BREAK           reduce using rule 20 (statement -> compound_statement .)
    CONTINUE        reduce using rule 20 (statement -> compound_statement .)
    LPAREN          reduce using rule 20 (statement -> compound_statement .)
    INT             reduce using rule 20 (statement -> compound_statement .)
    DOUBLE          reduce using rule 20 (statement -> compound_statement .)
    CHAR            reduce using rule 20 (statement -> compound_statement .)
    STRING          reduce using rule 20 (statement -> compound_statement .)
    KEY             reduce using rule 20 (statement -> compound_statement .)
    BOOLEAN         reduce using rule 20 (statement -> compound_statement .)
    ID              reduce using rule 20 (statement -> compound_statement .)
    ICONST          reduce using rule 20 (statement -> compound_statement .)
    FCONST          reduce using rule 20 (statement -> compound_statement .)
    SCONST          reduce using rule 20 (statement -> compound_statement .)
    MINUS           reduce using rule 20 (statement -> compound_statement .)
    ENTER           reduce using rule 20 (statement -> compound_statement .)
    EQUALS          reduce using rule 20 (statement -> compound_statement .)
    LOR             reduce using rule 20 (statement -> compound_statement .)
    LAND            reduce using rule 20 (statement -> compound_statement .)
    EQ              reduce using rule 20 (statement -> compound_statement .)
    NE              reduce using rule 20 (statement -> compound_statement .)
    LT              reduce using rule 20 (statement -> compound_statement .)
    GT              reduce using rule 20 (statement -> compound_statement .)
    LE              reduce using rule 20 (statement -> compound_statement .)
    GE              reduce using rule 20 (statement -> compound_statement .)
    PLUS            reduce using rule 20 (statement -> compound_statement .)
    TIMES           reduce using rule 20 (statement -> compound_statement .)
    DIVIDE          reduce using rule 20 (statement -> compound_statement .)
    $end            reduce using rule 20 (statement -> compound_statement .)


state 14

    (22) statement -> selection_statement .

    RBRACE          reduce using rule 22 (statement -> selection_statement .)
    SEMI            reduce using rule 22 (statement -> selection_statement .)
    LBRACE          reduce using rule 22 (statement -> selection_statement .)
    IF              reduce using rule 22 (statement -> selection_statement .)
    REPEAT          reduce using rule 22 (statement -> selection_statement .)
    UNTIL           reduce using rule 22 (statement -> selection_statement .)
    RETURN          reduce using rule 22 (statement -> selection_statement .)
    BREAK           reduce using rule 22 (statement -> selection_statement .)
    CONTINUE        reduce using rule 22 (statement -> selection_statement .)
    LPAREN          reduce using rule 22 (statement -> selection_statement .)
    INT             reduce using rule 22 (statement -> selection_statement .)
    DOUBLE          reduce using rule 22 (statement -> selection_statement .)
    CHAR            reduce using rule 22 (statement -> selection_statement .)
    STRING          reduce using rule 22 (statement -> selection_statement .)
    KEY             reduce using rule 22 (statement -> selection_statement .)
    BOOLEAN         reduce using rule 22 (statement -> selection_statement .)
    ID              reduce using rule 22 (statement -> selection_statement .)
    ICONST          reduce using rule 22 (statement -> selection_statement .)
    FCONST          reduce using rule 22 (statement -> selection_statement .)
    SCONST          reduce using rule 22 (statement -> selection_statement .)
    MINUS           reduce using rule 22 (statement -> selection_statement .)
    ENTER           reduce using rule 22 (statement -> selection_statement .)
    EQUALS          reduce using rule 22 (statement -> selection_statement .)
    LOR             reduce using rule 22 (statement -> selection_statement .)
    LAND            reduce using rule 22 (statement -> selection_statement .)
    EQ              reduce using rule 22 (statement -> selection_statement .)
    NE              reduce using rule 22 (statement -> selection_statement .)
    LT              reduce using rule 22 (statement -> selection_statement .)
    GT              reduce using rule 22 (statement -> selection_statement .)
    LE              reduce using rule 22 (statement -> selection_statement .)
    GE              reduce using rule 22 (statement -> selection_statement .)
    PLUS            reduce using rule 22 (statement -> selection_statement .)
    TIMES           reduce using rule 22 (statement -> selection_statement .)
    DIVIDE          reduce using rule 22 (statement -> selection_statement .)
    $end            reduce using rule 22 (statement -> selection_statement .)


state 15

    (74) constant -> SCONST .

    TIMES           reduce using rule 74 (constant -> SCONST .)
    DIVIDE          reduce using rule 74 (constant -> SCONST .)
    PLUS            reduce using rule 74 (constant -> SCONST .)
    MINUS           reduce using rule 74 (constant -> SCONST .)
    LT              reduce using rule 74 (constant -> SCONST .)
    GT              reduce using rule 74 (constant -> SCONST .)
    LE              reduce using rule 74 (constant -> SCONST .)
    GE              reduce using rule 74 (constant -> SCONST .)
    EQ              reduce using rule 74 (constant -> SCONST .)
    NE              reduce using rule 74 (constant -> SCONST .)
    LAND            reduce using rule 74 (constant -> SCONST .)
    EQUALS          reduce using rule 74 (constant -> SCONST .)
    LOR             reduce using rule 74 (constant -> SCONST .)
    SEMI            reduce using rule 74 (constant -> SCONST .)
    RPAREN          reduce using rule 74 (constant -> SCONST .)
    COMMA           reduce using rule 74 (constant -> SCONST .)


state 16

    (28) iteration_statement -> UNTIL . LPAREN expression RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 54


state 17

    (24) statement -> return_statement .

    RBRACE          reduce using rule 24 (statement -> return_statement .)
    SEMI            reduce using rule 24 (statement -> return_statement .)
    LBRACE          reduce using rule 24 (statement -> return_statement .)
    IF              reduce using rule 24 (statement -> return_statement .)
    REPEAT          reduce using rule 24 (statement -> return_statement .)
    UNTIL           reduce using rule 24 (statement -> return_statement .)
    RETURN          reduce using rule 24 (statement -> return_statement .)
    BREAK           reduce using rule 24 (statement -> return_statement .)
    CONTINUE        reduce using rule 24 (statement -> return_statement .)
    LPAREN          reduce using rule 24 (statement -> return_statement .)
    INT             reduce using rule 24 (statement -> return_statement .)
    DOUBLE          reduce using rule 24 (statement -> return_statement .)
    CHAR            reduce using rule 24 (statement -> return_statement .)
    STRING          reduce using rule 24 (statement -> return_statement .)
    KEY             reduce using rule 24 (statement -> return_statement .)
    BOOLEAN         reduce using rule 24 (statement -> return_statement .)
    ID              reduce using rule 24 (statement -> return_statement .)
    ICONST          reduce using rule 24 (statement -> return_statement .)
    FCONST          reduce using rule 24 (statement -> return_statement .)
    SCONST          reduce using rule 24 (statement -> return_statement .)
    MINUS           reduce using rule 24 (statement -> return_statement .)
    ENTER           reduce using rule 24 (statement -> return_statement .)
    EQUALS          reduce using rule 24 (statement -> return_statement .)
    LOR             reduce using rule 24 (statement -> return_statement .)
    LAND            reduce using rule 24 (statement -> return_statement .)
    EQ              reduce using rule 24 (statement -> return_statement .)
    NE              reduce using rule 24 (statement -> return_statement .)
    LT              reduce using rule 24 (statement -> return_statement .)
    GT              reduce using rule 24 (statement -> return_statement .)
    LE              reduce using rule 24 (statement -> return_statement .)
    GE              reduce using rule 24 (statement -> return_statement .)
    PLUS            reduce using rule 24 (statement -> return_statement .)
    TIMES           reduce using rule 24 (statement -> return_statement .)
    DIVIDE          reduce using rule 24 (statement -> return_statement .)
    $end            reduce using rule 24 (statement -> return_statement .)


state 18

    (26) statement -> continue_statement .

    RBRACE          reduce using rule 26 (statement -> continue_statement .)
    SEMI            reduce using rule 26 (statement -> continue_statement .)
    LBRACE          reduce using rule 26 (statement -> continue_statement .)
    IF              reduce using rule 26 (statement -> continue_statement .)
    REPEAT          reduce using rule 26 (statement -> continue_statement .)
    UNTIL           reduce using rule 26 (statement -> continue_statement .)
    RETURN          reduce using rule 26 (statement -> continue_statement .)
    BREAK           reduce using rule 26 (statement -> continue_statement .)
    CONTINUE        reduce using rule 26 (statement -> continue_statement .)
    LPAREN          reduce using rule 26 (statement -> continue_statement .)
    INT             reduce using rule 26 (statement -> continue_statement .)
    DOUBLE          reduce using rule 26 (statement -> continue_statement .)
    CHAR            reduce using rule 26 (statement -> continue_statement .)
    STRING          reduce using rule 26 (statement -> continue_statement .)
    KEY             reduce using rule 26 (statement -> continue_statement .)
    BOOLEAN         reduce using rule 26 (statement -> continue_statement .)
    ID              reduce using rule 26 (statement -> continue_statement .)
    ICONST          reduce using rule 26 (statement -> continue_statement .)
    FCONST          reduce using rule 26 (statement -> continue_statement .)
    SCONST          reduce using rule 26 (statement -> continue_statement .)
    MINUS           reduce using rule 26 (statement -> continue_statement .)
    ENTER           reduce using rule 26 (statement -> continue_statement .)
    EQUALS          reduce using rule 26 (statement -> continue_statement .)
    LOR             reduce using rule 26 (statement -> continue_statement .)
    LAND            reduce using rule 26 (statement -> continue_statement .)
    EQ              reduce using rule 26 (statement -> continue_statement .)
    NE              reduce using rule 26 (statement -> continue_statement .)
    LT              reduce using rule 26 (statement -> continue_statement .)
    GT              reduce using rule 26 (statement -> continue_statement .)
    LE              reduce using rule 26 (statement -> continue_statement .)
    GE              reduce using rule 26 (statement -> continue_statement .)
    PLUS            reduce using rule 26 (statement -> continue_statement .)
    TIMES           reduce using rule 26 (statement -> continue_statement .)
    DIVIDE          reduce using rule 26 (statement -> continue_statement .)
    $end            reduce using rule 26 (statement -> continue_statement .)


state 19

    (51) equality_expression -> relational_expression .
    (55) relational_expression -> relational_expression . LT additive_expression
    (56) relational_expression -> relational_expression . GT additive_expression
    (57) relational_expression -> relational_expression . LE additive_expression
    (58) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 51 (equality_expression -> relational_expression .)
    NE              reduce using rule 51 (equality_expression -> relational_expression .)
    LAND            reduce using rule 51 (equality_expression -> relational_expression .)
    EQUALS          reduce using rule 51 (equality_expression -> relational_expression .)
    LOR             reduce using rule 51 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 51 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 51 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 51 (equality_expression -> relational_expression .)
    LT              shift and go to state 57
    GT              shift and go to state 55
    LE              shift and go to state 58
    GE              shift and go to state 56


state 20

    (4) external_declaration -> statement .

    INT             reduce using rule 4 (external_declaration -> statement .)
    DOUBLE          reduce using rule 4 (external_declaration -> statement .)
    CHAR            reduce using rule 4 (external_declaration -> statement .)
    STRING          reduce using rule 4 (external_declaration -> statement .)
    KEY             reduce using rule 4 (external_declaration -> statement .)
    BOOLEAN         reduce using rule 4 (external_declaration -> statement .)
    SEMI            reduce using rule 4 (external_declaration -> statement .)
    LBRACE          reduce using rule 4 (external_declaration -> statement .)
    IF              reduce using rule 4 (external_declaration -> statement .)
    REPEAT          reduce using rule 4 (external_declaration -> statement .)
    UNTIL           reduce using rule 4 (external_declaration -> statement .)
    RETURN          reduce using rule 4 (external_declaration -> statement .)
    BREAK           reduce using rule 4 (external_declaration -> statement .)
    CONTINUE        reduce using rule 4 (external_declaration -> statement .)
    LPAREN          reduce using rule 4 (external_declaration -> statement .)
    ID              reduce using rule 4 (external_declaration -> statement .)
    ICONST          reduce using rule 4 (external_declaration -> statement .)
    FCONST          reduce using rule 4 (external_declaration -> statement .)
    SCONST          reduce using rule 4 (external_declaration -> statement .)
    MINUS           reduce using rule 4 (external_declaration -> statement .)
    ENTER           reduce using rule 4 (external_declaration -> statement .)
    $end            reduce using rule 4 (external_declaration -> statement .)
    EQUALS          reduce using rule 4 (external_declaration -> statement .)
    LOR             reduce using rule 4 (external_declaration -> statement .)
    LAND            reduce using rule 4 (external_declaration -> statement .)
    EQ              reduce using rule 4 (external_declaration -> statement .)
    NE              reduce using rule 4 (external_declaration -> statement .)
    LT              reduce using rule 4 (external_declaration -> statement .)
    GT              reduce using rule 4 (external_declaration -> statement .)
    LE              reduce using rule 4 (external_declaration -> statement .)
    GE              reduce using rule 4 (external_declaration -> statement .)
    PLUS            reduce using rule 4 (external_declaration -> statement .)
    TIMES           reduce using rule 4 (external_declaration -> statement .)
    DIVIDE          reduce using rule 4 (external_declaration -> statement .)


state 21

    (47) logical_OR_expression -> logical_AND_expression .
    (50) logical_AND_expression -> logical_AND_expression . LAND equality_expression

    EQUALS          reduce using rule 47 (logical_OR_expression -> logical_AND_expression .)
    LOR             reduce using rule 47 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 47 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 47 (logical_OR_expression -> logical_AND_expression .)
    SEMI            reduce using rule 47 (logical_OR_expression -> logical_AND_expression .)
    LAND            shift and go to state 59


state 22

    (5) function_definition -> type . ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type . ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE
    (31) declaration_statement -> type . ID SEMI
    (32) declaration_statement -> type . ID EQUALS assignment_expression SEMI

    ID              shift and go to state 60


state 23

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . statement
    (5) function_definition -> . type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> . type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    external_declaration           shift and go to state 61
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 20
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 22
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    function_definition            shift and go to state 37
    declaration_statement          shift and go to state 42
    empty                          shift and go to state 43
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 24

    (27) iteration_statement -> REPEAT . LPAREN expression RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 62


state 25

    (70) primary_expression -> reserved .

    TIMES           reduce using rule 70 (primary_expression -> reserved .)
    DIVIDE          reduce using rule 70 (primary_expression -> reserved .)
    PLUS            reduce using rule 70 (primary_expression -> reserved .)
    MINUS           reduce using rule 70 (primary_expression -> reserved .)
    LT              reduce using rule 70 (primary_expression -> reserved .)
    GT              reduce using rule 70 (primary_expression -> reserved .)
    LE              reduce using rule 70 (primary_expression -> reserved .)
    GE              reduce using rule 70 (primary_expression -> reserved .)
    EQ              reduce using rule 70 (primary_expression -> reserved .)
    NE              reduce using rule 70 (primary_expression -> reserved .)
    LAND            reduce using rule 70 (primary_expression -> reserved .)
    EQUALS          reduce using rule 70 (primary_expression -> reserved .)
    LOR             reduce using rule 70 (primary_expression -> reserved .)
    SEMI            reduce using rule 70 (primary_expression -> reserved .)
    RPAREN          reduce using rule 70 (primary_expression -> reserved .)
    COMMA           reduce using rule 70 (primary_expression -> reserved .)


state 26

    (59) additive_expression -> multiplicative_expression .
    (63) multiplicative_expression -> multiplicative_expression . TIMES primary_expression
    (64) multiplicative_expression -> multiplicative_expression . DIVIDE primary_expression

    PLUS            reduce using rule 59 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 59 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 59 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 59 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 59 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 59 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 59 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 59 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 59 (additive_expression -> multiplicative_expression .)
    EQUALS          reduce using rule 59 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 59 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 59 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 59 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 59 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 63


state 27

    (36) compound_statement -> LBRACE . RBRACE
    (37) compound_statement -> LBRACE . statement_list RBRACE
    (65) statement_list -> . statement
    (66) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 67
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 65
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    statement_list                 shift and go to state 68
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 28

    (72) constant -> ICONST .

    TIMES           reduce using rule 72 (constant -> ICONST .)
    DIVIDE          reduce using rule 72 (constant -> ICONST .)
    PLUS            reduce using rule 72 (constant -> ICONST .)
    MINUS           reduce using rule 72 (constant -> ICONST .)
    LT              reduce using rule 72 (constant -> ICONST .)
    GT              reduce using rule 72 (constant -> ICONST .)
    LE              reduce using rule 72 (constant -> ICONST .)
    GE              reduce using rule 72 (constant -> ICONST .)
    EQ              reduce using rule 72 (constant -> ICONST .)
    NE              reduce using rule 72 (constant -> ICONST .)
    LAND            reduce using rule 72 (constant -> ICONST .)
    EQUALS          reduce using rule 72 (constant -> ICONST .)
    LOR             reduce using rule 72 (constant -> ICONST .)
    SEMI            reduce using rule 72 (constant -> ICONST .)
    RPAREN          reduce using rule 72 (constant -> ICONST .)
    COMMA           reduce using rule 72 (constant -> ICONST .)


state 29

    (62) multiplicative_expression -> primary_expression .

    TIMES           reduce using rule 62 (multiplicative_expression -> primary_expression .)
    DIVIDE          reduce using rule 62 (multiplicative_expression -> primary_expression .)
    PLUS            reduce using rule 62 (multiplicative_expression -> primary_expression .)
    MINUS           reduce using rule 62 (multiplicative_expression -> primary_expression .)
    LT              reduce using rule 62 (multiplicative_expression -> primary_expression .)
    GT              reduce using rule 62 (multiplicative_expression -> primary_expression .)
    LE              reduce using rule 62 (multiplicative_expression -> primary_expression .)
    GE              reduce using rule 62 (multiplicative_expression -> primary_expression .)
    EQ              reduce using rule 62 (multiplicative_expression -> primary_expression .)
    NE              reduce using rule 62 (multiplicative_expression -> primary_expression .)
    LAND            reduce using rule 62 (multiplicative_expression -> primary_expression .)
    EQUALS          reduce using rule 62 (multiplicative_expression -> primary_expression .)
    LOR             reduce using rule 62 (multiplicative_expression -> primary_expression .)
    SEMI            reduce using rule 62 (multiplicative_expression -> primary_expression .)
    RPAREN          reduce using rule 62 (multiplicative_expression -> primary_expression .)
    COMMA           reduce using rule 62 (multiplicative_expression -> primary_expression .)


state 30

    (41) expression -> LPAREN . expression RPAREN
    (67) primary_expression -> LPAREN . expression RPAREN
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 30
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    expression                     shift and go to state 69
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 31

    (76) reserved -> ENTER .

    TIMES           reduce using rule 76 (reserved -> ENTER .)
    DIVIDE          reduce using rule 76 (reserved -> ENTER .)
    PLUS            reduce using rule 76 (reserved -> ENTER .)
    MINUS           reduce using rule 76 (reserved -> ENTER .)
    LT              reduce using rule 76 (reserved -> ENTER .)
    GT              reduce using rule 76 (reserved -> ENTER .)
    LE              reduce using rule 76 (reserved -> ENTER .)
    GE              reduce using rule 76 (reserved -> ENTER .)
    EQ              reduce using rule 76 (reserved -> ENTER .)
    NE              reduce using rule 76 (reserved -> ENTER .)
    LAND            reduce using rule 76 (reserved -> ENTER .)
    EQUALS          reduce using rule 76 (reserved -> ENTER .)
    LOR             reduce using rule 76 (reserved -> ENTER .)
    SEMI            reduce using rule 76 (reserved -> ENTER .)
    RPAREN          reduce using rule 76 (reserved -> ENTER .)
    COMMA           reduce using rule 76 (reserved -> ENTER .)


state 32

    (18) type -> BOOLEAN .

    ID              reduce using rule 18 (type -> BOOLEAN .)


state 33

    (43) assignment_expression -> ID . EQUALS assignment_expression
    (42) function_expression -> ID . LPAREN parameter_list RPAREN
    (69) primary_expression -> ID .

  ! shift/reduce conflict for EQUALS resolved as shift
    EQUALS          shift and go to state 70
    LPAREN          shift and go to state 71
    TIMES           reduce using rule 69 (primary_expression -> ID .)
    DIVIDE          reduce using rule 69 (primary_expression -> ID .)
    PLUS            reduce using rule 69 (primary_expression -> ID .)
    MINUS           reduce using rule 69 (primary_expression -> ID .)
    LT              reduce using rule 69 (primary_expression -> ID .)
    GT              reduce using rule 69 (primary_expression -> ID .)
    LE              reduce using rule 69 (primary_expression -> ID .)
    GE              reduce using rule 69 (primary_expression -> ID .)
    EQ              reduce using rule 69 (primary_expression -> ID .)
    NE              reduce using rule 69 (primary_expression -> ID .)
    LAND            reduce using rule 69 (primary_expression -> ID .)
    LOR             reduce using rule 69 (primary_expression -> ID .)
    SEMI            reduce using rule 69 (primary_expression -> ID .)
    RPAREN          reduce using rule 69 (primary_expression -> ID .)
    COMMA           reduce using rule 69 (primary_expression -> ID .)

  ! EQUALS          [ reduce using rule 69 (primary_expression -> ID .) ]


state 34

    (49) logical_AND_expression -> equality_expression .
    (52) equality_expression -> equality_expression . EQ relational_expression
    (53) equality_expression -> equality_expression . NE relational_expression

    LAND            reduce using rule 49 (logical_AND_expression -> equality_expression .)
    EQUALS          reduce using rule 49 (logical_AND_expression -> equality_expression .)
    LOR             reduce using rule 49 (logical_AND_expression -> equality_expression .)
    RPAREN          reduce using rule 49 (logical_AND_expression -> equality_expression .)
    SEMI            reduce using rule 49 (logical_AND_expression -> equality_expression .)
    COMMA           reduce using rule 49 (logical_AND_expression -> equality_expression .)
    EQ              shift and go to state 72
    NE              shift and go to state 73


state 35

    (29) selection_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LPAREN          shift and go to state 74


state 36

    (15) type -> CHAR .

    ID              reduce using rule 15 (type -> CHAR .)


state 37

    (3) external_declaration -> function_definition .

    INT             reduce using rule 3 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    STRING          reduce using rule 3 (external_declaration -> function_definition .)
    KEY             reduce using rule 3 (external_declaration -> function_definition .)
    BOOLEAN         reduce using rule 3 (external_declaration -> function_definition .)
    SEMI            reduce using rule 3 (external_declaration -> function_definition .)
    LBRACE          reduce using rule 3 (external_declaration -> function_definition .)
    IF              reduce using rule 3 (external_declaration -> function_definition .)
    REPEAT          reduce using rule 3 (external_declaration -> function_definition .)
    UNTIL           reduce using rule 3 (external_declaration -> function_definition .)
    RETURN          reduce using rule 3 (external_declaration -> function_definition .)
    BREAK           reduce using rule 3 (external_declaration -> function_definition .)
    CONTINUE        reduce using rule 3 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 3 (external_declaration -> function_definition .)
    ID              reduce using rule 3 (external_declaration -> function_definition .)
    ICONST          reduce using rule 3 (external_declaration -> function_definition .)
    FCONST          reduce using rule 3 (external_declaration -> function_definition .)
    SCONST          reduce using rule 3 (external_declaration -> function_definition .)
    MINUS           reduce using rule 3 (external_declaration -> function_definition .)
    ENTER           reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)
    EQUALS          reduce using rule 3 (external_declaration -> function_definition .)
    LOR             reduce using rule 3 (external_declaration -> function_definition .)
    LAND            reduce using rule 3 (external_declaration -> function_definition .)
    EQ              reduce using rule 3 (external_declaration -> function_definition .)
    NE              reduce using rule 3 (external_declaration -> function_definition .)
    LT              reduce using rule 3 (external_declaration -> function_definition .)
    GT              reduce using rule 3 (external_declaration -> function_definition .)
    LE              reduce using rule 3 (external_declaration -> function_definition .)
    GE              reduce using rule 3 (external_declaration -> function_definition .)
    PLUS            reduce using rule 3 (external_declaration -> function_definition .)
    TIMES           reduce using rule 3 (external_declaration -> function_definition .)
    DIVIDE          reduce using rule 3 (external_declaration -> function_definition .)


state 38

    (13) type -> INT .

    ID              reduce using rule 13 (type -> INT .)


state 39

    (14) type -> DOUBLE .

    ID              reduce using rule 14 (type -> DOUBLE .)


state 40

    (40) expression -> assignment_expression .

    SEMI            reduce using rule 40 (expression -> assignment_expression .)
    RPAREN          reduce using rule 40 (expression -> assignment_expression .)
    COMMA           reduce using rule 40 (expression -> assignment_expression .)


state 41

    (79) break_statement -> BREAK . SEMI

    SEMI            shift and go to state 75


state 42

    (21) statement -> declaration_statement .

    RBRACE          reduce using rule 21 (statement -> declaration_statement .)
    SEMI            reduce using rule 21 (statement -> declaration_statement .)
    LBRACE          reduce using rule 21 (statement -> declaration_statement .)
    IF              reduce using rule 21 (statement -> declaration_statement .)
    REPEAT          reduce using rule 21 (statement -> declaration_statement .)
    UNTIL           reduce using rule 21 (statement -> declaration_statement .)
    RETURN          reduce using rule 21 (statement -> declaration_statement .)
    BREAK           reduce using rule 21 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 21 (statement -> declaration_statement .)
    LPAREN          reduce using rule 21 (statement -> declaration_statement .)
    INT             reduce using rule 21 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 21 (statement -> declaration_statement .)
    CHAR            reduce using rule 21 (statement -> declaration_statement .)
    STRING          reduce using rule 21 (statement -> declaration_statement .)
    KEY             reduce using rule 21 (statement -> declaration_statement .)
    BOOLEAN         reduce using rule 21 (statement -> declaration_statement .)
    ID              reduce using rule 21 (statement -> declaration_statement .)
    ICONST          reduce using rule 21 (statement -> declaration_statement .)
    FCONST          reduce using rule 21 (statement -> declaration_statement .)
    SCONST          reduce using rule 21 (statement -> declaration_statement .)
    MINUS           reduce using rule 21 (statement -> declaration_statement .)
    ENTER           reduce using rule 21 (statement -> declaration_statement .)
    EQUALS          reduce using rule 21 (statement -> declaration_statement .)
    LOR             reduce using rule 21 (statement -> declaration_statement .)
    LAND            reduce using rule 21 (statement -> declaration_statement .)
    EQ              reduce using rule 21 (statement -> declaration_statement .)
    NE              reduce using rule 21 (statement -> declaration_statement .)
    LT              reduce using rule 21 (statement -> declaration_statement .)
    GT              reduce using rule 21 (statement -> declaration_statement .)
    LE              reduce using rule 21 (statement -> declaration_statement .)
    GE              reduce using rule 21 (statement -> declaration_statement .)
    PLUS            reduce using rule 21 (statement -> declaration_statement .)
    TIMES           reduce using rule 21 (statement -> declaration_statement .)
    DIVIDE          reduce using rule 21 (statement -> declaration_statement .)
    $end            reduce using rule 21 (statement -> declaration_statement .)


state 43

    (71) primary_expression -> empty .

    TIMES           reduce using rule 71 (primary_expression -> empty .)
    DIVIDE          reduce using rule 71 (primary_expression -> empty .)
    PLUS            reduce using rule 71 (primary_expression -> empty .)
    MINUS           reduce using rule 71 (primary_expression -> empty .)
    LT              reduce using rule 71 (primary_expression -> empty .)
    GT              reduce using rule 71 (primary_expression -> empty .)
    LE              reduce using rule 71 (primary_expression -> empty .)
    GE              reduce using rule 71 (primary_expression -> empty .)
    EQ              reduce using rule 71 (primary_expression -> empty .)
    NE              reduce using rule 71 (primary_expression -> empty .)
    LAND            reduce using rule 71 (primary_expression -> empty .)
    EQUALS          reduce using rule 71 (primary_expression -> empty .)
    LOR             reduce using rule 71 (primary_expression -> empty .)
    SEMI            reduce using rule 71 (primary_expression -> empty .)
    RPAREN          reduce using rule 71 (primary_expression -> empty .)
    COMMA           reduce using rule 71 (primary_expression -> empty .)


state 44

    (17) type -> KEY .

    ID              reduce using rule 17 (type -> KEY .)


state 45

    (46) assignment_expression -> function_expression .

    SEMI            reduce using rule 46 (assignment_expression -> function_expression .)
    RPAREN          reduce using rule 46 (assignment_expression -> function_expression .)
    COMMA           reduce using rule 46 (assignment_expression -> function_expression .)


state 46

    (38) expression_statement -> expression . SEMI

    SEMI            shift and go to state 76


state 47

    (44) assignment_expression -> logical_OR_expression . EQUALS assignment_expression
    (45) assignment_expression -> logical_OR_expression .
    (48) logical_OR_expression -> logical_OR_expression . LOR logical_AND_expression

    EQUALS          shift and go to state 78
    SEMI            reduce using rule 45 (assignment_expression -> logical_OR_expression .)
    RPAREN          reduce using rule 45 (assignment_expression -> logical_OR_expression .)
    COMMA           reduce using rule 45 (assignment_expression -> logical_OR_expression .)
    LOR             shift and go to state 77


state 48

    (77) return_statement -> RETURN SEMI .

    RBRACE          reduce using rule 77 (return_statement -> RETURN SEMI .)
    SEMI            reduce using rule 77 (return_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 77 (return_statement -> RETURN SEMI .)
    IF              reduce using rule 77 (return_statement -> RETURN SEMI .)
    REPEAT          reduce using rule 77 (return_statement -> RETURN SEMI .)
    UNTIL           reduce using rule 77 (return_statement -> RETURN SEMI .)
    RETURN          reduce using rule 77 (return_statement -> RETURN SEMI .)
    BREAK           reduce using rule 77 (return_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 77 (return_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 77 (return_statement -> RETURN SEMI .)
    INT             reduce using rule 77 (return_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 77 (return_statement -> RETURN SEMI .)
    CHAR            reduce using rule 77 (return_statement -> RETURN SEMI .)
    STRING          reduce using rule 77 (return_statement -> RETURN SEMI .)
    KEY             reduce using rule 77 (return_statement -> RETURN SEMI .)
    BOOLEAN         reduce using rule 77 (return_statement -> RETURN SEMI .)
    ID              reduce using rule 77 (return_statement -> RETURN SEMI .)
    ICONST          reduce using rule 77 (return_statement -> RETURN SEMI .)
    FCONST          reduce using rule 77 (return_statement -> RETURN SEMI .)
    SCONST          reduce using rule 77 (return_statement -> RETURN SEMI .)
    MINUS           reduce using rule 77 (return_statement -> RETURN SEMI .)
    ENTER           reduce using rule 77 (return_statement -> RETURN SEMI .)
    EQUALS          reduce using rule 77 (return_statement -> RETURN SEMI .)
    LOR             reduce using rule 77 (return_statement -> RETURN SEMI .)
    LAND            reduce using rule 77 (return_statement -> RETURN SEMI .)
    EQ              reduce using rule 77 (return_statement -> RETURN SEMI .)
    NE              reduce using rule 77 (return_statement -> RETURN SEMI .)
    LT              reduce using rule 77 (return_statement -> RETURN SEMI .)
    GT              reduce using rule 77 (return_statement -> RETURN SEMI .)
    LE              reduce using rule 77 (return_statement -> RETURN SEMI .)
    GE              reduce using rule 77 (return_statement -> RETURN SEMI .)
    PLUS            reduce using rule 77 (return_statement -> RETURN SEMI .)
    TIMES           reduce using rule 77 (return_statement -> RETURN SEMI .)
    DIVIDE          reduce using rule 77 (return_statement -> RETURN SEMI .)
    $end            reduce using rule 77 (return_statement -> RETURN SEMI .)


state 49

    (78) return_statement -> RETURN expression . SEMI

    SEMI            shift and go to state 79


state 50

    (80) continue_statement -> CONTINUE SEMI .

    RBRACE          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    IF              reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    REPEAT          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    UNTIL           reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    INT             reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    STRING          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    KEY             reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    BOOLEAN         reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    ID              reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    ICONST          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    FCONST          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    SCONST          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    ENTER           reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    EQUALS          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    LOR             reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    LAND            reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    EQ              reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    NE              reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    LT              reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    GT              reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    LE              reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    GE              reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    DIVIDE          reduce using rule 80 (continue_statement -> CONTINUE SEMI .)
    $end            reduce using rule 80 (continue_statement -> CONTINUE SEMI .)


state 51

    (75) constant -> MINUS ICONST .

    TIMES           reduce using rule 75 (constant -> MINUS ICONST .)
    DIVIDE          reduce using rule 75 (constant -> MINUS ICONST .)
    PLUS            reduce using rule 75 (constant -> MINUS ICONST .)
    MINUS           reduce using rule 75 (constant -> MINUS ICONST .)
    LT              reduce using rule 75 (constant -> MINUS ICONST .)
    GT              reduce using rule 75 (constant -> MINUS ICONST .)
    LE              reduce using rule 75 (constant -> MINUS ICONST .)
    GE              reduce using rule 75 (constant -> MINUS ICONST .)
    EQ              reduce using rule 75 (constant -> MINUS ICONST .)
    NE              reduce using rule 75 (constant -> MINUS ICONST .)
    LAND            reduce using rule 75 (constant -> MINUS ICONST .)
    EQUALS          reduce using rule 75 (constant -> MINUS ICONST .)
    LOR             reduce using rule 75 (constant -> MINUS ICONST .)
    SEMI            reduce using rule 75 (constant -> MINUS ICONST .)
    RPAREN          reduce using rule 75 (constant -> MINUS ICONST .)
    COMMA           reduce using rule 75 (constant -> MINUS ICONST .)


state 52

    (60) additive_expression -> additive_expression PLUS . multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    reserved                       shift and go to state 25
    multiplicative_expression      shift and go to state 80
    empty                          shift and go to state 43
    primary_expression             shift and go to state 29
    constant                       shift and go to state 5

state 53

    (61) additive_expression -> additive_expression MINUS . multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    reserved                       shift and go to state 25
    multiplicative_expression      shift and go to state 83
    empty                          shift and go to state 43
    primary_expression             shift and go to state 29
    constant                       shift and go to state 5

state 54

    (28) iteration_statement -> UNTIL LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 30
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    expression                     shift and go to state 84
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 55

    (56) relational_expression -> relational_expression GT . additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 26
    empty                          shift and go to state 43
    reserved                       shift and go to state 25
    additive_expression            shift and go to state 85
    primary_expression             shift and go to state 29

state 56

    (58) relational_expression -> relational_expression GE . additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 26
    empty                          shift and go to state 43
    reserved                       shift and go to state 25
    additive_expression            shift and go to state 86
    primary_expression             shift and go to state 29

state 57

    (55) relational_expression -> relational_expression LT . additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 26
    empty                          shift and go to state 43
    reserved                       shift and go to state 25
    additive_expression            shift and go to state 87
    primary_expression             shift and go to state 29

state 58

    (57) relational_expression -> relational_expression LE . additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 26
    empty                          shift and go to state 43
    reserved                       shift and go to state 25
    additive_expression            shift and go to state 88
    primary_expression             shift and go to state 29

state 59

    (50) logical_AND_expression -> logical_AND_expression LAND . equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 26
    empty                          shift and go to state 43
    equality_expression            shift and go to state 89
    primary_expression             shift and go to state 29
    reserved                       shift and go to state 25
    additive_expression            shift and go to state 8
    relational_expression          shift and go to state 19

state 60

    (5) function_definition -> type ID . LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type ID . LPAREN parameter_declaration_list RPAREN LBRACE RBRACE
    (31) declaration_statement -> type ID . SEMI
    (32) declaration_statement -> type ID . EQUALS assignment_expression SEMI

    LPAREN          shift and go to state 92
    SEMI            shift and go to state 90
    EQUALS          shift and go to state 91


state 61

    (2) translation_unit -> translation_unit external_declaration .

    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRING          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    KEY             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BOOLEAN         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SEMI            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LBRACE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    IF              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REPEAT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNTIL           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    RETURN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BREAK           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONTINUE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ICONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FCONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SCONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    MINUS           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENTER           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EQUALS          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LOR             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LAND            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EQ              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    NE              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LT              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    GT              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LE              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    GE              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    PLUS            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DIVIDE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 62

    (27) iteration_statement -> REPEAT LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 30
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    expression                     shift and go to state 93
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 63

    (64) multiplicative_expression -> multiplicative_expression DIVIDE . primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    reserved                       shift and go to state 25
    primary_expression             shift and go to state 94
    constant                       shift and go to state 5
    empty                          shift and go to state 43

state 64

    (63) multiplicative_expression -> multiplicative_expression TIMES . primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    reserved                       shift and go to state 25
    primary_expression             shift and go to state 95
    constant                       shift and go to state 5
    empty                          shift and go to state 43

state 65

    (65) statement_list -> statement .

    RBRACE          reduce using rule 65 (statement_list -> statement .)
    SEMI            reduce using rule 65 (statement_list -> statement .)
    LBRACE          reduce using rule 65 (statement_list -> statement .)
    IF              reduce using rule 65 (statement_list -> statement .)
    REPEAT          reduce using rule 65 (statement_list -> statement .)
    UNTIL           reduce using rule 65 (statement_list -> statement .)
    RETURN          reduce using rule 65 (statement_list -> statement .)
    BREAK           reduce using rule 65 (statement_list -> statement .)
    CONTINUE        reduce using rule 65 (statement_list -> statement .)
    LPAREN          reduce using rule 65 (statement_list -> statement .)
    INT             reduce using rule 65 (statement_list -> statement .)
    DOUBLE          reduce using rule 65 (statement_list -> statement .)
    CHAR            reduce using rule 65 (statement_list -> statement .)
    STRING          reduce using rule 65 (statement_list -> statement .)
    KEY             reduce using rule 65 (statement_list -> statement .)
    BOOLEAN         reduce using rule 65 (statement_list -> statement .)
    ID              reduce using rule 65 (statement_list -> statement .)
    ICONST          reduce using rule 65 (statement_list -> statement .)
    FCONST          reduce using rule 65 (statement_list -> statement .)
    SCONST          reduce using rule 65 (statement_list -> statement .)
    MINUS           reduce using rule 65 (statement_list -> statement .)
    ENTER           reduce using rule 65 (statement_list -> statement .)
    EQUALS          reduce using rule 65 (statement_list -> statement .)
    LOR             reduce using rule 65 (statement_list -> statement .)
    LAND            reduce using rule 65 (statement_list -> statement .)
    EQ              reduce using rule 65 (statement_list -> statement .)
    NE              reduce using rule 65 (statement_list -> statement .)
    LT              reduce using rule 65 (statement_list -> statement .)
    GT              reduce using rule 65 (statement_list -> statement .)
    LE              reduce using rule 65 (statement_list -> statement .)
    GE              reduce using rule 65 (statement_list -> statement .)
    PLUS            reduce using rule 65 (statement_list -> statement .)
    TIMES           reduce using rule 65 (statement_list -> statement .)
    DIVIDE          reduce using rule 65 (statement_list -> statement .)


state 66

    (31) declaration_statement -> type . ID SEMI
    (32) declaration_statement -> type . ID EQUALS assignment_expression SEMI

    ID              shift and go to state 96


state 67

    (36) compound_statement -> LBRACE RBRACE .

    RBRACE          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    REPEAT          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    UNTIL           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    STRING          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    KEY             reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    ICONST          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    FCONST          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    SCONST          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    ENTER           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    EQUALS          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LOR             reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LAND            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    EQ              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    NE              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LT              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    GT              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LE              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    GE              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)


state 68

    (37) compound_statement -> LBRACE statement_list . RBRACE
    (66) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 98
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 97
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 69

    (41) expression -> LPAREN expression . RPAREN
    (67) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 99


state 70

    (43) assignment_expression -> ID EQUALS . assignment_expression
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    ID              shift and go to state 33
    LPAREN          shift and go to state 81
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 100
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 71

    (42) function_expression -> ID LPAREN . parameter_list RPAREN
    (7) parameter_list -> . expression
    (8) parameter_list -> . parameter_list COMMA expression
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 30
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 40
    parameter_list                 shift and go to state 101
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    expression                     shift and go to state 102
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 72

    (52) equality_expression -> equality_expression EQ . relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 26
    empty                          shift and go to state 43
    relational_expression          shift and go to state 103
    reserved                       shift and go to state 25
    additive_expression            shift and go to state 8
    primary_expression             shift and go to state 29

state 73

    (53) equality_expression -> equality_expression NE . relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 26
    empty                          shift and go to state 43
    relational_expression          shift and go to state 104
    reserved                       shift and go to state 25
    additive_expression            shift and go to state 8
    primary_expression             shift and go to state 29

state 74

    (29) selection_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 30
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    expression                     shift and go to state 105
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 75

    (79) break_statement -> BREAK SEMI .

    RBRACE          reduce using rule 79 (break_statement -> BREAK SEMI .)
    SEMI            reduce using rule 79 (break_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 79 (break_statement -> BREAK SEMI .)
    IF              reduce using rule 79 (break_statement -> BREAK SEMI .)
    REPEAT          reduce using rule 79 (break_statement -> BREAK SEMI .)
    UNTIL           reduce using rule 79 (break_statement -> BREAK SEMI .)
    RETURN          reduce using rule 79 (break_statement -> BREAK SEMI .)
    BREAK           reduce using rule 79 (break_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 79 (break_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 79 (break_statement -> BREAK SEMI .)
    INT             reduce using rule 79 (break_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 79 (break_statement -> BREAK SEMI .)
    CHAR            reduce using rule 79 (break_statement -> BREAK SEMI .)
    STRING          reduce using rule 79 (break_statement -> BREAK SEMI .)
    KEY             reduce using rule 79 (break_statement -> BREAK SEMI .)
    BOOLEAN         reduce using rule 79 (break_statement -> BREAK SEMI .)
    ID              reduce using rule 79 (break_statement -> BREAK SEMI .)
    ICONST          reduce using rule 79 (break_statement -> BREAK SEMI .)
    FCONST          reduce using rule 79 (break_statement -> BREAK SEMI .)
    SCONST          reduce using rule 79 (break_statement -> BREAK SEMI .)
    MINUS           reduce using rule 79 (break_statement -> BREAK SEMI .)
    ENTER           reduce using rule 79 (break_statement -> BREAK SEMI .)
    EQUALS          reduce using rule 79 (break_statement -> BREAK SEMI .)
    LOR             reduce using rule 79 (break_statement -> BREAK SEMI .)
    LAND            reduce using rule 79 (break_statement -> BREAK SEMI .)
    EQ              reduce using rule 79 (break_statement -> BREAK SEMI .)
    NE              reduce using rule 79 (break_statement -> BREAK SEMI .)
    LT              reduce using rule 79 (break_statement -> BREAK SEMI .)
    GT              reduce using rule 79 (break_statement -> BREAK SEMI .)
    LE              reduce using rule 79 (break_statement -> BREAK SEMI .)
    GE              reduce using rule 79 (break_statement -> BREAK SEMI .)
    PLUS            reduce using rule 79 (break_statement -> BREAK SEMI .)
    TIMES           reduce using rule 79 (break_statement -> BREAK SEMI .)
    DIVIDE          reduce using rule 79 (break_statement -> BREAK SEMI .)
    $end            reduce using rule 79 (break_statement -> BREAK SEMI .)


state 76

    (38) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 38 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 38 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 38 (expression_statement -> expression SEMI .)
    IF              reduce using rule 38 (expression_statement -> expression SEMI .)
    REPEAT          reduce using rule 38 (expression_statement -> expression SEMI .)
    UNTIL           reduce using rule 38 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 38 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 38 (expression_statement -> expression SEMI .)
    CONTINUE        reduce using rule 38 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 38 (expression_statement -> expression SEMI .)
    INT             reduce using rule 38 (expression_statement -> expression SEMI .)
    DOUBLE          reduce using rule 38 (expression_statement -> expression SEMI .)
    CHAR            reduce using rule 38 (expression_statement -> expression SEMI .)
    STRING          reduce using rule 38 (expression_statement -> expression SEMI .)
    KEY             reduce using rule 38 (expression_statement -> expression SEMI .)
    BOOLEAN         reduce using rule 38 (expression_statement -> expression SEMI .)
    ID              reduce using rule 38 (expression_statement -> expression SEMI .)
    ICONST          reduce using rule 38 (expression_statement -> expression SEMI .)
    FCONST          reduce using rule 38 (expression_statement -> expression SEMI .)
    SCONST          reduce using rule 38 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 38 (expression_statement -> expression SEMI .)
    ENTER           reduce using rule 38 (expression_statement -> expression SEMI .)
    EQUALS          reduce using rule 38 (expression_statement -> expression SEMI .)
    LOR             reduce using rule 38 (expression_statement -> expression SEMI .)
    LAND            reduce using rule 38 (expression_statement -> expression SEMI .)
    EQ              reduce using rule 38 (expression_statement -> expression SEMI .)
    NE              reduce using rule 38 (expression_statement -> expression SEMI .)
    LT              reduce using rule 38 (expression_statement -> expression SEMI .)
    GT              reduce using rule 38 (expression_statement -> expression SEMI .)
    LE              reduce using rule 38 (expression_statement -> expression SEMI .)
    GE              reduce using rule 38 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 38 (expression_statement -> expression SEMI .)
    TIMES           reduce using rule 38 (expression_statement -> expression SEMI .)
    DIVIDE          reduce using rule 38 (expression_statement -> expression SEMI .)
    $end            reduce using rule 38 (expression_statement -> expression SEMI .)


state 77

    (48) logical_OR_expression -> logical_OR_expression LOR . logical_AND_expression
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 26
    empty                          shift and go to state 43
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29
    reserved                       shift and go to state 25
    logical_AND_expression         shift and go to state 106
    additive_expression            shift and go to state 8
    relational_expression          shift and go to state 19

state 78

    (44) assignment_expression -> logical_OR_expression EQUALS . assignment_expression
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    ID              shift and go to state 33
    LPAREN          shift and go to state 81
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 107
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 79

    (78) return_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    IF              reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    REPEAT          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    UNTIL           reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    INT             reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    KEY             reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    BOOLEAN         reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    ID              reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    ICONST          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    FCONST          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    SCONST          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    ENTER           reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    EQUALS          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    LOR             reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    LAND            reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    EQ              reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    NE              reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    LT              reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    GT              reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    LE              reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    GE              reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    DIVIDE          reduce using rule 78 (return_statement -> RETURN expression SEMI .)
    $end            reduce using rule 78 (return_statement -> RETURN expression SEMI .)


state 80

    (60) additive_expression -> additive_expression PLUS multiplicative_expression .
    (63) multiplicative_expression -> multiplicative_expression . TIMES primary_expression
    (64) multiplicative_expression -> multiplicative_expression . DIVIDE primary_expression

    PLUS            reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUALS          reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 60 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 63


state 81

    (67) primary_expression -> LPAREN . expression RPAREN
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 30
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    expression                     shift and go to state 108
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 82

    (69) primary_expression -> ID .

    TIMES           reduce using rule 69 (primary_expression -> ID .)
    DIVIDE          reduce using rule 69 (primary_expression -> ID .)
    PLUS            reduce using rule 69 (primary_expression -> ID .)
    MINUS           reduce using rule 69 (primary_expression -> ID .)
    LT              reduce using rule 69 (primary_expression -> ID .)
    GT              reduce using rule 69 (primary_expression -> ID .)
    LE              reduce using rule 69 (primary_expression -> ID .)
    GE              reduce using rule 69 (primary_expression -> ID .)
    EQ              reduce using rule 69 (primary_expression -> ID .)
    NE              reduce using rule 69 (primary_expression -> ID .)
    LAND            reduce using rule 69 (primary_expression -> ID .)
    EQUALS          reduce using rule 69 (primary_expression -> ID .)
    LOR             reduce using rule 69 (primary_expression -> ID .)
    SEMI            reduce using rule 69 (primary_expression -> ID .)
    RPAREN          reduce using rule 69 (primary_expression -> ID .)
    COMMA           reduce using rule 69 (primary_expression -> ID .)


state 83

    (61) additive_expression -> additive_expression MINUS multiplicative_expression .
    (63) multiplicative_expression -> multiplicative_expression . TIMES primary_expression
    (64) multiplicative_expression -> multiplicative_expression . DIVIDE primary_expression

    PLUS            reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUALS          reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 61 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 64
    DIVIDE          shift and go to state 63


state 84

    (28) iteration_statement -> UNTIL LPAREN expression . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 109


state 85

    (56) relational_expression -> relational_expression GT additive_expression .
    (60) additive_expression -> additive_expression . PLUS multiplicative_expression
    (61) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    GT              reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    LE              reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    GE              reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    NE              reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    LAND            reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    EQUALS          reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    LOR             reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    RPAREN          reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    COMMA           reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    SEMI            reduce using rule 56 (relational_expression -> relational_expression GT additive_expression .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 86

    (58) relational_expression -> relational_expression GE additive_expression .
    (60) additive_expression -> additive_expression . PLUS multiplicative_expression
    (61) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    GT              reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    GE              reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    EQ              reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    LAND            reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    EQUALS          reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    LOR             reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    RPAREN          reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    COMMA           reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    SEMI            reduce using rule 58 (relational_expression -> relational_expression GE additive_expression .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 87

    (55) relational_expression -> relational_expression LT additive_expression .
    (60) additive_expression -> additive_expression . PLUS multiplicative_expression
    (61) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    GT              reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    LE              reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    GE              reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    NE              reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    LAND            reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    EQUALS          reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    LOR             reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    RPAREN          reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    COMMA           reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    SEMI            reduce using rule 55 (relational_expression -> relational_expression LT additive_expression .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 88

    (57) relational_expression -> relational_expression LE additive_expression .
    (60) additive_expression -> additive_expression . PLUS multiplicative_expression
    (61) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    GT              reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    GE              reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    EQ              reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    LAND            reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    EQUALS          reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    LOR             reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    RPAREN          reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    COMMA           reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    SEMI            reduce using rule 57 (relational_expression -> relational_expression LE additive_expression .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 89

    (50) logical_AND_expression -> logical_AND_expression LAND equality_expression .
    (52) equality_expression -> equality_expression . EQ relational_expression
    (53) equality_expression -> equality_expression . NE relational_expression

    LAND            reduce using rule 50 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    EQUALS          reduce using rule 50 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    LOR             reduce using rule 50 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    RPAREN          reduce using rule 50 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    SEMI            reduce using rule 50 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    COMMA           reduce using rule 50 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    EQ              shift and go to state 72
    NE              shift and go to state 73


state 90

    (31) declaration_statement -> type ID SEMI .

    RBRACE          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    SEMI            reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LBRACE          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    IF              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    REPEAT          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    UNTIL           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    RETURN          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    BREAK           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    CONTINUE        reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LPAREN          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    INT             reduce using rule 31 (declaration_statement -> type ID SEMI .)
    DOUBLE          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    CHAR            reduce using rule 31 (declaration_statement -> type ID SEMI .)
    STRING          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    KEY             reduce using rule 31 (declaration_statement -> type ID SEMI .)
    BOOLEAN         reduce using rule 31 (declaration_statement -> type ID SEMI .)
    ID              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    ICONST          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    FCONST          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    SCONST          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    MINUS           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    ENTER           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    EQUALS          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LOR             reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LAND            reduce using rule 31 (declaration_statement -> type ID SEMI .)
    EQ              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    NE              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LT              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    GT              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LE              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    GE              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    PLUS            reduce using rule 31 (declaration_statement -> type ID SEMI .)
    TIMES           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    DIVIDE          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    $end            reduce using rule 31 (declaration_statement -> type ID SEMI .)


state 91

    (32) declaration_statement -> type ID EQUALS . assignment_expression SEMI
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    ID              shift and go to state 33
    LPAREN          shift and go to state 81
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    SEMI            reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 110
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 92

    (5) function_definition -> type ID LPAREN . parameter_declaration_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type ID LPAREN . parameter_declaration_list RPAREN LBRACE RBRACE
    (9) parameter_declaration_list -> . parameter_declaration
    (10) parameter_declaration_list -> . parameter_declaration_list COMMA parameter_declaration
    (11) parameter_declaration -> . type ID
    (12) parameter_declaration -> . type ID EQUALS assignment_expression
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN

    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32

    parameter_declaration          shift and go to state 112
    type                           shift and go to state 113
    parameter_declaration_list     shift and go to state 111

state 93

    (27) iteration_statement -> REPEAT LPAREN expression . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 114


state 94

    (64) multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .

    TIMES           reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    DIVIDE          reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    PLUS            reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    MINUS           reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LT              reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    GT              reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LE              reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    GE              reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    EQ              reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    NE              reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LAND            reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    EQUALS          reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LOR             reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    SEMI            reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    RPAREN          reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    COMMA           reduce using rule 64 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)


state 95

    (63) multiplicative_expression -> multiplicative_expression TIMES primary_expression .

    TIMES           reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    DIVIDE          reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    PLUS            reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    MINUS           reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LT              reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    GT              reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LE              reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    GE              reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    EQ              reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    NE              reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LAND            reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    EQUALS          reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LOR             reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    SEMI            reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    RPAREN          reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    COMMA           reduce using rule 63 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)


state 96

    (31) declaration_statement -> type ID . SEMI
    (32) declaration_statement -> type ID . EQUALS assignment_expression SEMI

    SEMI            shift and go to state 90
    EQUALS          shift and go to state 91


state 97

    (66) statement_list -> statement_list statement .

    RBRACE          reduce using rule 66 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 66 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 66 (statement_list -> statement_list statement .)
    IF              reduce using rule 66 (statement_list -> statement_list statement .)
    REPEAT          reduce using rule 66 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 66 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 66 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 66 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 66 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 66 (statement_list -> statement_list statement .)
    INT             reduce using rule 66 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 66 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 66 (statement_list -> statement_list statement .)
    STRING          reduce using rule 66 (statement_list -> statement_list statement .)
    KEY             reduce using rule 66 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 66 (statement_list -> statement_list statement .)
    ID              reduce using rule 66 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 66 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 66 (statement_list -> statement_list statement .)
    SCONST          reduce using rule 66 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 66 (statement_list -> statement_list statement .)
    ENTER           reduce using rule 66 (statement_list -> statement_list statement .)
    EQUALS          reduce using rule 66 (statement_list -> statement_list statement .)
    LOR             reduce using rule 66 (statement_list -> statement_list statement .)
    LAND            reduce using rule 66 (statement_list -> statement_list statement .)
    EQ              reduce using rule 66 (statement_list -> statement_list statement .)
    NE              reduce using rule 66 (statement_list -> statement_list statement .)
    LT              reduce using rule 66 (statement_list -> statement_list statement .)
    GT              reduce using rule 66 (statement_list -> statement_list statement .)
    LE              reduce using rule 66 (statement_list -> statement_list statement .)
    GE              reduce using rule 66 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 66 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 66 (statement_list -> statement_list statement .)
    DIVIDE          reduce using rule 66 (statement_list -> statement_list statement .)


state 98

    (37) compound_statement -> LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    KEY             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LOR             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LAND            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    NE              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)


state 99

    (41) expression -> LPAREN expression RPAREN .
    (67) primary_expression -> LPAREN expression RPAREN .

  ! reduce/reduce conflict for SEMI resolved using rule 41 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)

  ! SEMI            [ reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .) ]
  ! RPAREN          [ reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .) ]
  ! COMMA           [ reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .) ]


state 100

    (43) assignment_expression -> ID EQUALS assignment_expression .

    SEMI            reduce using rule 43 (assignment_expression -> ID EQUALS assignment_expression .)
    RPAREN          reduce using rule 43 (assignment_expression -> ID EQUALS assignment_expression .)
    COMMA           reduce using rule 43 (assignment_expression -> ID EQUALS assignment_expression .)


state 101

    (42) function_expression -> ID LPAREN parameter_list . RPAREN
    (8) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 115
    COMMA           shift and go to state 116


state 102

    (7) parameter_list -> expression .

    RPAREN          reduce using rule 7 (parameter_list -> expression .)
    COMMA           reduce using rule 7 (parameter_list -> expression .)


state 103

    (52) equality_expression -> equality_expression EQ relational_expression .
    (55) relational_expression -> relational_expression . LT additive_expression
    (56) relational_expression -> relational_expression . GT additive_expression
    (57) relational_expression -> relational_expression . LE additive_expression
    (58) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 52 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 52 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 52 (equality_expression -> equality_expression EQ relational_expression .)
    EQUALS          reduce using rule 52 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 52 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 52 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 52 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 52 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 57
    GT              shift and go to state 55
    LE              shift and go to state 58
    GE              shift and go to state 56


state 104

    (53) equality_expression -> equality_expression NE relational_expression .
    (55) relational_expression -> relational_expression . LT additive_expression
    (56) relational_expression -> relational_expression . GT additive_expression
    (57) relational_expression -> relational_expression . LE additive_expression
    (58) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 53 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 53 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 53 (equality_expression -> equality_expression NE relational_expression .)
    EQUALS          reduce using rule 53 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 53 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 53 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 53 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 53 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 57
    GT              shift and go to state 55
    LE              shift and go to state 58
    GE              shift and go to state 56


state 105

    (29) selection_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    RPAREN          shift and go to state 117


state 106

    (48) logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .
    (50) logical_AND_expression -> logical_AND_expression . LAND equality_expression

    EQUALS          reduce using rule 48 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    LOR             reduce using rule 48 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    RPAREN          reduce using rule 48 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    COMMA           reduce using rule 48 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    SEMI            reduce using rule 48 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    LAND            shift and go to state 59


state 107

    (44) assignment_expression -> logical_OR_expression EQUALS assignment_expression .

    SEMI            reduce using rule 44 (assignment_expression -> logical_OR_expression EQUALS assignment_expression .)
    RPAREN          reduce using rule 44 (assignment_expression -> logical_OR_expression EQUALS assignment_expression .)
    COMMA           reduce using rule 44 (assignment_expression -> logical_OR_expression EQUALS assignment_expression .)


state 108

    (67) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 118


state 109

    (28) iteration_statement -> UNTIL LPAREN expression RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 119


state 110

    (32) declaration_statement -> type ID EQUALS assignment_expression . SEMI

    SEMI            shift and go to state 120


state 111

    (5) function_definition -> type ID LPAREN parameter_declaration_list . RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type ID LPAREN parameter_declaration_list . RPAREN LBRACE RBRACE
    (10) parameter_declaration_list -> parameter_declaration_list . COMMA parameter_declaration

    RPAREN          shift and go to state 121
    COMMA           shift and go to state 122


state 112

    (9) parameter_declaration_list -> parameter_declaration .

    RPAREN          reduce using rule 9 (parameter_declaration_list -> parameter_declaration .)
    COMMA           reduce using rule 9 (parameter_declaration_list -> parameter_declaration .)


state 113

    (11) parameter_declaration -> type . ID
    (12) parameter_declaration -> type . ID EQUALS assignment_expression

    ID              shift and go to state 123


state 114

    (27) iteration_statement -> REPEAT LPAREN expression RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 124


state 115

    (42) function_expression -> ID LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 42 (function_expression -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 42 (function_expression -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 42 (function_expression -> ID LPAREN parameter_list RPAREN .)


state 116

    (8) parameter_list -> parameter_list COMMA . expression
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 30
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    expression                     shift and go to state 125
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 117

    (29) selection_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE
    (30) selection_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LBRACE          shift and go to state 126


state 118

    (67) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 67 (primary_expression -> LPAREN expression RPAREN .)


state 119

    (28) iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (65) statement_list -> . statement
    (66) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 65
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    statement_list                 shift and go to state 127
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 120

    (32) declaration_statement -> type ID EQUALS assignment_expression SEMI .

    RBRACE          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    SEMI            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LBRACE          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    IF              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    REPEAT          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    UNTIL           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    RETURN          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    BREAK           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    CONTINUE        reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LPAREN          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    INT             reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    DOUBLE          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    CHAR            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    STRING          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    KEY             reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    BOOLEAN         reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    ID              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    ICONST          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    FCONST          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    SCONST          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    MINUS           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    ENTER           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    EQUALS          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LOR             reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LAND            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    EQ              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    NE              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LT              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    GT              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LE              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    GE              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    PLUS            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    TIMES           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    DIVIDE          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    $end            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)


state 121

    (5) function_definition -> type ID LPAREN parameter_declaration_list RPAREN . LBRACE statement_list RBRACE
    (6) function_definition -> type ID LPAREN parameter_declaration_list RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 128


state 122

    (10) parameter_declaration_list -> parameter_declaration_list COMMA . parameter_declaration
    (11) parameter_declaration -> . type ID
    (12) parameter_declaration -> . type ID EQUALS assignment_expression
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN

    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32

    parameter_declaration          shift and go to state 129
    type                           shift and go to state 113

state 123

    (11) parameter_declaration -> type ID .
    (12) parameter_declaration -> type ID . EQUALS assignment_expression

    RPAREN          reduce using rule 11 (parameter_declaration -> type ID .)
    COMMA           reduce using rule 11 (parameter_declaration -> type ID .)
    EQUALS          shift and go to state 130


state 124

    (27) iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (65) statement_list -> . statement
    (66) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 65
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    statement_list                 shift and go to state 131
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 125

    (8) parameter_list -> parameter_list COMMA expression .

    RPAREN          reduce using rule 8 (parameter_list -> parameter_list COMMA expression .)
    COMMA           reduce using rule 8 (parameter_list -> parameter_list COMMA expression .)


state 126

    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (65) statement_list -> . statement
    (66) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 65
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    statement_list                 shift and go to state 132
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 127

    (28) iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (66) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 133
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 97
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 128

    (5) function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE . statement_list RBRACE
    (6) function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE . RBRACE
    (65) statement_list -> . statement
    (66) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 134
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 65
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    statement_list                 shift and go to state 135
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 129

    (10) parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration .

    RPAREN          reduce using rule 10 (parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration .)
    COMMA           reduce using rule 10 (parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration .)


state 130

    (12) parameter_declaration -> type ID EQUALS . assignment_expression
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    ID              shift and go to state 33
    LPAREN          shift and go to state 81
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)
    RPAREN          reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 136
    multiplicative_expression      shift and go to state 26
    logical_OR_expression          shift and go to state 47
    additive_expression            shift and go to state 8
    empty                          shift and go to state 43
    relational_expression          shift and go to state 19
    reserved                       shift and go to state 25
    function_expression            shift and go to state 45
    logical_AND_expression         shift and go to state 21
    equality_expression            shift and go to state 34
    primary_expression             shift and go to state 29

state 131

    (27) iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (66) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 137
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 97
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 132

    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (66) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 138
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 97
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 133

    (28) iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    INT             reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)


state 134

    (6) function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .

    INT             reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    STRING          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    KEY             reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    BOOLEAN         reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    SEMI            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LBRACE          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    IF              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    REPEAT          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    UNTIL           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    ID              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    ICONST          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    FCONST          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    SCONST          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    MINUS           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    ENTER           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    $end            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    EQUALS          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LOR             reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LAND            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    EQ              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    NE              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LT              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    GT              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LE              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    GE              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    PLUS            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    TIMES           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    DIVIDE          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)


state 135

    (5) function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list . RBRACE
    (66) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 139
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 97
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 136

    (12) parameter_declaration -> type ID EQUALS assignment_expression .

    RPAREN          reduce using rule 12 (parameter_declaration -> type ID EQUALS assignment_expression .)
    COMMA           reduce using rule 12 (parameter_declaration -> type ID EQUALS assignment_expression .)


state 137

    (27) iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    INT             reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)


state 138

    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .
    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE

    RBRACE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    INT             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 140


state 139

    (5) function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .

    INT             reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)


state 140

    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 141


state 141

    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (65) statement_list -> . statement
    (66) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 65
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    statement_list                 shift and go to state 142
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 142

    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (66) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (77) return_statement -> . RETURN SEMI
    (78) return_statement -> . RETURN expression SEMI
    (79) break_statement -> . BREAK SEMI
    (80) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_OR_expression
    (46) assignment_expression -> . function_expression
    (47) logical_OR_expression -> . logical_AND_expression
    (48) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_AND_expression -> . equality_expression
    (50) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (51) equality_expression -> . relational_expression
    (52) equality_expression -> . equality_expression EQ relational_expression
    (53) equality_expression -> . equality_expression NE relational_expression
    (54) relational_expression -> . additive_expression
    (55) relational_expression -> . relational_expression LT additive_expression
    (56) relational_expression -> . relational_expression GT additive_expression
    (57) relational_expression -> . relational_expression LE additive_expression
    (58) relational_expression -> . relational_expression GE additive_expression
    (59) additive_expression -> . multiplicative_expression
    (60) additive_expression -> . additive_expression PLUS multiplicative_expression
    (61) additive_expression -> . additive_expression MINUS multiplicative_expression
    (62) multiplicative_expression -> . primary_expression
    (63) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (64) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (67) primary_expression -> . LPAREN expression RPAREN
    (68) primary_expression -> . constant
    (69) primary_expression -> . ID
    (70) primary_expression -> . reserved
    (71) primary_expression -> . empty
    (72) constant -> . ICONST
    (73) constant -> . FCONST
    (74) constant -> . SCONST
    (75) constant -> . MINUS ICONST
    (76) reserved -> . ENTER
    (81) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 143
    SEMI            shift and go to state 12
    LBRACE          shift and go to state 27
    IF              shift and go to state 35
    REPEAT          shift and go to state 24
    UNTIL           shift and go to state 16
    RETURN          shift and go to state 2
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 30
    INT             shift and go to state 38
    DOUBLE          shift and go to state 39
    CHAR            shift and go to state 36
    STRING          shift and go to state 9
    KEY             shift and go to state 44
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 33
    ICONST          shift and go to state 28
    FCONST          shift and go to state 11
    SCONST          shift and go to state 15
    MINUS           shift and go to state 7
    ENTER           shift and go to state 31
    TIMES           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    LT              reduce using rule 81 (empty -> .)
    GT              reduce using rule 81 (empty -> .)
    LE              reduce using rule 81 (empty -> .)
    GE              reduce using rule 81 (empty -> .)
    EQ              reduce using rule 81 (empty -> .)
    NE              reduce using rule 81 (empty -> .)
    LAND            reduce using rule 81 (empty -> .)
    EQUALS          reduce using rule 81 (empty -> .)
    LOR             reduce using rule 81 (empty -> .)

  ! MINUS           [ reduce using rule 81 (empty -> .) ]
  ! SEMI            [ reduce using rule 81 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 25
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 8
    compound_statement             shift and go to state 13
    selection_statement            shift and go to state 14
    return_statement               shift and go to state 17
    continue_statement             shift and go to state 18
    relational_expression          shift and go to state 19
    statement                      shift and go to state 97
    logical_AND_expression         shift and go to state 21
    type                           shift and go to state 66
    empty                          shift and go to state 43
    assignment_expression          shift and go to state 40
    multiplicative_expression      shift and go to state 26
    primary_expression             shift and go to state 29
    equality_expression            shift and go to state 34
    declaration_statement          shift and go to state 42
    function_expression            shift and go to state 45
    expression                     shift and go to state 46
    logical_OR_expression          shift and go to state 47

state 143

    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    INT             reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    STRING          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    KEY             reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LOR             reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LAND            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    EQ              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    NE              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LT              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    GT              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LE              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    GE              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    $end            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 2 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 2 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 23 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 23 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 27 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 27 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 33 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 141 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 141 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 142 resolved as shift
WARNING: reduce/reduce conflict in state 99 resolved using rule (expression -> LPAREN expression RPAREN)
WARNING: rejected rule (primary_expression -> LPAREN expression RPAREN) in state 99
