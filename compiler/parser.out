Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    VOID
    LBRACKET
    LONG
    ELLIPSIS
    ENUM
    PERIOD
    MINUSEQUAL
    TIMESEQUAL
    OR
    SHORT
    RSHIFTEQUAL
    STATIC
    SIZEOF
    UNSIGNED
    UNION
    COLON
    FOR
    PLUSPLUS
    AND
    TYPEID
    SIGNED
    NOT
    OREQUAL
    MOD
    RSHIFT
    DEFAULT
    WHILE
    DIVEQUAL
    EXTERN
    CASE
    REGISTER
    MODEQUAL
    SWITCH
    PLUSEQUAL
    VOLATILE
    ANDEQUAL
    DO
    LNOT
    CONST
    LSHIFT
    GOTO
    CCONST
    TYPEDEF
    XOR
    AUTO
    MINUSMINUS
    STRUCT
    FLOAT
    XOREQUAL
    LSHIFTEQUAL
    RBRACKET

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> statement
Rule 5     function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE
Rule 6     function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE
Rule 7     parameter_list -> parameter_declaration
Rule 8     parameter_list -> parameter_list COMMA parameter_declaration
Rule 9     parameter_declaration -> primary_expression
Rule 10    parameter_declaration -> type ID
Rule 11    parameter_declaration -> type ID EQUALS assignment_expression
Rule 12    type -> INT
Rule 13    type -> DOUBLE
Rule 14    type -> CHAR
Rule 15    type -> STRING
Rule 16    type -> KEY
Rule 17    type -> BOOLEAN
Rule 18    statement -> expression_statement
Rule 19    statement -> compound_statement
Rule 20    statement -> declaration_statement
Rule 21    statement -> selection_statement
Rule 22    statement -> iteration_statement
Rule 23    statement -> return_statement
Rule 24    statement -> break_statement
Rule 25    statement -> continue_statement
Rule 26    iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 27    iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 28    selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 29    selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 30    declaration_statement -> type ID SEMI
Rule 31    declaration_statement -> type ID EQUALS assignment_expression SEMI
Rule 32    compound_statement -> LBRACE RBRACE
Rule 33    compound_statement -> LBRACE statement_list RBRACE
Rule 34    expression_statement -> expression SEMI
Rule 35    expression_statement -> SEMI
Rule 36    expression -> assignment_expression
Rule 37    expression -> LPAREN expression RPAREN
Rule 38    function_expression -> ID LPAREN parameter_list RPAREN
Rule 39    assignment_expression -> ID EQUALS assignment_expression
Rule 40    assignment_expression -> logical_OR_expression EQUALS assignment_expression
Rule 41    assignment_expression -> logical_OR_expression
Rule 42    assignment_expression -> function_expression
Rule 43    logical_OR_expression -> logical_AND_expression
Rule 44    logical_OR_expression -> logical_OR_expression LOR logical_AND_expression
Rule 45    logical_AND_expression -> equality_expression
Rule 46    logical_AND_expression -> logical_AND_expression LAND equality_expression
Rule 47    equality_expression -> relational_expression
Rule 48    equality_expression -> equality_expression EQ relational_expression
Rule 49    equality_expression -> equality_expression NE relational_expression
Rule 50    relational_expression -> additive_expression
Rule 51    relational_expression -> relational_expression LT additive_expression
Rule 52    relational_expression -> relational_expression GT additive_expression
Rule 53    relational_expression -> relational_expression LE additive_expression
Rule 54    relational_expression -> relational_expression GE additive_expression
Rule 55    additive_expression -> multiplicative_expression
Rule 56    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 57    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 58    multiplicative_expression -> primary_expression
Rule 59    multiplicative_expression -> multiplicative_expression TIMES primary_expression
Rule 60    multiplicative_expression -> multiplicative_expression DIVIDE primary_expression
Rule 61    statement_list -> statement
Rule 62    statement_list -> statement_list statement
Rule 63    primary_expression -> LPAREN expression RPAREN
Rule 64    primary_expression -> constant
Rule 65    primary_expression -> ID
Rule 66    primary_expression -> reserved
Rule 67    primary_expression -> empty
Rule 68    constant -> ICONST
Rule 69    constant -> FCONST
Rule 70    constant -> SCONST
Rule 71    reserved -> ENTER
Rule 72    return_statement -> RETURN SEMI
Rule 73    return_statement -> RETURN expression SEMI
Rule 74    break_statement -> BREAK SEMI
Rule 75    continue_statement -> CONTINUE SEMI
Rule 76    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ANDEQUAL             : 
AUTO                 : 
BOOLEAN              : 17
BREAK                : 74
CASE                 : 
CCONST               : 
CHAR                 : 14
COLON                : 
COMMA                : 8
CONST                : 
CONTINUE             : 75
DEFAULT              : 
DIVEQUAL             : 
DIVIDE               : 60
DO                   : 
DOUBLE               : 13
ELLIPSIS             : 
ELSE                 : 29
ENTER                : 71
ENUM                 : 
EQ                   : 48
EQUALS               : 11 31 39 40
EXTERN               : 
FCONST               : 69
FLOAT                : 
FOR                  : 
GE                   : 54
GOTO                 : 
GT                   : 52
ICONST               : 68
ID                   : 5 6 10 11 30 31 38 39 65
IF                   : 28 29
INT                  : 12
KEY                  : 16
LAND                 : 46
LBRACE               : 5 6 26 27 28 29 29 32 33
LBRACKET             : 
LE                   : 53
LNOT                 : 
LONG                 : 
LOR                  : 44
LPAREN               : 5 6 26 27 28 29 37 38 63
LSHIFT               : 
LSHIFTEQUAL          : 
LT                   : 51
MINUS                : 57
MINUSEQUAL           : 
MINUSMINUS           : 
MOD                  : 
MODEQUAL             : 
NE                   : 49
NOT                  : 
OR                   : 
OREQUAL              : 
PERIOD               : 
PLUS                 : 56
PLUSEQUAL            : 
PLUSPLUS             : 
RBRACE               : 5 6 26 27 28 29 29 32 33
RBRACKET             : 
REGISTER             : 
REPEAT               : 26
RETURN               : 72 73
RPAREN               : 5 6 26 27 28 29 37 38 63
RSHIFT               : 
RSHIFTEQUAL          : 
SCONST               : 70
SEMI                 : 30 31 34 35 72 73 74 75
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 
STRING               : 15
STRUCT               : 
SWITCH               : 
TIMES                : 59
TIMESEQUAL           : 
TYPEDEF              : 
TYPEID               : 
UNION                : 
UNSIGNED             : 
UNTIL                : 27
VOID                 : 
VOLATILE             : 
WHILE                : 
XOR                  : 
XOREQUAL             : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 50 51 52 53 54 56 57
assignment_expression : 11 31 36 39 40
break_statement      : 24
compound_statement   : 19
constant             : 64
continue_statement   : 25
declaration_statement : 20
empty                : 67
equality_expression  : 45 46 48 49
expression           : 26 27 28 29 34 37 63 73
expression_statement : 18
external_declaration : 1 2
function_definition  : 3
function_expression  : 42
iteration_statement  : 22
logical_AND_expression : 43 44 46
logical_OR_expression : 40 41 44
multiplicative_expression : 55 56 57 59 60
parameter_declaration : 7 8
parameter_list       : 5 6 8 38
primary_expression   : 9 58 59 60
relational_expression : 47 48 49 51 52 53 54
reserved             : 66
return_statement     : 23
selection_statement  : 21
statement            : 4 61 62
statement_list       : 5 26 27 28 29 29 33 62
translation_unit     : 2 0
type                 : 5 6 10 11 30 31

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . statement
    (5) function_definition -> . type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> . type ID LPAREN parameter_list RPAREN LBRACE RBRACE
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    external_declaration           shift and go to state 9
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 19
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 21
    translation_unit               shift and go to state 22
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    function_definition            shift and go to state 36
    declaration_statement          shift and go to state 41
    empty                          shift and go to state 42
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 1

    (18) statement -> expression_statement .

    RBRACE          reduce using rule 18 (statement -> expression_statement .)
    SEMI            reduce using rule 18 (statement -> expression_statement .)
    LBRACE          reduce using rule 18 (statement -> expression_statement .)
    IF              reduce using rule 18 (statement -> expression_statement .)
    REPEAT          reduce using rule 18 (statement -> expression_statement .)
    UNTIL           reduce using rule 18 (statement -> expression_statement .)
    RETURN          reduce using rule 18 (statement -> expression_statement .)
    BREAK           reduce using rule 18 (statement -> expression_statement .)
    CONTINUE        reduce using rule 18 (statement -> expression_statement .)
    LPAREN          reduce using rule 18 (statement -> expression_statement .)
    INT             reduce using rule 18 (statement -> expression_statement .)
    DOUBLE          reduce using rule 18 (statement -> expression_statement .)
    CHAR            reduce using rule 18 (statement -> expression_statement .)
    STRING          reduce using rule 18 (statement -> expression_statement .)
    KEY             reduce using rule 18 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 18 (statement -> expression_statement .)
    ID              reduce using rule 18 (statement -> expression_statement .)
    ICONST          reduce using rule 18 (statement -> expression_statement .)
    FCONST          reduce using rule 18 (statement -> expression_statement .)
    SCONST          reduce using rule 18 (statement -> expression_statement .)
    ENTER           reduce using rule 18 (statement -> expression_statement .)
    EQUALS          reduce using rule 18 (statement -> expression_statement .)
    LOR             reduce using rule 18 (statement -> expression_statement .)
    LAND            reduce using rule 18 (statement -> expression_statement .)
    EQ              reduce using rule 18 (statement -> expression_statement .)
    NE              reduce using rule 18 (statement -> expression_statement .)
    LT              reduce using rule 18 (statement -> expression_statement .)
    GT              reduce using rule 18 (statement -> expression_statement .)
    LE              reduce using rule 18 (statement -> expression_statement .)
    GE              reduce using rule 18 (statement -> expression_statement .)
    PLUS            reduce using rule 18 (statement -> expression_statement .)
    MINUS           reduce using rule 18 (statement -> expression_statement .)
    TIMES           reduce using rule 18 (statement -> expression_statement .)
    DIVIDE          reduce using rule 18 (statement -> expression_statement .)
    $end            reduce using rule 18 (statement -> expression_statement .)


state 2

    (72) return_statement -> RETURN . SEMI
    (73) return_statement -> RETURN . expression SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 47
    LPAREN          shift and go to state 29
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    logical_OR_expression          shift and go to state 46
    additive_expression            shift and go to state 7
    empty                          shift and go to state 42
    relational_expression          shift and go to state 18
    reserved                       shift and go to state 24
    function_expression            shift and go to state 44
    expression                     shift and go to state 48
    logical_AND_expression         shift and go to state 20
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28

state 3

    (24) statement -> break_statement .

    RBRACE          reduce using rule 24 (statement -> break_statement .)
    SEMI            reduce using rule 24 (statement -> break_statement .)
    LBRACE          reduce using rule 24 (statement -> break_statement .)
    IF              reduce using rule 24 (statement -> break_statement .)
    REPEAT          reduce using rule 24 (statement -> break_statement .)
    UNTIL           reduce using rule 24 (statement -> break_statement .)
    RETURN          reduce using rule 24 (statement -> break_statement .)
    BREAK           reduce using rule 24 (statement -> break_statement .)
    CONTINUE        reduce using rule 24 (statement -> break_statement .)
    LPAREN          reduce using rule 24 (statement -> break_statement .)
    INT             reduce using rule 24 (statement -> break_statement .)
    DOUBLE          reduce using rule 24 (statement -> break_statement .)
    CHAR            reduce using rule 24 (statement -> break_statement .)
    STRING          reduce using rule 24 (statement -> break_statement .)
    KEY             reduce using rule 24 (statement -> break_statement .)
    BOOLEAN         reduce using rule 24 (statement -> break_statement .)
    ID              reduce using rule 24 (statement -> break_statement .)
    ICONST          reduce using rule 24 (statement -> break_statement .)
    FCONST          reduce using rule 24 (statement -> break_statement .)
    SCONST          reduce using rule 24 (statement -> break_statement .)
    ENTER           reduce using rule 24 (statement -> break_statement .)
    EQUALS          reduce using rule 24 (statement -> break_statement .)
    LOR             reduce using rule 24 (statement -> break_statement .)
    LAND            reduce using rule 24 (statement -> break_statement .)
    EQ              reduce using rule 24 (statement -> break_statement .)
    NE              reduce using rule 24 (statement -> break_statement .)
    LT              reduce using rule 24 (statement -> break_statement .)
    GT              reduce using rule 24 (statement -> break_statement .)
    LE              reduce using rule 24 (statement -> break_statement .)
    GE              reduce using rule 24 (statement -> break_statement .)
    PLUS            reduce using rule 24 (statement -> break_statement .)
    MINUS           reduce using rule 24 (statement -> break_statement .)
    TIMES           reduce using rule 24 (statement -> break_statement .)
    DIVIDE          reduce using rule 24 (statement -> break_statement .)
    $end            reduce using rule 24 (statement -> break_statement .)


state 4

    (75) continue_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 49


state 5

    (64) primary_expression -> constant .

    TIMES           reduce using rule 64 (primary_expression -> constant .)
    DIVIDE          reduce using rule 64 (primary_expression -> constant .)
    PLUS            reduce using rule 64 (primary_expression -> constant .)
    MINUS           reduce using rule 64 (primary_expression -> constant .)
    LT              reduce using rule 64 (primary_expression -> constant .)
    GT              reduce using rule 64 (primary_expression -> constant .)
    LE              reduce using rule 64 (primary_expression -> constant .)
    GE              reduce using rule 64 (primary_expression -> constant .)
    EQ              reduce using rule 64 (primary_expression -> constant .)
    NE              reduce using rule 64 (primary_expression -> constant .)
    LAND            reduce using rule 64 (primary_expression -> constant .)
    EQUALS          reduce using rule 64 (primary_expression -> constant .)
    LOR             reduce using rule 64 (primary_expression -> constant .)
    SEMI            reduce using rule 64 (primary_expression -> constant .)
    RPAREN          reduce using rule 64 (primary_expression -> constant .)
    COMMA           reduce using rule 64 (primary_expression -> constant .)


state 6

    (22) statement -> iteration_statement .

    RBRACE          reduce using rule 22 (statement -> iteration_statement .)
    SEMI            reduce using rule 22 (statement -> iteration_statement .)
    LBRACE          reduce using rule 22 (statement -> iteration_statement .)
    IF              reduce using rule 22 (statement -> iteration_statement .)
    REPEAT          reduce using rule 22 (statement -> iteration_statement .)
    UNTIL           reduce using rule 22 (statement -> iteration_statement .)
    RETURN          reduce using rule 22 (statement -> iteration_statement .)
    BREAK           reduce using rule 22 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 22 (statement -> iteration_statement .)
    LPAREN          reduce using rule 22 (statement -> iteration_statement .)
    INT             reduce using rule 22 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 22 (statement -> iteration_statement .)
    CHAR            reduce using rule 22 (statement -> iteration_statement .)
    STRING          reduce using rule 22 (statement -> iteration_statement .)
    KEY             reduce using rule 22 (statement -> iteration_statement .)
    BOOLEAN         reduce using rule 22 (statement -> iteration_statement .)
    ID              reduce using rule 22 (statement -> iteration_statement .)
    ICONST          reduce using rule 22 (statement -> iteration_statement .)
    FCONST          reduce using rule 22 (statement -> iteration_statement .)
    SCONST          reduce using rule 22 (statement -> iteration_statement .)
    ENTER           reduce using rule 22 (statement -> iteration_statement .)
    EQUALS          reduce using rule 22 (statement -> iteration_statement .)
    LOR             reduce using rule 22 (statement -> iteration_statement .)
    LAND            reduce using rule 22 (statement -> iteration_statement .)
    EQ              reduce using rule 22 (statement -> iteration_statement .)
    NE              reduce using rule 22 (statement -> iteration_statement .)
    LT              reduce using rule 22 (statement -> iteration_statement .)
    GT              reduce using rule 22 (statement -> iteration_statement .)
    LE              reduce using rule 22 (statement -> iteration_statement .)
    GE              reduce using rule 22 (statement -> iteration_statement .)
    PLUS            reduce using rule 22 (statement -> iteration_statement .)
    MINUS           reduce using rule 22 (statement -> iteration_statement .)
    TIMES           reduce using rule 22 (statement -> iteration_statement .)
    DIVIDE          reduce using rule 22 (statement -> iteration_statement .)
    $end            reduce using rule 22 (statement -> iteration_statement .)


state 7

    (50) relational_expression -> additive_expression .
    (56) additive_expression -> additive_expression . PLUS multiplicative_expression
    (57) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 50 (relational_expression -> additive_expression .)
    GT              reduce using rule 50 (relational_expression -> additive_expression .)
    LE              reduce using rule 50 (relational_expression -> additive_expression .)
    GE              reduce using rule 50 (relational_expression -> additive_expression .)
    EQ              reduce using rule 50 (relational_expression -> additive_expression .)
    NE              reduce using rule 50 (relational_expression -> additive_expression .)
    LAND            reduce using rule 50 (relational_expression -> additive_expression .)
    EQUALS          reduce using rule 50 (relational_expression -> additive_expression .)
    LOR             reduce using rule 50 (relational_expression -> additive_expression .)
    SEMI            reduce using rule 50 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 50 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 50 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51


state 8

    (15) type -> STRING .

    ID              reduce using rule 15 (type -> STRING .)


state 9

    (1) translation_unit -> external_declaration .

    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    STRING          reduce using rule 1 (translation_unit -> external_declaration .)
    KEY             reduce using rule 1 (translation_unit -> external_declaration .)
    BOOLEAN         reduce using rule 1 (translation_unit -> external_declaration .)
    SEMI            reduce using rule 1 (translation_unit -> external_declaration .)
    LBRACE          reduce using rule 1 (translation_unit -> external_declaration .)
    IF              reduce using rule 1 (translation_unit -> external_declaration .)
    REPEAT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNTIL           reduce using rule 1 (translation_unit -> external_declaration .)
    RETURN          reduce using rule 1 (translation_unit -> external_declaration .)
    BREAK           reduce using rule 1 (translation_unit -> external_declaration .)
    CONTINUE        reduce using rule 1 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 1 (translation_unit -> external_declaration .)
    ID              reduce using rule 1 (translation_unit -> external_declaration .)
    ICONST          reduce using rule 1 (translation_unit -> external_declaration .)
    FCONST          reduce using rule 1 (translation_unit -> external_declaration .)
    SCONST          reduce using rule 1 (translation_unit -> external_declaration .)
    ENTER           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)
    EQUALS          reduce using rule 1 (translation_unit -> external_declaration .)
    LOR             reduce using rule 1 (translation_unit -> external_declaration .)
    LAND            reduce using rule 1 (translation_unit -> external_declaration .)
    EQ              reduce using rule 1 (translation_unit -> external_declaration .)
    NE              reduce using rule 1 (translation_unit -> external_declaration .)
    LT              reduce using rule 1 (translation_unit -> external_declaration .)
    GT              reduce using rule 1 (translation_unit -> external_declaration .)
    LE              reduce using rule 1 (translation_unit -> external_declaration .)
    GE              reduce using rule 1 (translation_unit -> external_declaration .)
    PLUS            reduce using rule 1 (translation_unit -> external_declaration .)
    MINUS           reduce using rule 1 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 1 (translation_unit -> external_declaration .)
    DIVIDE          reduce using rule 1 (translation_unit -> external_declaration .)


state 10

    (69) constant -> FCONST .

    TIMES           reduce using rule 69 (constant -> FCONST .)
    DIVIDE          reduce using rule 69 (constant -> FCONST .)
    PLUS            reduce using rule 69 (constant -> FCONST .)
    MINUS           reduce using rule 69 (constant -> FCONST .)
    LT              reduce using rule 69 (constant -> FCONST .)
    GT              reduce using rule 69 (constant -> FCONST .)
    LE              reduce using rule 69 (constant -> FCONST .)
    GE              reduce using rule 69 (constant -> FCONST .)
    EQ              reduce using rule 69 (constant -> FCONST .)
    NE              reduce using rule 69 (constant -> FCONST .)
    LAND            reduce using rule 69 (constant -> FCONST .)
    EQUALS          reduce using rule 69 (constant -> FCONST .)
    LOR             reduce using rule 69 (constant -> FCONST .)
    SEMI            reduce using rule 69 (constant -> FCONST .)
    RPAREN          reduce using rule 69 (constant -> FCONST .)
    COMMA           reduce using rule 69 (constant -> FCONST .)


state 11

    (35) expression_statement -> SEMI .

    RBRACE          reduce using rule 35 (expression_statement -> SEMI .)
    SEMI            reduce using rule 35 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 35 (expression_statement -> SEMI .)
    IF              reduce using rule 35 (expression_statement -> SEMI .)
    REPEAT          reduce using rule 35 (expression_statement -> SEMI .)
    UNTIL           reduce using rule 35 (expression_statement -> SEMI .)
    RETURN          reduce using rule 35 (expression_statement -> SEMI .)
    BREAK           reduce using rule 35 (expression_statement -> SEMI .)
    CONTINUE        reduce using rule 35 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 35 (expression_statement -> SEMI .)
    INT             reduce using rule 35 (expression_statement -> SEMI .)
    DOUBLE          reduce using rule 35 (expression_statement -> SEMI .)
    CHAR            reduce using rule 35 (expression_statement -> SEMI .)
    STRING          reduce using rule 35 (expression_statement -> SEMI .)
    KEY             reduce using rule 35 (expression_statement -> SEMI .)
    BOOLEAN         reduce using rule 35 (expression_statement -> SEMI .)
    ID              reduce using rule 35 (expression_statement -> SEMI .)
    ICONST          reduce using rule 35 (expression_statement -> SEMI .)
    FCONST          reduce using rule 35 (expression_statement -> SEMI .)
    SCONST          reduce using rule 35 (expression_statement -> SEMI .)
    ENTER           reduce using rule 35 (expression_statement -> SEMI .)
    EQUALS          reduce using rule 35 (expression_statement -> SEMI .)
    LOR             reduce using rule 35 (expression_statement -> SEMI .)
    LAND            reduce using rule 35 (expression_statement -> SEMI .)
    EQ              reduce using rule 35 (expression_statement -> SEMI .)
    NE              reduce using rule 35 (expression_statement -> SEMI .)
    LT              reduce using rule 35 (expression_statement -> SEMI .)
    GT              reduce using rule 35 (expression_statement -> SEMI .)
    LE              reduce using rule 35 (expression_statement -> SEMI .)
    GE              reduce using rule 35 (expression_statement -> SEMI .)
    PLUS            reduce using rule 35 (expression_statement -> SEMI .)
    MINUS           reduce using rule 35 (expression_statement -> SEMI .)
    TIMES           reduce using rule 35 (expression_statement -> SEMI .)
    DIVIDE          reduce using rule 35 (expression_statement -> SEMI .)
    $end            reduce using rule 35 (expression_statement -> SEMI .)


state 12

    (19) statement -> compound_statement .

    RBRACE          reduce using rule 19 (statement -> compound_statement .)
    SEMI            reduce using rule 19 (statement -> compound_statement .)
    LBRACE          reduce using rule 19 (statement -> compound_statement .)
    IF              reduce using rule 19 (statement -> compound_statement .)
    REPEAT          reduce using rule 19 (statement -> compound_statement .)
    UNTIL           reduce using rule 19 (statement -> compound_statement .)
    RETURN          reduce using rule 19 (statement -> compound_statement .)
    BREAK           reduce using rule 19 (statement -> compound_statement .)
    CONTINUE        reduce using rule 19 (statement -> compound_statement .)
    LPAREN          reduce using rule 19 (statement -> compound_statement .)
    INT             reduce using rule 19 (statement -> compound_statement .)
    DOUBLE          reduce using rule 19 (statement -> compound_statement .)
    CHAR            reduce using rule 19 (statement -> compound_statement .)
    STRING          reduce using rule 19 (statement -> compound_statement .)
    KEY             reduce using rule 19 (statement -> compound_statement .)
    BOOLEAN         reduce using rule 19 (statement -> compound_statement .)
    ID              reduce using rule 19 (statement -> compound_statement .)
    ICONST          reduce using rule 19 (statement -> compound_statement .)
    FCONST          reduce using rule 19 (statement -> compound_statement .)
    SCONST          reduce using rule 19 (statement -> compound_statement .)
    ENTER           reduce using rule 19 (statement -> compound_statement .)
    EQUALS          reduce using rule 19 (statement -> compound_statement .)
    LOR             reduce using rule 19 (statement -> compound_statement .)
    LAND            reduce using rule 19 (statement -> compound_statement .)
    EQ              reduce using rule 19 (statement -> compound_statement .)
    NE              reduce using rule 19 (statement -> compound_statement .)
    LT              reduce using rule 19 (statement -> compound_statement .)
    GT              reduce using rule 19 (statement -> compound_statement .)
    LE              reduce using rule 19 (statement -> compound_statement .)
    GE              reduce using rule 19 (statement -> compound_statement .)
    PLUS            reduce using rule 19 (statement -> compound_statement .)
    MINUS           reduce using rule 19 (statement -> compound_statement .)
    TIMES           reduce using rule 19 (statement -> compound_statement .)
    DIVIDE          reduce using rule 19 (statement -> compound_statement .)
    $end            reduce using rule 19 (statement -> compound_statement .)


state 13

    (21) statement -> selection_statement .

    RBRACE          reduce using rule 21 (statement -> selection_statement .)
    SEMI            reduce using rule 21 (statement -> selection_statement .)
    LBRACE          reduce using rule 21 (statement -> selection_statement .)
    IF              reduce using rule 21 (statement -> selection_statement .)
    REPEAT          reduce using rule 21 (statement -> selection_statement .)
    UNTIL           reduce using rule 21 (statement -> selection_statement .)
    RETURN          reduce using rule 21 (statement -> selection_statement .)
    BREAK           reduce using rule 21 (statement -> selection_statement .)
    CONTINUE        reduce using rule 21 (statement -> selection_statement .)
    LPAREN          reduce using rule 21 (statement -> selection_statement .)
    INT             reduce using rule 21 (statement -> selection_statement .)
    DOUBLE          reduce using rule 21 (statement -> selection_statement .)
    CHAR            reduce using rule 21 (statement -> selection_statement .)
    STRING          reduce using rule 21 (statement -> selection_statement .)
    KEY             reduce using rule 21 (statement -> selection_statement .)
    BOOLEAN         reduce using rule 21 (statement -> selection_statement .)
    ID              reduce using rule 21 (statement -> selection_statement .)
    ICONST          reduce using rule 21 (statement -> selection_statement .)
    FCONST          reduce using rule 21 (statement -> selection_statement .)
    SCONST          reduce using rule 21 (statement -> selection_statement .)
    ENTER           reduce using rule 21 (statement -> selection_statement .)
    EQUALS          reduce using rule 21 (statement -> selection_statement .)
    LOR             reduce using rule 21 (statement -> selection_statement .)
    LAND            reduce using rule 21 (statement -> selection_statement .)
    EQ              reduce using rule 21 (statement -> selection_statement .)
    NE              reduce using rule 21 (statement -> selection_statement .)
    LT              reduce using rule 21 (statement -> selection_statement .)
    GT              reduce using rule 21 (statement -> selection_statement .)
    LE              reduce using rule 21 (statement -> selection_statement .)
    GE              reduce using rule 21 (statement -> selection_statement .)
    PLUS            reduce using rule 21 (statement -> selection_statement .)
    MINUS           reduce using rule 21 (statement -> selection_statement .)
    TIMES           reduce using rule 21 (statement -> selection_statement .)
    DIVIDE          reduce using rule 21 (statement -> selection_statement .)
    $end            reduce using rule 21 (statement -> selection_statement .)


state 14

    (70) constant -> SCONST .

    TIMES           reduce using rule 70 (constant -> SCONST .)
    DIVIDE          reduce using rule 70 (constant -> SCONST .)
    PLUS            reduce using rule 70 (constant -> SCONST .)
    MINUS           reduce using rule 70 (constant -> SCONST .)
    LT              reduce using rule 70 (constant -> SCONST .)
    GT              reduce using rule 70 (constant -> SCONST .)
    LE              reduce using rule 70 (constant -> SCONST .)
    GE              reduce using rule 70 (constant -> SCONST .)
    EQ              reduce using rule 70 (constant -> SCONST .)
    NE              reduce using rule 70 (constant -> SCONST .)
    LAND            reduce using rule 70 (constant -> SCONST .)
    EQUALS          reduce using rule 70 (constant -> SCONST .)
    LOR             reduce using rule 70 (constant -> SCONST .)
    SEMI            reduce using rule 70 (constant -> SCONST .)
    RPAREN          reduce using rule 70 (constant -> SCONST .)
    COMMA           reduce using rule 70 (constant -> SCONST .)


state 15

    (27) iteration_statement -> UNTIL . LPAREN expression RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 52


state 16

    (23) statement -> return_statement .

    RBRACE          reduce using rule 23 (statement -> return_statement .)
    SEMI            reduce using rule 23 (statement -> return_statement .)
    LBRACE          reduce using rule 23 (statement -> return_statement .)
    IF              reduce using rule 23 (statement -> return_statement .)
    REPEAT          reduce using rule 23 (statement -> return_statement .)
    UNTIL           reduce using rule 23 (statement -> return_statement .)
    RETURN          reduce using rule 23 (statement -> return_statement .)
    BREAK           reduce using rule 23 (statement -> return_statement .)
    CONTINUE        reduce using rule 23 (statement -> return_statement .)
    LPAREN          reduce using rule 23 (statement -> return_statement .)
    INT             reduce using rule 23 (statement -> return_statement .)
    DOUBLE          reduce using rule 23 (statement -> return_statement .)
    CHAR            reduce using rule 23 (statement -> return_statement .)
    STRING          reduce using rule 23 (statement -> return_statement .)
    KEY             reduce using rule 23 (statement -> return_statement .)
    BOOLEAN         reduce using rule 23 (statement -> return_statement .)
    ID              reduce using rule 23 (statement -> return_statement .)
    ICONST          reduce using rule 23 (statement -> return_statement .)
    FCONST          reduce using rule 23 (statement -> return_statement .)
    SCONST          reduce using rule 23 (statement -> return_statement .)
    ENTER           reduce using rule 23 (statement -> return_statement .)
    EQUALS          reduce using rule 23 (statement -> return_statement .)
    LOR             reduce using rule 23 (statement -> return_statement .)
    LAND            reduce using rule 23 (statement -> return_statement .)
    EQ              reduce using rule 23 (statement -> return_statement .)
    NE              reduce using rule 23 (statement -> return_statement .)
    LT              reduce using rule 23 (statement -> return_statement .)
    GT              reduce using rule 23 (statement -> return_statement .)
    LE              reduce using rule 23 (statement -> return_statement .)
    GE              reduce using rule 23 (statement -> return_statement .)
    PLUS            reduce using rule 23 (statement -> return_statement .)
    MINUS           reduce using rule 23 (statement -> return_statement .)
    TIMES           reduce using rule 23 (statement -> return_statement .)
    DIVIDE          reduce using rule 23 (statement -> return_statement .)
    $end            reduce using rule 23 (statement -> return_statement .)


state 17

    (25) statement -> continue_statement .

    RBRACE          reduce using rule 25 (statement -> continue_statement .)
    SEMI            reduce using rule 25 (statement -> continue_statement .)
    LBRACE          reduce using rule 25 (statement -> continue_statement .)
    IF              reduce using rule 25 (statement -> continue_statement .)
    REPEAT          reduce using rule 25 (statement -> continue_statement .)
    UNTIL           reduce using rule 25 (statement -> continue_statement .)
    RETURN          reduce using rule 25 (statement -> continue_statement .)
    BREAK           reduce using rule 25 (statement -> continue_statement .)
    CONTINUE        reduce using rule 25 (statement -> continue_statement .)
    LPAREN          reduce using rule 25 (statement -> continue_statement .)
    INT             reduce using rule 25 (statement -> continue_statement .)
    DOUBLE          reduce using rule 25 (statement -> continue_statement .)
    CHAR            reduce using rule 25 (statement -> continue_statement .)
    STRING          reduce using rule 25 (statement -> continue_statement .)
    KEY             reduce using rule 25 (statement -> continue_statement .)
    BOOLEAN         reduce using rule 25 (statement -> continue_statement .)
    ID              reduce using rule 25 (statement -> continue_statement .)
    ICONST          reduce using rule 25 (statement -> continue_statement .)
    FCONST          reduce using rule 25 (statement -> continue_statement .)
    SCONST          reduce using rule 25 (statement -> continue_statement .)
    ENTER           reduce using rule 25 (statement -> continue_statement .)
    EQUALS          reduce using rule 25 (statement -> continue_statement .)
    LOR             reduce using rule 25 (statement -> continue_statement .)
    LAND            reduce using rule 25 (statement -> continue_statement .)
    EQ              reduce using rule 25 (statement -> continue_statement .)
    NE              reduce using rule 25 (statement -> continue_statement .)
    LT              reduce using rule 25 (statement -> continue_statement .)
    GT              reduce using rule 25 (statement -> continue_statement .)
    LE              reduce using rule 25 (statement -> continue_statement .)
    GE              reduce using rule 25 (statement -> continue_statement .)
    PLUS            reduce using rule 25 (statement -> continue_statement .)
    MINUS           reduce using rule 25 (statement -> continue_statement .)
    TIMES           reduce using rule 25 (statement -> continue_statement .)
    DIVIDE          reduce using rule 25 (statement -> continue_statement .)
    $end            reduce using rule 25 (statement -> continue_statement .)


state 18

    (47) equality_expression -> relational_expression .
    (51) relational_expression -> relational_expression . LT additive_expression
    (52) relational_expression -> relational_expression . GT additive_expression
    (53) relational_expression -> relational_expression . LE additive_expression
    (54) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 47 (equality_expression -> relational_expression .)
    NE              reduce using rule 47 (equality_expression -> relational_expression .)
    LAND            reduce using rule 47 (equality_expression -> relational_expression .)
    EQUALS          reduce using rule 47 (equality_expression -> relational_expression .)
    LOR             reduce using rule 47 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 47 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 47 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 47 (equality_expression -> relational_expression .)
    LT              shift and go to state 55
    GT              shift and go to state 53
    LE              shift and go to state 56
    GE              shift and go to state 54


state 19

    (4) external_declaration -> statement .

    INT             reduce using rule 4 (external_declaration -> statement .)
    DOUBLE          reduce using rule 4 (external_declaration -> statement .)
    CHAR            reduce using rule 4 (external_declaration -> statement .)
    STRING          reduce using rule 4 (external_declaration -> statement .)
    KEY             reduce using rule 4 (external_declaration -> statement .)
    BOOLEAN         reduce using rule 4 (external_declaration -> statement .)
    SEMI            reduce using rule 4 (external_declaration -> statement .)
    LBRACE          reduce using rule 4 (external_declaration -> statement .)
    IF              reduce using rule 4 (external_declaration -> statement .)
    REPEAT          reduce using rule 4 (external_declaration -> statement .)
    UNTIL           reduce using rule 4 (external_declaration -> statement .)
    RETURN          reduce using rule 4 (external_declaration -> statement .)
    BREAK           reduce using rule 4 (external_declaration -> statement .)
    CONTINUE        reduce using rule 4 (external_declaration -> statement .)
    LPAREN          reduce using rule 4 (external_declaration -> statement .)
    ID              reduce using rule 4 (external_declaration -> statement .)
    ICONST          reduce using rule 4 (external_declaration -> statement .)
    FCONST          reduce using rule 4 (external_declaration -> statement .)
    SCONST          reduce using rule 4 (external_declaration -> statement .)
    ENTER           reduce using rule 4 (external_declaration -> statement .)
    $end            reduce using rule 4 (external_declaration -> statement .)
    EQUALS          reduce using rule 4 (external_declaration -> statement .)
    LOR             reduce using rule 4 (external_declaration -> statement .)
    LAND            reduce using rule 4 (external_declaration -> statement .)
    EQ              reduce using rule 4 (external_declaration -> statement .)
    NE              reduce using rule 4 (external_declaration -> statement .)
    LT              reduce using rule 4 (external_declaration -> statement .)
    GT              reduce using rule 4 (external_declaration -> statement .)
    LE              reduce using rule 4 (external_declaration -> statement .)
    GE              reduce using rule 4 (external_declaration -> statement .)
    PLUS            reduce using rule 4 (external_declaration -> statement .)
    MINUS           reduce using rule 4 (external_declaration -> statement .)
    TIMES           reduce using rule 4 (external_declaration -> statement .)
    DIVIDE          reduce using rule 4 (external_declaration -> statement .)


state 20

    (43) logical_OR_expression -> logical_AND_expression .
    (46) logical_AND_expression -> logical_AND_expression . LAND equality_expression

    EQUALS          reduce using rule 43 (logical_OR_expression -> logical_AND_expression .)
    LOR             reduce using rule 43 (logical_OR_expression -> logical_AND_expression .)
    SEMI            reduce using rule 43 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 43 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 43 (logical_OR_expression -> logical_AND_expression .)
    LAND            shift and go to state 57


state 21

    (5) function_definition -> type . ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type . ID LPAREN parameter_list RPAREN LBRACE RBRACE
    (30) declaration_statement -> type . ID SEMI
    (31) declaration_statement -> type . ID EQUALS assignment_expression SEMI

    ID              shift and go to state 58


state 22

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . statement
    (5) function_definition -> . type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> . type ID LPAREN parameter_list RPAREN LBRACE RBRACE
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    external_declaration           shift and go to state 59
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 19
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 21
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    function_definition            shift and go to state 36
    declaration_statement          shift and go to state 41
    empty                          shift and go to state 42
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 23

    (26) iteration_statement -> REPEAT . LPAREN expression RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 60


state 24

    (66) primary_expression -> reserved .

    TIMES           reduce using rule 66 (primary_expression -> reserved .)
    DIVIDE          reduce using rule 66 (primary_expression -> reserved .)
    PLUS            reduce using rule 66 (primary_expression -> reserved .)
    MINUS           reduce using rule 66 (primary_expression -> reserved .)
    LT              reduce using rule 66 (primary_expression -> reserved .)
    GT              reduce using rule 66 (primary_expression -> reserved .)
    LE              reduce using rule 66 (primary_expression -> reserved .)
    GE              reduce using rule 66 (primary_expression -> reserved .)
    EQ              reduce using rule 66 (primary_expression -> reserved .)
    NE              reduce using rule 66 (primary_expression -> reserved .)
    LAND            reduce using rule 66 (primary_expression -> reserved .)
    EQUALS          reduce using rule 66 (primary_expression -> reserved .)
    LOR             reduce using rule 66 (primary_expression -> reserved .)
    SEMI            reduce using rule 66 (primary_expression -> reserved .)
    RPAREN          reduce using rule 66 (primary_expression -> reserved .)
    COMMA           reduce using rule 66 (primary_expression -> reserved .)


state 25

    (55) additive_expression -> multiplicative_expression .
    (59) multiplicative_expression -> multiplicative_expression . TIMES primary_expression
    (60) multiplicative_expression -> multiplicative_expression . DIVIDE primary_expression

    PLUS            reduce using rule 55 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 55 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 55 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 55 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 55 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 55 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 55 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 55 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 55 (additive_expression -> multiplicative_expression .)
    EQUALS          reduce using rule 55 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 55 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 55 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 55 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 55 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 61


state 26

    (32) compound_statement -> LBRACE . RBRACE
    (33) compound_statement -> LBRACE . statement_list RBRACE
    (61) statement_list -> . statement
    (62) statement_list -> . statement_list statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 65
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 63
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    statement_list                 shift and go to state 66
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 27

    (68) constant -> ICONST .

    TIMES           reduce using rule 68 (constant -> ICONST .)
    DIVIDE          reduce using rule 68 (constant -> ICONST .)
    PLUS            reduce using rule 68 (constant -> ICONST .)
    MINUS           reduce using rule 68 (constant -> ICONST .)
    LT              reduce using rule 68 (constant -> ICONST .)
    GT              reduce using rule 68 (constant -> ICONST .)
    LE              reduce using rule 68 (constant -> ICONST .)
    GE              reduce using rule 68 (constant -> ICONST .)
    EQ              reduce using rule 68 (constant -> ICONST .)
    NE              reduce using rule 68 (constant -> ICONST .)
    LAND            reduce using rule 68 (constant -> ICONST .)
    EQUALS          reduce using rule 68 (constant -> ICONST .)
    LOR             reduce using rule 68 (constant -> ICONST .)
    SEMI            reduce using rule 68 (constant -> ICONST .)
    RPAREN          reduce using rule 68 (constant -> ICONST .)
    COMMA           reduce using rule 68 (constant -> ICONST .)


state 28

    (58) multiplicative_expression -> primary_expression .

    TIMES           reduce using rule 58 (multiplicative_expression -> primary_expression .)
    DIVIDE          reduce using rule 58 (multiplicative_expression -> primary_expression .)
    PLUS            reduce using rule 58 (multiplicative_expression -> primary_expression .)
    MINUS           reduce using rule 58 (multiplicative_expression -> primary_expression .)
    LT              reduce using rule 58 (multiplicative_expression -> primary_expression .)
    GT              reduce using rule 58 (multiplicative_expression -> primary_expression .)
    LE              reduce using rule 58 (multiplicative_expression -> primary_expression .)
    GE              reduce using rule 58 (multiplicative_expression -> primary_expression .)
    EQ              reduce using rule 58 (multiplicative_expression -> primary_expression .)
    NE              reduce using rule 58 (multiplicative_expression -> primary_expression .)
    LAND            reduce using rule 58 (multiplicative_expression -> primary_expression .)
    EQUALS          reduce using rule 58 (multiplicative_expression -> primary_expression .)
    LOR             reduce using rule 58 (multiplicative_expression -> primary_expression .)
    SEMI            reduce using rule 58 (multiplicative_expression -> primary_expression .)
    RPAREN          reduce using rule 58 (multiplicative_expression -> primary_expression .)
    COMMA           reduce using rule 58 (multiplicative_expression -> primary_expression .)


state 29

    (37) expression -> LPAREN . expression RPAREN
    (63) primary_expression -> LPAREN . expression RPAREN
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 29
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    logical_OR_expression          shift and go to state 46
    additive_expression            shift and go to state 7
    empty                          shift and go to state 42
    relational_expression          shift and go to state 18
    reserved                       shift and go to state 24
    function_expression            shift and go to state 44
    expression                     shift and go to state 67
    logical_AND_expression         shift and go to state 20
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28

state 30

    (71) reserved -> ENTER .

    TIMES           reduce using rule 71 (reserved -> ENTER .)
    DIVIDE          reduce using rule 71 (reserved -> ENTER .)
    PLUS            reduce using rule 71 (reserved -> ENTER .)
    MINUS           reduce using rule 71 (reserved -> ENTER .)
    LT              reduce using rule 71 (reserved -> ENTER .)
    GT              reduce using rule 71 (reserved -> ENTER .)
    LE              reduce using rule 71 (reserved -> ENTER .)
    GE              reduce using rule 71 (reserved -> ENTER .)
    EQ              reduce using rule 71 (reserved -> ENTER .)
    NE              reduce using rule 71 (reserved -> ENTER .)
    LAND            reduce using rule 71 (reserved -> ENTER .)
    EQUALS          reduce using rule 71 (reserved -> ENTER .)
    LOR             reduce using rule 71 (reserved -> ENTER .)
    SEMI            reduce using rule 71 (reserved -> ENTER .)
    RPAREN          reduce using rule 71 (reserved -> ENTER .)
    COMMA           reduce using rule 71 (reserved -> ENTER .)


state 31

    (17) type -> BOOLEAN .

    ID              reduce using rule 17 (type -> BOOLEAN .)


state 32

    (39) assignment_expression -> ID . EQUALS assignment_expression
    (38) function_expression -> ID . LPAREN parameter_list RPAREN
    (65) primary_expression -> ID .

  ! shift/reduce conflict for EQUALS resolved as shift
    EQUALS          shift and go to state 68
    LPAREN          shift and go to state 69
    TIMES           reduce using rule 65 (primary_expression -> ID .)
    DIVIDE          reduce using rule 65 (primary_expression -> ID .)
    PLUS            reduce using rule 65 (primary_expression -> ID .)
    MINUS           reduce using rule 65 (primary_expression -> ID .)
    LT              reduce using rule 65 (primary_expression -> ID .)
    GT              reduce using rule 65 (primary_expression -> ID .)
    LE              reduce using rule 65 (primary_expression -> ID .)
    GE              reduce using rule 65 (primary_expression -> ID .)
    EQ              reduce using rule 65 (primary_expression -> ID .)
    NE              reduce using rule 65 (primary_expression -> ID .)
    LAND            reduce using rule 65 (primary_expression -> ID .)
    LOR             reduce using rule 65 (primary_expression -> ID .)
    SEMI            reduce using rule 65 (primary_expression -> ID .)
    RPAREN          reduce using rule 65 (primary_expression -> ID .)
    COMMA           reduce using rule 65 (primary_expression -> ID .)

  ! EQUALS          [ reduce using rule 65 (primary_expression -> ID .) ]


state 33

    (45) logical_AND_expression -> equality_expression .
    (48) equality_expression -> equality_expression . EQ relational_expression
    (49) equality_expression -> equality_expression . NE relational_expression

    LAND            reduce using rule 45 (logical_AND_expression -> equality_expression .)
    EQUALS          reduce using rule 45 (logical_AND_expression -> equality_expression .)
    LOR             reduce using rule 45 (logical_AND_expression -> equality_expression .)
    SEMI            reduce using rule 45 (logical_AND_expression -> equality_expression .)
    RPAREN          reduce using rule 45 (logical_AND_expression -> equality_expression .)
    COMMA           reduce using rule 45 (logical_AND_expression -> equality_expression .)
    EQ              shift and go to state 70
    NE              shift and go to state 71


state 34

    (28) selection_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LPAREN          shift and go to state 72


state 35

    (14) type -> CHAR .

    ID              reduce using rule 14 (type -> CHAR .)


state 36

    (3) external_declaration -> function_definition .

    INT             reduce using rule 3 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    STRING          reduce using rule 3 (external_declaration -> function_definition .)
    KEY             reduce using rule 3 (external_declaration -> function_definition .)
    BOOLEAN         reduce using rule 3 (external_declaration -> function_definition .)
    SEMI            reduce using rule 3 (external_declaration -> function_definition .)
    LBRACE          reduce using rule 3 (external_declaration -> function_definition .)
    IF              reduce using rule 3 (external_declaration -> function_definition .)
    REPEAT          reduce using rule 3 (external_declaration -> function_definition .)
    UNTIL           reduce using rule 3 (external_declaration -> function_definition .)
    RETURN          reduce using rule 3 (external_declaration -> function_definition .)
    BREAK           reduce using rule 3 (external_declaration -> function_definition .)
    CONTINUE        reduce using rule 3 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 3 (external_declaration -> function_definition .)
    ID              reduce using rule 3 (external_declaration -> function_definition .)
    ICONST          reduce using rule 3 (external_declaration -> function_definition .)
    FCONST          reduce using rule 3 (external_declaration -> function_definition .)
    SCONST          reduce using rule 3 (external_declaration -> function_definition .)
    ENTER           reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)
    EQUALS          reduce using rule 3 (external_declaration -> function_definition .)
    LOR             reduce using rule 3 (external_declaration -> function_definition .)
    LAND            reduce using rule 3 (external_declaration -> function_definition .)
    EQ              reduce using rule 3 (external_declaration -> function_definition .)
    NE              reduce using rule 3 (external_declaration -> function_definition .)
    LT              reduce using rule 3 (external_declaration -> function_definition .)
    GT              reduce using rule 3 (external_declaration -> function_definition .)
    LE              reduce using rule 3 (external_declaration -> function_definition .)
    GE              reduce using rule 3 (external_declaration -> function_definition .)
    PLUS            reduce using rule 3 (external_declaration -> function_definition .)
    MINUS           reduce using rule 3 (external_declaration -> function_definition .)
    TIMES           reduce using rule 3 (external_declaration -> function_definition .)
    DIVIDE          reduce using rule 3 (external_declaration -> function_definition .)


state 37

    (12) type -> INT .

    ID              reduce using rule 12 (type -> INT .)


state 38

    (13) type -> DOUBLE .

    ID              reduce using rule 13 (type -> DOUBLE .)


state 39

    (36) expression -> assignment_expression .

    SEMI            reduce using rule 36 (expression -> assignment_expression .)
    RPAREN          reduce using rule 36 (expression -> assignment_expression .)


state 40

    (74) break_statement -> BREAK . SEMI

    SEMI            shift and go to state 73


state 41

    (20) statement -> declaration_statement .

    RBRACE          reduce using rule 20 (statement -> declaration_statement .)
    SEMI            reduce using rule 20 (statement -> declaration_statement .)
    LBRACE          reduce using rule 20 (statement -> declaration_statement .)
    IF              reduce using rule 20 (statement -> declaration_statement .)
    REPEAT          reduce using rule 20 (statement -> declaration_statement .)
    UNTIL           reduce using rule 20 (statement -> declaration_statement .)
    RETURN          reduce using rule 20 (statement -> declaration_statement .)
    BREAK           reduce using rule 20 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 20 (statement -> declaration_statement .)
    LPAREN          reduce using rule 20 (statement -> declaration_statement .)
    INT             reduce using rule 20 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 20 (statement -> declaration_statement .)
    CHAR            reduce using rule 20 (statement -> declaration_statement .)
    STRING          reduce using rule 20 (statement -> declaration_statement .)
    KEY             reduce using rule 20 (statement -> declaration_statement .)
    BOOLEAN         reduce using rule 20 (statement -> declaration_statement .)
    ID              reduce using rule 20 (statement -> declaration_statement .)
    ICONST          reduce using rule 20 (statement -> declaration_statement .)
    FCONST          reduce using rule 20 (statement -> declaration_statement .)
    SCONST          reduce using rule 20 (statement -> declaration_statement .)
    ENTER           reduce using rule 20 (statement -> declaration_statement .)
    EQUALS          reduce using rule 20 (statement -> declaration_statement .)
    LOR             reduce using rule 20 (statement -> declaration_statement .)
    LAND            reduce using rule 20 (statement -> declaration_statement .)
    EQ              reduce using rule 20 (statement -> declaration_statement .)
    NE              reduce using rule 20 (statement -> declaration_statement .)
    LT              reduce using rule 20 (statement -> declaration_statement .)
    GT              reduce using rule 20 (statement -> declaration_statement .)
    LE              reduce using rule 20 (statement -> declaration_statement .)
    GE              reduce using rule 20 (statement -> declaration_statement .)
    PLUS            reduce using rule 20 (statement -> declaration_statement .)
    MINUS           reduce using rule 20 (statement -> declaration_statement .)
    TIMES           reduce using rule 20 (statement -> declaration_statement .)
    DIVIDE          reduce using rule 20 (statement -> declaration_statement .)
    $end            reduce using rule 20 (statement -> declaration_statement .)


state 42

    (67) primary_expression -> empty .

    TIMES           reduce using rule 67 (primary_expression -> empty .)
    DIVIDE          reduce using rule 67 (primary_expression -> empty .)
    PLUS            reduce using rule 67 (primary_expression -> empty .)
    MINUS           reduce using rule 67 (primary_expression -> empty .)
    LT              reduce using rule 67 (primary_expression -> empty .)
    GT              reduce using rule 67 (primary_expression -> empty .)
    LE              reduce using rule 67 (primary_expression -> empty .)
    GE              reduce using rule 67 (primary_expression -> empty .)
    EQ              reduce using rule 67 (primary_expression -> empty .)
    NE              reduce using rule 67 (primary_expression -> empty .)
    LAND            reduce using rule 67 (primary_expression -> empty .)
    EQUALS          reduce using rule 67 (primary_expression -> empty .)
    LOR             reduce using rule 67 (primary_expression -> empty .)
    SEMI            reduce using rule 67 (primary_expression -> empty .)
    RPAREN          reduce using rule 67 (primary_expression -> empty .)
    COMMA           reduce using rule 67 (primary_expression -> empty .)


state 43

    (16) type -> KEY .

    ID              reduce using rule 16 (type -> KEY .)


state 44

    (42) assignment_expression -> function_expression .

    RPAREN          reduce using rule 42 (assignment_expression -> function_expression .)
    SEMI            reduce using rule 42 (assignment_expression -> function_expression .)
    COMMA           reduce using rule 42 (assignment_expression -> function_expression .)


state 45

    (34) expression_statement -> expression . SEMI

    SEMI            shift and go to state 74


state 46

    (40) assignment_expression -> logical_OR_expression . EQUALS assignment_expression
    (41) assignment_expression -> logical_OR_expression .
    (44) logical_OR_expression -> logical_OR_expression . LOR logical_AND_expression

    EQUALS          shift and go to state 76
    RPAREN          reduce using rule 41 (assignment_expression -> logical_OR_expression .)
    SEMI            reduce using rule 41 (assignment_expression -> logical_OR_expression .)
    COMMA           reduce using rule 41 (assignment_expression -> logical_OR_expression .)
    LOR             shift and go to state 75


state 47

    (72) return_statement -> RETURN SEMI .

    RBRACE          reduce using rule 72 (return_statement -> RETURN SEMI .)
    SEMI            reduce using rule 72 (return_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 72 (return_statement -> RETURN SEMI .)
    IF              reduce using rule 72 (return_statement -> RETURN SEMI .)
    REPEAT          reduce using rule 72 (return_statement -> RETURN SEMI .)
    UNTIL           reduce using rule 72 (return_statement -> RETURN SEMI .)
    RETURN          reduce using rule 72 (return_statement -> RETURN SEMI .)
    BREAK           reduce using rule 72 (return_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 72 (return_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 72 (return_statement -> RETURN SEMI .)
    INT             reduce using rule 72 (return_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 72 (return_statement -> RETURN SEMI .)
    CHAR            reduce using rule 72 (return_statement -> RETURN SEMI .)
    STRING          reduce using rule 72 (return_statement -> RETURN SEMI .)
    KEY             reduce using rule 72 (return_statement -> RETURN SEMI .)
    BOOLEAN         reduce using rule 72 (return_statement -> RETURN SEMI .)
    ID              reduce using rule 72 (return_statement -> RETURN SEMI .)
    ICONST          reduce using rule 72 (return_statement -> RETURN SEMI .)
    FCONST          reduce using rule 72 (return_statement -> RETURN SEMI .)
    SCONST          reduce using rule 72 (return_statement -> RETURN SEMI .)
    ENTER           reduce using rule 72 (return_statement -> RETURN SEMI .)
    EQUALS          reduce using rule 72 (return_statement -> RETURN SEMI .)
    LOR             reduce using rule 72 (return_statement -> RETURN SEMI .)
    LAND            reduce using rule 72 (return_statement -> RETURN SEMI .)
    EQ              reduce using rule 72 (return_statement -> RETURN SEMI .)
    NE              reduce using rule 72 (return_statement -> RETURN SEMI .)
    LT              reduce using rule 72 (return_statement -> RETURN SEMI .)
    GT              reduce using rule 72 (return_statement -> RETURN SEMI .)
    LE              reduce using rule 72 (return_statement -> RETURN SEMI .)
    GE              reduce using rule 72 (return_statement -> RETURN SEMI .)
    PLUS            reduce using rule 72 (return_statement -> RETURN SEMI .)
    MINUS           reduce using rule 72 (return_statement -> RETURN SEMI .)
    TIMES           reduce using rule 72 (return_statement -> RETURN SEMI .)
    DIVIDE          reduce using rule 72 (return_statement -> RETURN SEMI .)
    $end            reduce using rule 72 (return_statement -> RETURN SEMI .)


state 48

    (73) return_statement -> RETURN expression . SEMI

    SEMI            shift and go to state 77


state 49

    (75) continue_statement -> CONTINUE SEMI .

    RBRACE          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    IF              reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    REPEAT          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    UNTIL           reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    INT             reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    STRING          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    KEY             reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    BOOLEAN         reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    ID              reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    ICONST          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    FCONST          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    SCONST          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    ENTER           reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    EQUALS          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    LOR             reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    LAND            reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    EQ              reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    NE              reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    LT              reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    GT              reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    LE              reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    GE              reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    DIVIDE          reduce using rule 75 (continue_statement -> CONTINUE SEMI .)
    $end            reduce using rule 75 (continue_statement -> CONTINUE SEMI .)


state 50

    (56) additive_expression -> additive_expression PLUS . multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    reserved                       shift and go to state 24
    multiplicative_expression      shift and go to state 78
    empty                          shift and go to state 42
    primary_expression             shift and go to state 28
    constant                       shift and go to state 5

state 51

    (57) additive_expression -> additive_expression MINUS . multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    reserved                       shift and go to state 24
    multiplicative_expression      shift and go to state 81
    empty                          shift and go to state 42
    primary_expression             shift and go to state 28
    constant                       shift and go to state 5

state 52

    (27) iteration_statement -> UNTIL LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 29
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    logical_OR_expression          shift and go to state 46
    additive_expression            shift and go to state 7
    empty                          shift and go to state 42
    relational_expression          shift and go to state 18
    reserved                       shift and go to state 24
    function_expression            shift and go to state 44
    expression                     shift and go to state 82
    logical_AND_expression         shift and go to state 20
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28

state 53

    (52) relational_expression -> relational_expression GT . additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 25
    empty                          shift and go to state 42
    reserved                       shift and go to state 24
    additive_expression            shift and go to state 83
    primary_expression             shift and go to state 28

state 54

    (54) relational_expression -> relational_expression GE . additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 25
    empty                          shift and go to state 42
    reserved                       shift and go to state 24
    additive_expression            shift and go to state 84
    primary_expression             shift and go to state 28

state 55

    (51) relational_expression -> relational_expression LT . additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 25
    empty                          shift and go to state 42
    reserved                       shift and go to state 24
    additive_expression            shift and go to state 85
    primary_expression             shift and go to state 28

state 56

    (53) relational_expression -> relational_expression LE . additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 25
    empty                          shift and go to state 42
    reserved                       shift and go to state 24
    additive_expression            shift and go to state 86
    primary_expression             shift and go to state 28

state 57

    (46) logical_AND_expression -> logical_AND_expression LAND . equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 25
    empty                          shift and go to state 42
    equality_expression            shift and go to state 87
    primary_expression             shift and go to state 28
    reserved                       shift and go to state 24
    additive_expression            shift and go to state 7
    relational_expression          shift and go to state 18

state 58

    (5) function_definition -> type ID . LPAREN parameter_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type ID . LPAREN parameter_list RPAREN LBRACE RBRACE
    (30) declaration_statement -> type ID . SEMI
    (31) declaration_statement -> type ID . EQUALS assignment_expression SEMI

    LPAREN          shift and go to state 90
    SEMI            shift and go to state 88
    EQUALS          shift and go to state 89


state 59

    (2) translation_unit -> translation_unit external_declaration .

    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRING          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    KEY             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BOOLEAN         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SEMI            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LBRACE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    IF              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REPEAT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNTIL           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    RETURN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BREAK           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONTINUE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ICONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FCONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SCONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENTER           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EQUALS          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LOR             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LAND            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EQ              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    NE              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LT              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    GT              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LE              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    GE              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    PLUS            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    MINUS           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DIVIDE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 60

    (26) iteration_statement -> REPEAT LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 29
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    logical_OR_expression          shift and go to state 46
    additive_expression            shift and go to state 7
    empty                          shift and go to state 42
    relational_expression          shift and go to state 18
    reserved                       shift and go to state 24
    function_expression            shift and go to state 44
    expression                     shift and go to state 91
    logical_AND_expression         shift and go to state 20
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28

state 61

    (60) multiplicative_expression -> multiplicative_expression DIVIDE . primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    reserved                       shift and go to state 24
    primary_expression             shift and go to state 92
    constant                       shift and go to state 5
    empty                          shift and go to state 42

state 62

    (59) multiplicative_expression -> multiplicative_expression TIMES . primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    reserved                       shift and go to state 24
    primary_expression             shift and go to state 93
    constant                       shift and go to state 5
    empty                          shift and go to state 42

state 63

    (61) statement_list -> statement .

    RBRACE          reduce using rule 61 (statement_list -> statement .)
    SEMI            reduce using rule 61 (statement_list -> statement .)
    LBRACE          reduce using rule 61 (statement_list -> statement .)
    IF              reduce using rule 61 (statement_list -> statement .)
    REPEAT          reduce using rule 61 (statement_list -> statement .)
    UNTIL           reduce using rule 61 (statement_list -> statement .)
    RETURN          reduce using rule 61 (statement_list -> statement .)
    BREAK           reduce using rule 61 (statement_list -> statement .)
    CONTINUE        reduce using rule 61 (statement_list -> statement .)
    LPAREN          reduce using rule 61 (statement_list -> statement .)
    INT             reduce using rule 61 (statement_list -> statement .)
    DOUBLE          reduce using rule 61 (statement_list -> statement .)
    CHAR            reduce using rule 61 (statement_list -> statement .)
    STRING          reduce using rule 61 (statement_list -> statement .)
    KEY             reduce using rule 61 (statement_list -> statement .)
    BOOLEAN         reduce using rule 61 (statement_list -> statement .)
    ID              reduce using rule 61 (statement_list -> statement .)
    ICONST          reduce using rule 61 (statement_list -> statement .)
    FCONST          reduce using rule 61 (statement_list -> statement .)
    SCONST          reduce using rule 61 (statement_list -> statement .)
    ENTER           reduce using rule 61 (statement_list -> statement .)
    EQUALS          reduce using rule 61 (statement_list -> statement .)
    LOR             reduce using rule 61 (statement_list -> statement .)
    LAND            reduce using rule 61 (statement_list -> statement .)
    EQ              reduce using rule 61 (statement_list -> statement .)
    NE              reduce using rule 61 (statement_list -> statement .)
    LT              reduce using rule 61 (statement_list -> statement .)
    GT              reduce using rule 61 (statement_list -> statement .)
    LE              reduce using rule 61 (statement_list -> statement .)
    GE              reduce using rule 61 (statement_list -> statement .)
    PLUS            reduce using rule 61 (statement_list -> statement .)
    MINUS           reduce using rule 61 (statement_list -> statement .)
    TIMES           reduce using rule 61 (statement_list -> statement .)
    DIVIDE          reduce using rule 61 (statement_list -> statement .)


state 64

    (30) declaration_statement -> type . ID SEMI
    (31) declaration_statement -> type . ID EQUALS assignment_expression SEMI

    ID              shift and go to state 94


state 65

    (32) compound_statement -> LBRACE RBRACE .

    RBRACE          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    REPEAT          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    UNTIL           reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    STRING          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    KEY             reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    ICONST          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    FCONST          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    SCONST          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    ENTER           reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    EQUALS          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    LOR             reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    LAND            reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    EQ              reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    NE              reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    LT              reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    GT              reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    LE              reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    GE              reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 32 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 32 (compound_statement -> LBRACE RBRACE .)


state 66

    (33) compound_statement -> LBRACE statement_list . RBRACE
    (62) statement_list -> statement_list . statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 96
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 95
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 67

    (37) expression -> LPAREN expression . RPAREN
    (63) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 97


state 68

    (39) assignment_expression -> ID EQUALS . assignment_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    ID              shift and go to state 32
    LPAREN          shift and go to state 79
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 98
    multiplicative_expression      shift and go to state 25
    logical_OR_expression          shift and go to state 46
    additive_expression            shift and go to state 7
    empty                          shift and go to state 42
    relational_expression          shift and go to state 18
    reserved                       shift and go to state 24
    function_expression            shift and go to state 44
    logical_AND_expression         shift and go to state 20
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28

state 69

    (38) function_expression -> ID LPAREN . parameter_list RPAREN
    (7) parameter_list -> . parameter_declaration
    (8) parameter_list -> . parameter_list COMMA parameter_declaration
    (9) parameter_declaration -> . primary_expression
    (10) parameter_declaration -> . type ID
    (11) parameter_declaration -> . type ID EQUALS assignment_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    parameter_list                 shift and go to state 102
    parameter_declaration          shift and go to state 100
    primary_expression             shift and go to state 101
    type                           shift and go to state 99
    reserved                       shift and go to state 24
    empty                          shift and go to state 42

state 70

    (48) equality_expression -> equality_expression EQ . relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 25
    empty                          shift and go to state 42
    relational_expression          shift and go to state 103
    reserved                       shift and go to state 24
    additive_expression            shift and go to state 7
    primary_expression             shift and go to state 28

state 71

    (49) equality_expression -> equality_expression NE . relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 25
    empty                          shift and go to state 42
    relational_expression          shift and go to state 104
    reserved                       shift and go to state 24
    additive_expression            shift and go to state 7
    primary_expression             shift and go to state 28

state 72

    (28) selection_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 29
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    logical_OR_expression          shift and go to state 46
    additive_expression            shift and go to state 7
    empty                          shift and go to state 42
    relational_expression          shift and go to state 18
    reserved                       shift and go to state 24
    function_expression            shift and go to state 44
    expression                     shift and go to state 105
    logical_AND_expression         shift and go to state 20
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28

state 73

    (74) break_statement -> BREAK SEMI .

    RBRACE          reduce using rule 74 (break_statement -> BREAK SEMI .)
    SEMI            reduce using rule 74 (break_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 74 (break_statement -> BREAK SEMI .)
    IF              reduce using rule 74 (break_statement -> BREAK SEMI .)
    REPEAT          reduce using rule 74 (break_statement -> BREAK SEMI .)
    UNTIL           reduce using rule 74 (break_statement -> BREAK SEMI .)
    RETURN          reduce using rule 74 (break_statement -> BREAK SEMI .)
    BREAK           reduce using rule 74 (break_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 74 (break_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 74 (break_statement -> BREAK SEMI .)
    INT             reduce using rule 74 (break_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 74 (break_statement -> BREAK SEMI .)
    CHAR            reduce using rule 74 (break_statement -> BREAK SEMI .)
    STRING          reduce using rule 74 (break_statement -> BREAK SEMI .)
    KEY             reduce using rule 74 (break_statement -> BREAK SEMI .)
    BOOLEAN         reduce using rule 74 (break_statement -> BREAK SEMI .)
    ID              reduce using rule 74 (break_statement -> BREAK SEMI .)
    ICONST          reduce using rule 74 (break_statement -> BREAK SEMI .)
    FCONST          reduce using rule 74 (break_statement -> BREAK SEMI .)
    SCONST          reduce using rule 74 (break_statement -> BREAK SEMI .)
    ENTER           reduce using rule 74 (break_statement -> BREAK SEMI .)
    EQUALS          reduce using rule 74 (break_statement -> BREAK SEMI .)
    LOR             reduce using rule 74 (break_statement -> BREAK SEMI .)
    LAND            reduce using rule 74 (break_statement -> BREAK SEMI .)
    EQ              reduce using rule 74 (break_statement -> BREAK SEMI .)
    NE              reduce using rule 74 (break_statement -> BREAK SEMI .)
    LT              reduce using rule 74 (break_statement -> BREAK SEMI .)
    GT              reduce using rule 74 (break_statement -> BREAK SEMI .)
    LE              reduce using rule 74 (break_statement -> BREAK SEMI .)
    GE              reduce using rule 74 (break_statement -> BREAK SEMI .)
    PLUS            reduce using rule 74 (break_statement -> BREAK SEMI .)
    MINUS           reduce using rule 74 (break_statement -> BREAK SEMI .)
    TIMES           reduce using rule 74 (break_statement -> BREAK SEMI .)
    DIVIDE          reduce using rule 74 (break_statement -> BREAK SEMI .)
    $end            reduce using rule 74 (break_statement -> BREAK SEMI .)


state 74

    (34) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 34 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 34 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 34 (expression_statement -> expression SEMI .)
    IF              reduce using rule 34 (expression_statement -> expression SEMI .)
    REPEAT          reduce using rule 34 (expression_statement -> expression SEMI .)
    UNTIL           reduce using rule 34 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 34 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 34 (expression_statement -> expression SEMI .)
    CONTINUE        reduce using rule 34 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 34 (expression_statement -> expression SEMI .)
    INT             reduce using rule 34 (expression_statement -> expression SEMI .)
    DOUBLE          reduce using rule 34 (expression_statement -> expression SEMI .)
    CHAR            reduce using rule 34 (expression_statement -> expression SEMI .)
    STRING          reduce using rule 34 (expression_statement -> expression SEMI .)
    KEY             reduce using rule 34 (expression_statement -> expression SEMI .)
    BOOLEAN         reduce using rule 34 (expression_statement -> expression SEMI .)
    ID              reduce using rule 34 (expression_statement -> expression SEMI .)
    ICONST          reduce using rule 34 (expression_statement -> expression SEMI .)
    FCONST          reduce using rule 34 (expression_statement -> expression SEMI .)
    SCONST          reduce using rule 34 (expression_statement -> expression SEMI .)
    ENTER           reduce using rule 34 (expression_statement -> expression SEMI .)
    EQUALS          reduce using rule 34 (expression_statement -> expression SEMI .)
    LOR             reduce using rule 34 (expression_statement -> expression SEMI .)
    LAND            reduce using rule 34 (expression_statement -> expression SEMI .)
    EQ              reduce using rule 34 (expression_statement -> expression SEMI .)
    NE              reduce using rule 34 (expression_statement -> expression SEMI .)
    LT              reduce using rule 34 (expression_statement -> expression SEMI .)
    GT              reduce using rule 34 (expression_statement -> expression SEMI .)
    LE              reduce using rule 34 (expression_statement -> expression SEMI .)
    GE              reduce using rule 34 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 34 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 34 (expression_statement -> expression SEMI .)
    TIMES           reduce using rule 34 (expression_statement -> expression SEMI .)
    DIVIDE          reduce using rule 34 (expression_statement -> expression SEMI .)
    $end            reduce using rule 34 (expression_statement -> expression SEMI .)


state 75

    (44) logical_OR_expression -> logical_OR_expression LOR . logical_AND_expression
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    multiplicative_expression      shift and go to state 25
    empty                          shift and go to state 42
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28
    reserved                       shift and go to state 24
    logical_AND_expression         shift and go to state 106
    additive_expression            shift and go to state 7
    relational_expression          shift and go to state 18

state 76

    (40) assignment_expression -> logical_OR_expression EQUALS . assignment_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    ID              shift and go to state 32
    LPAREN          shift and go to state 79
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 107
    multiplicative_expression      shift and go to state 25
    logical_OR_expression          shift and go to state 46
    additive_expression            shift and go to state 7
    empty                          shift and go to state 42
    relational_expression          shift and go to state 18
    reserved                       shift and go to state 24
    function_expression            shift and go to state 44
    logical_AND_expression         shift and go to state 20
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28

state 77

    (73) return_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    IF              reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    REPEAT          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    UNTIL           reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    INT             reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    KEY             reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    BOOLEAN         reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    ID              reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    ICONST          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    FCONST          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    SCONST          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    ENTER           reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    EQUALS          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    LOR             reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    LAND            reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    EQ              reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    NE              reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    LT              reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    GT              reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    LE              reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    GE              reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    DIVIDE          reduce using rule 73 (return_statement -> RETURN expression SEMI .)
    $end            reduce using rule 73 (return_statement -> RETURN expression SEMI .)


state 78

    (56) additive_expression -> additive_expression PLUS multiplicative_expression .
    (59) multiplicative_expression -> multiplicative_expression . TIMES primary_expression
    (60) multiplicative_expression -> multiplicative_expression . DIVIDE primary_expression

    PLUS            reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUALS          reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 61


state 79

    (63) primary_expression -> LPAREN . expression RPAREN
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 29
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    logical_OR_expression          shift and go to state 46
    additive_expression            shift and go to state 7
    empty                          shift and go to state 42
    relational_expression          shift and go to state 18
    reserved                       shift and go to state 24
    function_expression            shift and go to state 44
    expression                     shift and go to state 108
    logical_AND_expression         shift and go to state 20
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28

state 80

    (65) primary_expression -> ID .

    TIMES           reduce using rule 65 (primary_expression -> ID .)
    DIVIDE          reduce using rule 65 (primary_expression -> ID .)
    PLUS            reduce using rule 65 (primary_expression -> ID .)
    MINUS           reduce using rule 65 (primary_expression -> ID .)
    LT              reduce using rule 65 (primary_expression -> ID .)
    GT              reduce using rule 65 (primary_expression -> ID .)
    LE              reduce using rule 65 (primary_expression -> ID .)
    GE              reduce using rule 65 (primary_expression -> ID .)
    EQ              reduce using rule 65 (primary_expression -> ID .)
    NE              reduce using rule 65 (primary_expression -> ID .)
    LAND            reduce using rule 65 (primary_expression -> ID .)
    EQUALS          reduce using rule 65 (primary_expression -> ID .)
    LOR             reduce using rule 65 (primary_expression -> ID .)
    SEMI            reduce using rule 65 (primary_expression -> ID .)
    RPAREN          reduce using rule 65 (primary_expression -> ID .)
    COMMA           reduce using rule 65 (primary_expression -> ID .)


state 81

    (57) additive_expression -> additive_expression MINUS multiplicative_expression .
    (59) multiplicative_expression -> multiplicative_expression . TIMES primary_expression
    (60) multiplicative_expression -> multiplicative_expression . DIVIDE primary_expression

    PLUS            reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUALS          reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 62
    DIVIDE          shift and go to state 61


state 82

    (27) iteration_statement -> UNTIL LPAREN expression . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 109


state 83

    (52) relational_expression -> relational_expression GT additive_expression .
    (56) additive_expression -> additive_expression . PLUS multiplicative_expression
    (57) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    GT              reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    LE              reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    GE              reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    NE              reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    LAND            reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    EQUALS          reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    LOR             reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    SEMI            reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    RPAREN          reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    COMMA           reduce using rule 52 (relational_expression -> relational_expression GT additive_expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51


state 84

    (54) relational_expression -> relational_expression GE additive_expression .
    (56) additive_expression -> additive_expression . PLUS multiplicative_expression
    (57) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    GT              reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    GE              reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    EQ              reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    LAND            reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    EQUALS          reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    LOR             reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    SEMI            reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    RPAREN          reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    COMMA           reduce using rule 54 (relational_expression -> relational_expression GE additive_expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51


state 85

    (51) relational_expression -> relational_expression LT additive_expression .
    (56) additive_expression -> additive_expression . PLUS multiplicative_expression
    (57) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    GT              reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    LE              reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    GE              reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    NE              reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    LAND            reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    EQUALS          reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    LOR             reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    SEMI            reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    RPAREN          reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    COMMA           reduce using rule 51 (relational_expression -> relational_expression LT additive_expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51


state 86

    (53) relational_expression -> relational_expression LE additive_expression .
    (56) additive_expression -> additive_expression . PLUS multiplicative_expression
    (57) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    GT              reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    GE              reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    EQ              reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    LAND            reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    EQUALS          reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    LOR             reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    SEMI            reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    RPAREN          reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    COMMA           reduce using rule 53 (relational_expression -> relational_expression LE additive_expression .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51


state 87

    (46) logical_AND_expression -> logical_AND_expression LAND equality_expression .
    (48) equality_expression -> equality_expression . EQ relational_expression
    (49) equality_expression -> equality_expression . NE relational_expression

    LAND            reduce using rule 46 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    EQUALS          reduce using rule 46 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    LOR             reduce using rule 46 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    SEMI            reduce using rule 46 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    RPAREN          reduce using rule 46 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    COMMA           reduce using rule 46 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    EQ              shift and go to state 70
    NE              shift and go to state 71


state 88

    (30) declaration_statement -> type ID SEMI .

    RBRACE          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    SEMI            reduce using rule 30 (declaration_statement -> type ID SEMI .)
    LBRACE          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    IF              reduce using rule 30 (declaration_statement -> type ID SEMI .)
    REPEAT          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    UNTIL           reduce using rule 30 (declaration_statement -> type ID SEMI .)
    RETURN          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    BREAK           reduce using rule 30 (declaration_statement -> type ID SEMI .)
    CONTINUE        reduce using rule 30 (declaration_statement -> type ID SEMI .)
    LPAREN          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    INT             reduce using rule 30 (declaration_statement -> type ID SEMI .)
    DOUBLE          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    CHAR            reduce using rule 30 (declaration_statement -> type ID SEMI .)
    STRING          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    KEY             reduce using rule 30 (declaration_statement -> type ID SEMI .)
    BOOLEAN         reduce using rule 30 (declaration_statement -> type ID SEMI .)
    ID              reduce using rule 30 (declaration_statement -> type ID SEMI .)
    ICONST          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    FCONST          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    SCONST          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    ENTER           reduce using rule 30 (declaration_statement -> type ID SEMI .)
    EQUALS          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    LOR             reduce using rule 30 (declaration_statement -> type ID SEMI .)
    LAND            reduce using rule 30 (declaration_statement -> type ID SEMI .)
    EQ              reduce using rule 30 (declaration_statement -> type ID SEMI .)
    NE              reduce using rule 30 (declaration_statement -> type ID SEMI .)
    LT              reduce using rule 30 (declaration_statement -> type ID SEMI .)
    GT              reduce using rule 30 (declaration_statement -> type ID SEMI .)
    LE              reduce using rule 30 (declaration_statement -> type ID SEMI .)
    GE              reduce using rule 30 (declaration_statement -> type ID SEMI .)
    PLUS            reduce using rule 30 (declaration_statement -> type ID SEMI .)
    MINUS           reduce using rule 30 (declaration_statement -> type ID SEMI .)
    TIMES           reduce using rule 30 (declaration_statement -> type ID SEMI .)
    DIVIDE          reduce using rule 30 (declaration_statement -> type ID SEMI .)
    $end            reduce using rule 30 (declaration_statement -> type ID SEMI .)


state 89

    (31) declaration_statement -> type ID EQUALS . assignment_expression SEMI
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    ID              shift and go to state 32
    LPAREN          shift and go to state 79
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    SEMI            reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 110
    multiplicative_expression      shift and go to state 25
    logical_OR_expression          shift and go to state 46
    additive_expression            shift and go to state 7
    empty                          shift and go to state 42
    relational_expression          shift and go to state 18
    reserved                       shift and go to state 24
    function_expression            shift and go to state 44
    logical_AND_expression         shift and go to state 20
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28

state 90

    (5) function_definition -> type ID LPAREN . parameter_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type ID LPAREN . parameter_list RPAREN LBRACE RBRACE
    (7) parameter_list -> . parameter_declaration
    (8) parameter_list -> . parameter_list COMMA parameter_declaration
    (9) parameter_declaration -> . primary_expression
    (10) parameter_declaration -> . type ID
    (11) parameter_declaration -> . type ID EQUALS assignment_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    parameter_list                 shift and go to state 111
    parameter_declaration          shift and go to state 100
    primary_expression             shift and go to state 101
    reserved                       shift and go to state 24
    type                           shift and go to state 99
    empty                          shift and go to state 42

state 91

    (26) iteration_statement -> REPEAT LPAREN expression . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 112


state 92

    (60) multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .

    TIMES           reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    DIVIDE          reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    PLUS            reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    MINUS           reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LT              reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    GT              reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LE              reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    GE              reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    EQ              reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    NE              reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LAND            reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    EQUALS          reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LOR             reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    SEMI            reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    RPAREN          reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    COMMA           reduce using rule 60 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)


state 93

    (59) multiplicative_expression -> multiplicative_expression TIMES primary_expression .

    TIMES           reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    DIVIDE          reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    PLUS            reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    MINUS           reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LT              reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    GT              reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LE              reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    GE              reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    EQ              reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    NE              reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LAND            reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    EQUALS          reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LOR             reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    SEMI            reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    RPAREN          reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    COMMA           reduce using rule 59 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)


state 94

    (30) declaration_statement -> type ID . SEMI
    (31) declaration_statement -> type ID . EQUALS assignment_expression SEMI

    SEMI            shift and go to state 88
    EQUALS          shift and go to state 89


state 95

    (62) statement_list -> statement_list statement .

    RBRACE          reduce using rule 62 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 62 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 62 (statement_list -> statement_list statement .)
    IF              reduce using rule 62 (statement_list -> statement_list statement .)
    REPEAT          reduce using rule 62 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 62 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 62 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 62 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 62 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 62 (statement_list -> statement_list statement .)
    INT             reduce using rule 62 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 62 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 62 (statement_list -> statement_list statement .)
    STRING          reduce using rule 62 (statement_list -> statement_list statement .)
    KEY             reduce using rule 62 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 62 (statement_list -> statement_list statement .)
    ID              reduce using rule 62 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 62 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 62 (statement_list -> statement_list statement .)
    SCONST          reduce using rule 62 (statement_list -> statement_list statement .)
    ENTER           reduce using rule 62 (statement_list -> statement_list statement .)
    EQUALS          reduce using rule 62 (statement_list -> statement_list statement .)
    LOR             reduce using rule 62 (statement_list -> statement_list statement .)
    LAND            reduce using rule 62 (statement_list -> statement_list statement .)
    EQ              reduce using rule 62 (statement_list -> statement_list statement .)
    NE              reduce using rule 62 (statement_list -> statement_list statement .)
    LT              reduce using rule 62 (statement_list -> statement_list statement .)
    GT              reduce using rule 62 (statement_list -> statement_list statement .)
    LE              reduce using rule 62 (statement_list -> statement_list statement .)
    GE              reduce using rule 62 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 62 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 62 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 62 (statement_list -> statement_list statement .)
    DIVIDE          reduce using rule 62 (statement_list -> statement_list statement .)


state 96

    (33) compound_statement -> LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    KEY             reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    LOR             reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    LAND            reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    NE              reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 33 (compound_statement -> LBRACE statement_list RBRACE .)


state 97

    (37) expression -> LPAREN expression RPAREN .
    (63) primary_expression -> LPAREN expression RPAREN .

  ! reduce/reduce conflict for SEMI resolved using rule 37 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 37 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)

  ! SEMI            [ reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .) ]
  ! RPAREN          [ reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .) ]


state 98

    (39) assignment_expression -> ID EQUALS assignment_expression .

    RPAREN          reduce using rule 39 (assignment_expression -> ID EQUALS assignment_expression .)
    SEMI            reduce using rule 39 (assignment_expression -> ID EQUALS assignment_expression .)
    COMMA           reduce using rule 39 (assignment_expression -> ID EQUALS assignment_expression .)


state 99

    (10) parameter_declaration -> type . ID
    (11) parameter_declaration -> type . ID EQUALS assignment_expression

    ID              shift and go to state 113


state 100

    (7) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 7 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 7 (parameter_list -> parameter_declaration .)


state 101

    (9) parameter_declaration -> primary_expression .

    RPAREN          reduce using rule 9 (parameter_declaration -> primary_expression .)
    COMMA           reduce using rule 9 (parameter_declaration -> primary_expression .)


state 102

    (38) function_expression -> ID LPAREN parameter_list . RPAREN
    (8) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 114
    COMMA           shift and go to state 115


state 103

    (48) equality_expression -> equality_expression EQ relational_expression .
    (51) relational_expression -> relational_expression . LT additive_expression
    (52) relational_expression -> relational_expression . GT additive_expression
    (53) relational_expression -> relational_expression . LE additive_expression
    (54) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 48 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 48 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 48 (equality_expression -> equality_expression EQ relational_expression .)
    EQUALS          reduce using rule 48 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 48 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 48 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 48 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 48 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 55
    GT              shift and go to state 53
    LE              shift and go to state 56
    GE              shift and go to state 54


state 104

    (49) equality_expression -> equality_expression NE relational_expression .
    (51) relational_expression -> relational_expression . LT additive_expression
    (52) relational_expression -> relational_expression . GT additive_expression
    (53) relational_expression -> relational_expression . LE additive_expression
    (54) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 49 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 49 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 49 (equality_expression -> equality_expression NE relational_expression .)
    EQUALS          reduce using rule 49 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 49 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 49 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 49 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 49 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 55
    GT              shift and go to state 53
    LE              shift and go to state 56
    GE              shift and go to state 54


state 105

    (28) selection_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    RPAREN          shift and go to state 116


state 106

    (44) logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .
    (46) logical_AND_expression -> logical_AND_expression . LAND equality_expression

    EQUALS          reduce using rule 44 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    LOR             reduce using rule 44 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    SEMI            reduce using rule 44 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    RPAREN          reduce using rule 44 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    COMMA           reduce using rule 44 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    LAND            shift and go to state 57


state 107

    (40) assignment_expression -> logical_OR_expression EQUALS assignment_expression .

    RPAREN          reduce using rule 40 (assignment_expression -> logical_OR_expression EQUALS assignment_expression .)
    SEMI            reduce using rule 40 (assignment_expression -> logical_OR_expression EQUALS assignment_expression .)
    COMMA           reduce using rule 40 (assignment_expression -> logical_OR_expression EQUALS assignment_expression .)


state 108

    (63) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 117


state 109

    (27) iteration_statement -> UNTIL LPAREN expression RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 118


state 110

    (31) declaration_statement -> type ID EQUALS assignment_expression . SEMI

    SEMI            shift and go to state 119


state 111

    (5) function_definition -> type ID LPAREN parameter_list . RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type ID LPAREN parameter_list . RPAREN LBRACE RBRACE
    (8) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 120
    COMMA           shift and go to state 115


state 112

    (26) iteration_statement -> REPEAT LPAREN expression RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 121


state 113

    (10) parameter_declaration -> type ID .
    (11) parameter_declaration -> type ID . EQUALS assignment_expression

    RPAREN          reduce using rule 10 (parameter_declaration -> type ID .)
    COMMA           reduce using rule 10 (parameter_declaration -> type ID .)
    EQUALS          shift and go to state 122


state 114

    (38) function_expression -> ID LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 38 (function_expression -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 38 (function_expression -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 38 (function_expression -> ID LPAREN parameter_list RPAREN .)


state 115

    (8) parameter_list -> parameter_list COMMA . parameter_declaration
    (9) parameter_declaration -> . primary_expression
    (10) parameter_declaration -> . type ID
    (11) parameter_declaration -> . type ID EQUALS assignment_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    LPAREN          shift and go to state 79
    ID              shift and go to state 80
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    parameter_declaration          shift and go to state 123
    primary_expression             shift and go to state 101
    type                           shift and go to state 99
    reserved                       shift and go to state 24
    empty                          shift and go to state 42

state 116

    (28) selection_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE
    (29) selection_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LBRACE          shift and go to state 124


state 117

    (63) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 63 (primary_expression -> LPAREN expression RPAREN .)


state 118

    (27) iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (61) statement_list -> . statement
    (62) statement_list -> . statement_list statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 63
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    statement_list                 shift and go to state 125
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 119

    (31) declaration_statement -> type ID EQUALS assignment_expression SEMI .

    RBRACE          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    SEMI            reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LBRACE          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    IF              reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    REPEAT          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    UNTIL           reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    RETURN          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    BREAK           reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    CONTINUE        reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LPAREN          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    INT             reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    DOUBLE          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    CHAR            reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    STRING          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    KEY             reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    BOOLEAN         reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    ID              reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    ICONST          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    FCONST          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    SCONST          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    ENTER           reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    EQUALS          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LOR             reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LAND            reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    EQ              reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    NE              reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LT              reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    GT              reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LE              reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    GE              reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    PLUS            reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    MINUS           reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    TIMES           reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    DIVIDE          reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    $end            reduce using rule 31 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)


state 120

    (5) function_definition -> type ID LPAREN parameter_list RPAREN . LBRACE statement_list RBRACE
    (6) function_definition -> type ID LPAREN parameter_list RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 126


state 121

    (26) iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (61) statement_list -> . statement
    (62) statement_list -> . statement_list statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 63
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    statement_list                 shift and go to state 127
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 122

    (11) parameter_declaration -> type ID EQUALS . assignment_expression
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

    ID              shift and go to state 32
    LPAREN          shift and go to state 79
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)
    RPAREN          reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)

    constant                       shift and go to state 5
    assignment_expression          shift and go to state 128
    multiplicative_expression      shift and go to state 25
    logical_OR_expression          shift and go to state 46
    additive_expression            shift and go to state 7
    empty                          shift and go to state 42
    relational_expression          shift and go to state 18
    reserved                       shift and go to state 24
    function_expression            shift and go to state 44
    logical_AND_expression         shift and go to state 20
    equality_expression            shift and go to state 33
    primary_expression             shift and go to state 28

state 123

    (8) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 8 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 8 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 124

    (28) selection_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (61) statement_list -> . statement
    (62) statement_list -> . statement_list statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 63
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    statement_list                 shift and go to state 129
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 125

    (27) iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (62) statement_list -> statement_list . statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 130
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 95
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 126

    (5) function_definition -> type ID LPAREN parameter_list RPAREN LBRACE . statement_list RBRACE
    (6) function_definition -> type ID LPAREN parameter_list RPAREN LBRACE . RBRACE
    (61) statement_list -> . statement
    (62) statement_list -> . statement_list statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 131
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 63
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    statement_list                 shift and go to state 132
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 127

    (26) iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (62) statement_list -> statement_list . statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 133
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 95
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 128

    (11) parameter_declaration -> type ID EQUALS assignment_expression .

    RPAREN          reduce using rule 11 (parameter_declaration -> type ID EQUALS assignment_expression .)
    COMMA           reduce using rule 11 (parameter_declaration -> type ID EQUALS assignment_expression .)


state 129

    (28) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (62) statement_list -> statement_list . statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 134
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 95
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 130

    (27) iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    INT             reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 27 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)


state 131

    (6) function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .

    INT             reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    STRING          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    KEY             reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    BOOLEAN         reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    SEMI            reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    LBRACE          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    IF              reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    REPEAT          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    UNTIL           reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    ID              reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    ICONST          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    FCONST          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    SCONST          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    ENTER           reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    $end            reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    EQUALS          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    LOR             reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    LAND            reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    EQ              reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    NE              reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    LT              reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    GT              reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    LE              reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    GE              reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    PLUS            reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    MINUS           reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    TIMES           reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)
    DIVIDE          reduce using rule 6 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE RBRACE .)


state 132

    (5) function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list . RBRACE
    (62) statement_list -> statement_list . statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 135
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 95
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 133

    (26) iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    INT             reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 26 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)


state 134

    (28) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .
    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE

    RBRACE          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    INT             reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 28 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 136


state 135

    (5) function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .

    INT             reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 5 (function_definition -> type ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE .)


state 136

    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 137


state 137

    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (61) statement_list -> . statement
    (62) statement_list -> . statement_list statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 63
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    statement_list                 shift and go to state 138
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 138

    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (62) statement_list -> statement_list . statement
    (18) statement -> . expression_statement
    (19) statement -> . compound_statement
    (20) statement -> . declaration_statement
    (21) statement -> . selection_statement
    (22) statement -> . iteration_statement
    (23) statement -> . return_statement
    (24) statement -> . break_statement
    (25) statement -> . continue_statement
    (34) expression_statement -> . expression SEMI
    (35) expression_statement -> . SEMI
    (32) compound_statement -> . LBRACE RBRACE
    (33) compound_statement -> . LBRACE statement_list RBRACE
    (30) declaration_statement -> . type ID SEMI
    (31) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (28) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (26) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (27) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (72) return_statement -> . RETURN SEMI
    (73) return_statement -> . RETURN expression SEMI
    (74) break_statement -> . BREAK SEMI
    (75) continue_statement -> . CONTINUE SEMI
    (36) expression -> . assignment_expression
    (37) expression -> . LPAREN expression RPAREN
    (12) type -> . INT
    (13) type -> . DOUBLE
    (14) type -> . CHAR
    (15) type -> . STRING
    (16) type -> . KEY
    (17) type -> . BOOLEAN
    (39) assignment_expression -> . ID EQUALS assignment_expression
    (40) assignment_expression -> . logical_OR_expression EQUALS assignment_expression
    (41) assignment_expression -> . logical_OR_expression
    (42) assignment_expression -> . function_expression
    (43) logical_OR_expression -> . logical_AND_expression
    (44) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (38) function_expression -> . ID LPAREN parameter_list RPAREN
    (45) logical_AND_expression -> . equality_expression
    (46) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression EQ relational_expression
    (49) equality_expression -> . equality_expression NE relational_expression
    (50) relational_expression -> . additive_expression
    (51) relational_expression -> . relational_expression LT additive_expression
    (52) relational_expression -> . relational_expression GT additive_expression
    (53) relational_expression -> . relational_expression LE additive_expression
    (54) relational_expression -> . relational_expression GE additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (58) multiplicative_expression -> . primary_expression
    (59) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (60) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (63) primary_expression -> . LPAREN expression RPAREN
    (64) primary_expression -> . constant
    (65) primary_expression -> . ID
    (66) primary_expression -> . reserved
    (67) primary_expression -> . empty
    (68) constant -> . ICONST
    (69) constant -> . FCONST
    (70) constant -> . SCONST
    (71) reserved -> . ENTER
    (76) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 139
    SEMI            shift and go to state 11
    LBRACE          shift and go to state 26
    IF              shift and go to state 34
    REPEAT          shift and go to state 23
    UNTIL           shift and go to state 15
    RETURN          shift and go to state 2
    BREAK           shift and go to state 40
    CONTINUE        shift and go to state 4
    LPAREN          shift and go to state 29
    INT             shift and go to state 37
    DOUBLE          shift and go to state 38
    CHAR            shift and go to state 35
    STRING          shift and go to state 8
    KEY             shift and go to state 43
    BOOLEAN         shift and go to state 31
    ID              shift and go to state 32
    ICONST          shift and go to state 27
    FCONST          shift and go to state 10
    SCONST          shift and go to state 14
    ENTER           shift and go to state 30
    TIMES           reduce using rule 76 (empty -> .)
    DIVIDE          reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)
    MINUS           reduce using rule 76 (empty -> .)
    LT              reduce using rule 76 (empty -> .)
    GT              reduce using rule 76 (empty -> .)
    LE              reduce using rule 76 (empty -> .)
    GE              reduce using rule 76 (empty -> .)
    EQ              reduce using rule 76 (empty -> .)
    NE              reduce using rule 76 (empty -> .)
    LAND            reduce using rule 76 (empty -> .)
    EQUALS          reduce using rule 76 (empty -> .)
    LOR             reduce using rule 76 (empty -> .)

  ! SEMI            [ reduce using rule 76 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 5
    break_statement                shift and go to state 3
    reserved                       shift and go to state 24
    iteration_statement            shift and go to state 6
    additive_expression            shift and go to state 7
    compound_statement             shift and go to state 12
    selection_statement            shift and go to state 13
    return_statement               shift and go to state 16
    continue_statement             shift and go to state 17
    relational_expression          shift and go to state 18
    statement                      shift and go to state 95
    logical_AND_expression         shift and go to state 20
    type                           shift and go to state 64
    empty                          shift and go to state 42
    assignment_expression          shift and go to state 39
    multiplicative_expression      shift and go to state 25
    primary_expression             shift and go to state 28
    equality_expression            shift and go to state 33
    declaration_statement          shift and go to state 41
    function_expression            shift and go to state 44
    expression                     shift and go to state 45
    logical_OR_expression          shift and go to state 46

state 139

    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    INT             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    STRING          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    KEY             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LOR             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LAND            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    EQ              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    NE              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LT              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    GT              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LE              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    GE              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    $end            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMI in state 0 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 2 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 22 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 26 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 32 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 66 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 118 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 121 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 124 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 125 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 126 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 127 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 129 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 132 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 137 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 138 resolved as shift
WARNING: reduce/reduce conflict in state 97 resolved using rule (expression -> LPAREN expression RPAREN)
WARNING: rejected rule (primary_expression -> LPAREN expression RPAREN) in state 97
