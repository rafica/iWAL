Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    CONST
    DEFAULT
    VOID
    COLON
    CCONST
    AND
    TYPEID
    RBRACKET
    LBRACKET
    OR

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> statement
Rule 5     function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE
Rule 6     function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE
Rule 7     parameter_list -> expression
Rule 8     parameter_list -> parameter_list COMMA expression
Rule 9     parameter_declaration_list -> parameter_declaration
Rule 10    parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration
Rule 11    parameter_declaration -> type ID
Rule 12    parameter_declaration -> type ID EQUALS assignment_expression
Rule 13    type -> INT
Rule 14    type -> DOUBLE
Rule 15    type -> CHAR
Rule 16    type -> STRING
Rule 17    type -> KEY
Rule 18    type -> BOOLEAN
Rule 19    statement -> expression_statement
Rule 20    statement -> compound_statement
Rule 21    statement -> declaration_statement
Rule 22    statement -> selection_statement
Rule 23    statement -> iteration_statement
Rule 24    statement -> return_statement
Rule 25    statement -> break_statement
Rule 26    statement -> continue_statement
Rule 27    iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 28    iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 29    selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 30    selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
Rule 31    declaration_statement -> type ID SEMI
Rule 32    declaration_statement -> type ID EQUALS assignment_expression SEMI
Rule 33    more_declaration -> COMMA ID more_declaration
Rule 34    more_declaration -> COMMA ID EQUALS assignment_expression more_declaration
Rule 35    more_declaration -> empty
Rule 36    compound_statement -> LBRACE RBRACE
Rule 37    compound_statement -> LBRACE statement_list RBRACE
Rule 38    expression_statement -> expression SEMI
Rule 39    expression_statement -> SEMI
Rule 40    expression -> assignment_expression
Rule 41    expression -> LPAREN expression RPAREN
Rule 42    function_expression -> ID LPAREN parameter_list RPAREN
Rule 43    assignment_expression -> ID EQUALS assignment_expression
Rule 44    assignment_expression -> logical_NOT_expression EQUALS assignment_expression
Rule 45    assignment_expression -> logical_NOT_expression
Rule 46    assignment_expression -> function_expression
Rule 47    logical_NOT_expression -> logical_OR_expression
Rule 48    logical_NOT_expression -> LNOT logical_OR_expression
Rule 49    logical_OR_expression -> logical_AND_expression
Rule 50    logical_OR_expression -> logical_OR_expression LOR logical_AND_expression
Rule 51    logical_AND_expression -> equality_expression
Rule 52    logical_AND_expression -> logical_AND_expression LAND equality_expression
Rule 53    equality_expression -> relational_expression
Rule 54    equality_expression -> equality_expression EQ relational_expression
Rule 55    equality_expression -> equality_expression NE relational_expression
Rule 56    relational_expression -> additive_expression
Rule 57    relational_expression -> relational_expression LT additive_expression
Rule 58    relational_expression -> relational_expression GT additive_expression
Rule 59    relational_expression -> relational_expression LE additive_expression
Rule 60    relational_expression -> relational_expression GE additive_expression
Rule 61    additive_expression -> multiplicative_expression
Rule 62    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 63    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 64    multiplicative_expression -> primary_expression
Rule 65    multiplicative_expression -> multiplicative_expression TIMES primary_expression
Rule 66    multiplicative_expression -> multiplicative_expression DIVIDE primary_expression
Rule 67    statement_list -> statement
Rule 68    statement_list -> statement_list statement
Rule 69    primary_expression -> LPAREN expression RPAREN
Rule 70    primary_expression -> constant
Rule 71    primary_expression -> ID
Rule 72    primary_expression -> reserved
Rule 73    primary_expression -> empty
Rule 74    constant -> ICONST
Rule 75    constant -> FCONST
Rule 76    constant -> SCONST
Rule 77    constant -> MINUS ICONST
Rule 78    constant -> TRUE
Rule 79    constant -> FALSE
Rule 80    reserved -> ENTER
Rule 81    reserved -> SPACE
Rule 82    return_statement -> RETURN SEMI
Rule 83    return_statement -> RETURN expression SEMI
Rule 84    break_statement -> BREAK SEMI
Rule 85    continue_statement -> CONTINUE SEMI
Rule 86    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOLEAN              : 18
BREAK                : 84
CCONST               : 
CHAR                 : 15
COLON                : 
COMMA                : 8 10 33 34
CONST                : 
CONTINUE             : 85
DEFAULT              : 
DIVIDE               : 66
DOUBLE               : 14
ELSE                 : 30
ENTER                : 80
EQ                   : 54
EQUALS               : 12 32 34 43 44
FALSE                : 79
FCONST               : 75
GE                   : 60
GT                   : 58
ICONST               : 74 77
ID                   : 5 6 11 12 31 32 33 34 42 43 71
IF                   : 29 30
INT                  : 13
KEY                  : 17
LAND                 : 52
LBRACE               : 5 6 27 28 29 30 30 36 37
LBRACKET             : 
LE                   : 59
LNOT                 : 48
LOR                  : 50
LPAREN               : 5 6 27 28 29 30 41 42 69
LT                   : 57
MINUS                : 63 77
NE                   : 55
OR                   : 
PLUS                 : 62
RBRACE               : 5 6 27 28 29 30 30 36 37
RBRACKET             : 
REPEAT               : 27
RETURN               : 82 83
RPAREN               : 5 6 27 28 29 30 41 42 69
SCONST               : 76
SEMI                 : 31 32 38 39 82 83 84 85
SPACE                : 81
STRING               : 16
TIMES                : 65
TRUE                 : 78
TYPEID               : 
UNTIL                : 28
VOID                 : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 56 57 58 59 60 62 63
assignment_expression : 12 32 34 40 43 44
break_statement      : 25
compound_statement   : 20
constant             : 70
continue_statement   : 26
declaration_statement : 21
empty                : 35 73
equality_expression  : 51 52 54 55
expression           : 7 8 27 28 29 30 38 41 69 83
expression_statement : 19
external_declaration : 1 2
function_definition  : 3
function_expression  : 46
iteration_statement  : 23
logical_AND_expression : 49 50 52
logical_NOT_expression : 44 45
logical_OR_expression : 47 48 50
more_declaration     : 33 34
multiplicative_expression : 61 62 63 65 66
parameter_declaration : 9 10
parameter_declaration_list : 5 6 10
parameter_list       : 8 42
primary_expression   : 64 65 66
relational_expression : 53 54 55 57 58 59 60
reserved             : 72
return_statement     : 24
selection_statement  : 22
statement            : 4 67 68
statement_list       : 5 27 28 29 30 30 37 68
translation_unit     : 2 0
type                 : 5 6 11 12 31 32

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . statement
    (5) function_definition -> . type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> . type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    external_declaration           shift and go to state 12
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 23
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 25
    translation_unit               shift and go to state 26
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    function_definition            shift and go to state 41
    declaration_statement          shift and go to state 47
    empty                          shift and go to state 48
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 1

    (19) statement -> expression_statement .

    INT             reduce using rule 19 (statement -> expression_statement .)
    DOUBLE          reduce using rule 19 (statement -> expression_statement .)
    CHAR            reduce using rule 19 (statement -> expression_statement .)
    STRING          reduce using rule 19 (statement -> expression_statement .)
    KEY             reduce using rule 19 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 19 (statement -> expression_statement .)
    SEMI            reduce using rule 19 (statement -> expression_statement .)
    LBRACE          reduce using rule 19 (statement -> expression_statement .)
    IF              reduce using rule 19 (statement -> expression_statement .)
    REPEAT          reduce using rule 19 (statement -> expression_statement .)
    UNTIL           reduce using rule 19 (statement -> expression_statement .)
    RETURN          reduce using rule 19 (statement -> expression_statement .)
    BREAK           reduce using rule 19 (statement -> expression_statement .)
    CONTINUE        reduce using rule 19 (statement -> expression_statement .)
    LPAREN          reduce using rule 19 (statement -> expression_statement .)
    ID              reduce using rule 19 (statement -> expression_statement .)
    LNOT            reduce using rule 19 (statement -> expression_statement .)
    ICONST          reduce using rule 19 (statement -> expression_statement .)
    FCONST          reduce using rule 19 (statement -> expression_statement .)
    SCONST          reduce using rule 19 (statement -> expression_statement .)
    MINUS           reduce using rule 19 (statement -> expression_statement .)
    TRUE            reduce using rule 19 (statement -> expression_statement .)
    FALSE           reduce using rule 19 (statement -> expression_statement .)
    ENTER           reduce using rule 19 (statement -> expression_statement .)
    SPACE           reduce using rule 19 (statement -> expression_statement .)
    $end            reduce using rule 19 (statement -> expression_statement .)
    EQUALS          reduce using rule 19 (statement -> expression_statement .)
    LOR             reduce using rule 19 (statement -> expression_statement .)
    LAND            reduce using rule 19 (statement -> expression_statement .)
    EQ              reduce using rule 19 (statement -> expression_statement .)
    NE              reduce using rule 19 (statement -> expression_statement .)
    LT              reduce using rule 19 (statement -> expression_statement .)
    GT              reduce using rule 19 (statement -> expression_statement .)
    LE              reduce using rule 19 (statement -> expression_statement .)
    GE              reduce using rule 19 (statement -> expression_statement .)
    PLUS            reduce using rule 19 (statement -> expression_statement .)
    TIMES           reduce using rule 19 (statement -> expression_statement .)
    DIVIDE          reduce using rule 19 (statement -> expression_statement .)
    RBRACE          reduce using rule 19 (statement -> expression_statement .)


state 2

    (48) logical_NOT_expression -> LNOT . logical_OR_expression
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    multiplicative_expression      shift and go to state 30
    empty                          shift and go to state 48
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33
    reserved                       shift and go to state 29
    logical_AND_expression         shift and go to state 24
    logical_OR_expression          shift and go to state 55
    additive_expression            shift and go to state 10
    relational_expression          shift and go to state 22

state 3

    (82) return_statement -> RETURN . SEMI
    (83) return_statement -> RETURN . expression SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 56
    LPAREN          shift and go to state 34
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    empty                          shift and go to state 48
    additive_expression            shift and go to state 10
    logical_AND_expression         shift and go to state 24
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    expression                     shift and go to state 57
    logical_OR_expression          shift and go to state 52
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 4

    (44) assignment_expression -> logical_NOT_expression . EQUALS assignment_expression
    (45) assignment_expression -> logical_NOT_expression .

    EQUALS          shift and go to state 58
    SEMI            reduce using rule 45 (assignment_expression -> logical_NOT_expression .)
    RPAREN          reduce using rule 45 (assignment_expression -> logical_NOT_expression .)
    COMMA           reduce using rule 45 (assignment_expression -> logical_NOT_expression .)


state 5

    (25) statement -> break_statement .

    INT             reduce using rule 25 (statement -> break_statement .)
    DOUBLE          reduce using rule 25 (statement -> break_statement .)
    CHAR            reduce using rule 25 (statement -> break_statement .)
    STRING          reduce using rule 25 (statement -> break_statement .)
    KEY             reduce using rule 25 (statement -> break_statement .)
    BOOLEAN         reduce using rule 25 (statement -> break_statement .)
    SEMI            reduce using rule 25 (statement -> break_statement .)
    LBRACE          reduce using rule 25 (statement -> break_statement .)
    IF              reduce using rule 25 (statement -> break_statement .)
    REPEAT          reduce using rule 25 (statement -> break_statement .)
    UNTIL           reduce using rule 25 (statement -> break_statement .)
    RETURN          reduce using rule 25 (statement -> break_statement .)
    BREAK           reduce using rule 25 (statement -> break_statement .)
    CONTINUE        reduce using rule 25 (statement -> break_statement .)
    LPAREN          reduce using rule 25 (statement -> break_statement .)
    ID              reduce using rule 25 (statement -> break_statement .)
    LNOT            reduce using rule 25 (statement -> break_statement .)
    ICONST          reduce using rule 25 (statement -> break_statement .)
    FCONST          reduce using rule 25 (statement -> break_statement .)
    SCONST          reduce using rule 25 (statement -> break_statement .)
    MINUS           reduce using rule 25 (statement -> break_statement .)
    TRUE            reduce using rule 25 (statement -> break_statement .)
    FALSE           reduce using rule 25 (statement -> break_statement .)
    ENTER           reduce using rule 25 (statement -> break_statement .)
    SPACE           reduce using rule 25 (statement -> break_statement .)
    $end            reduce using rule 25 (statement -> break_statement .)
    EQUALS          reduce using rule 25 (statement -> break_statement .)
    LOR             reduce using rule 25 (statement -> break_statement .)
    LAND            reduce using rule 25 (statement -> break_statement .)
    EQ              reduce using rule 25 (statement -> break_statement .)
    NE              reduce using rule 25 (statement -> break_statement .)
    LT              reduce using rule 25 (statement -> break_statement .)
    GT              reduce using rule 25 (statement -> break_statement .)
    LE              reduce using rule 25 (statement -> break_statement .)
    GE              reduce using rule 25 (statement -> break_statement .)
    PLUS            reduce using rule 25 (statement -> break_statement .)
    TIMES           reduce using rule 25 (statement -> break_statement .)
    DIVIDE          reduce using rule 25 (statement -> break_statement .)
    RBRACE          reduce using rule 25 (statement -> break_statement .)


state 6

    (85) continue_statement -> CONTINUE . SEMI

    SEMI            shift and go to state 59


state 7

    (70) primary_expression -> constant .

    TIMES           reduce using rule 70 (primary_expression -> constant .)
    DIVIDE          reduce using rule 70 (primary_expression -> constant .)
    PLUS            reduce using rule 70 (primary_expression -> constant .)
    MINUS           reduce using rule 70 (primary_expression -> constant .)
    LT              reduce using rule 70 (primary_expression -> constant .)
    GT              reduce using rule 70 (primary_expression -> constant .)
    LE              reduce using rule 70 (primary_expression -> constant .)
    GE              reduce using rule 70 (primary_expression -> constant .)
    EQ              reduce using rule 70 (primary_expression -> constant .)
    NE              reduce using rule 70 (primary_expression -> constant .)
    LAND            reduce using rule 70 (primary_expression -> constant .)
    LOR             reduce using rule 70 (primary_expression -> constant .)
    EQUALS          reduce using rule 70 (primary_expression -> constant .)
    SEMI            reduce using rule 70 (primary_expression -> constant .)
    RPAREN          reduce using rule 70 (primary_expression -> constant .)
    COMMA           reduce using rule 70 (primary_expression -> constant .)


state 8

    (23) statement -> iteration_statement .

    INT             reduce using rule 23 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 23 (statement -> iteration_statement .)
    CHAR            reduce using rule 23 (statement -> iteration_statement .)
    STRING          reduce using rule 23 (statement -> iteration_statement .)
    KEY             reduce using rule 23 (statement -> iteration_statement .)
    BOOLEAN         reduce using rule 23 (statement -> iteration_statement .)
    SEMI            reduce using rule 23 (statement -> iteration_statement .)
    LBRACE          reduce using rule 23 (statement -> iteration_statement .)
    IF              reduce using rule 23 (statement -> iteration_statement .)
    REPEAT          reduce using rule 23 (statement -> iteration_statement .)
    UNTIL           reduce using rule 23 (statement -> iteration_statement .)
    RETURN          reduce using rule 23 (statement -> iteration_statement .)
    BREAK           reduce using rule 23 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 23 (statement -> iteration_statement .)
    LPAREN          reduce using rule 23 (statement -> iteration_statement .)
    ID              reduce using rule 23 (statement -> iteration_statement .)
    LNOT            reduce using rule 23 (statement -> iteration_statement .)
    ICONST          reduce using rule 23 (statement -> iteration_statement .)
    FCONST          reduce using rule 23 (statement -> iteration_statement .)
    SCONST          reduce using rule 23 (statement -> iteration_statement .)
    MINUS           reduce using rule 23 (statement -> iteration_statement .)
    TRUE            reduce using rule 23 (statement -> iteration_statement .)
    FALSE           reduce using rule 23 (statement -> iteration_statement .)
    ENTER           reduce using rule 23 (statement -> iteration_statement .)
    SPACE           reduce using rule 23 (statement -> iteration_statement .)
    $end            reduce using rule 23 (statement -> iteration_statement .)
    EQUALS          reduce using rule 23 (statement -> iteration_statement .)
    LOR             reduce using rule 23 (statement -> iteration_statement .)
    LAND            reduce using rule 23 (statement -> iteration_statement .)
    EQ              reduce using rule 23 (statement -> iteration_statement .)
    NE              reduce using rule 23 (statement -> iteration_statement .)
    LT              reduce using rule 23 (statement -> iteration_statement .)
    GT              reduce using rule 23 (statement -> iteration_statement .)
    LE              reduce using rule 23 (statement -> iteration_statement .)
    GE              reduce using rule 23 (statement -> iteration_statement .)
    PLUS            reduce using rule 23 (statement -> iteration_statement .)
    TIMES           reduce using rule 23 (statement -> iteration_statement .)
    DIVIDE          reduce using rule 23 (statement -> iteration_statement .)
    RBRACE          reduce using rule 23 (statement -> iteration_statement .)


state 9

    (77) constant -> MINUS . ICONST

    ICONST          shift and go to state 60


state 10

    (56) relational_expression -> additive_expression .
    (62) additive_expression -> additive_expression . PLUS multiplicative_expression
    (63) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 56 (relational_expression -> additive_expression .)
    GT              reduce using rule 56 (relational_expression -> additive_expression .)
    LE              reduce using rule 56 (relational_expression -> additive_expression .)
    GE              reduce using rule 56 (relational_expression -> additive_expression .)
    EQ              reduce using rule 56 (relational_expression -> additive_expression .)
    NE              reduce using rule 56 (relational_expression -> additive_expression .)
    LAND            reduce using rule 56 (relational_expression -> additive_expression .)
    LOR             reduce using rule 56 (relational_expression -> additive_expression .)
    EQUALS          reduce using rule 56 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 56 (relational_expression -> additive_expression .)
    SEMI            reduce using rule 56 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 56 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 11

    (16) type -> STRING .

    ID              reduce using rule 16 (type -> STRING .)


state 12

    (1) translation_unit -> external_declaration .

    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    STRING          reduce using rule 1 (translation_unit -> external_declaration .)
    KEY             reduce using rule 1 (translation_unit -> external_declaration .)
    BOOLEAN         reduce using rule 1 (translation_unit -> external_declaration .)
    SEMI            reduce using rule 1 (translation_unit -> external_declaration .)
    LBRACE          reduce using rule 1 (translation_unit -> external_declaration .)
    IF              reduce using rule 1 (translation_unit -> external_declaration .)
    REPEAT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNTIL           reduce using rule 1 (translation_unit -> external_declaration .)
    RETURN          reduce using rule 1 (translation_unit -> external_declaration .)
    BREAK           reduce using rule 1 (translation_unit -> external_declaration .)
    CONTINUE        reduce using rule 1 (translation_unit -> external_declaration .)
    LPAREN          reduce using rule 1 (translation_unit -> external_declaration .)
    ID              reduce using rule 1 (translation_unit -> external_declaration .)
    LNOT            reduce using rule 1 (translation_unit -> external_declaration .)
    ICONST          reduce using rule 1 (translation_unit -> external_declaration .)
    FCONST          reduce using rule 1 (translation_unit -> external_declaration .)
    SCONST          reduce using rule 1 (translation_unit -> external_declaration .)
    MINUS           reduce using rule 1 (translation_unit -> external_declaration .)
    TRUE            reduce using rule 1 (translation_unit -> external_declaration .)
    FALSE           reduce using rule 1 (translation_unit -> external_declaration .)
    ENTER           reduce using rule 1 (translation_unit -> external_declaration .)
    SPACE           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)
    EQUALS          reduce using rule 1 (translation_unit -> external_declaration .)
    LOR             reduce using rule 1 (translation_unit -> external_declaration .)
    LAND            reduce using rule 1 (translation_unit -> external_declaration .)
    EQ              reduce using rule 1 (translation_unit -> external_declaration .)
    NE              reduce using rule 1 (translation_unit -> external_declaration .)
    LT              reduce using rule 1 (translation_unit -> external_declaration .)
    GT              reduce using rule 1 (translation_unit -> external_declaration .)
    LE              reduce using rule 1 (translation_unit -> external_declaration .)
    GE              reduce using rule 1 (translation_unit -> external_declaration .)
    PLUS            reduce using rule 1 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 1 (translation_unit -> external_declaration .)
    DIVIDE          reduce using rule 1 (translation_unit -> external_declaration .)


state 13

    (75) constant -> FCONST .

    TIMES           reduce using rule 75 (constant -> FCONST .)
    DIVIDE          reduce using rule 75 (constant -> FCONST .)
    PLUS            reduce using rule 75 (constant -> FCONST .)
    MINUS           reduce using rule 75 (constant -> FCONST .)
    LT              reduce using rule 75 (constant -> FCONST .)
    GT              reduce using rule 75 (constant -> FCONST .)
    LE              reduce using rule 75 (constant -> FCONST .)
    GE              reduce using rule 75 (constant -> FCONST .)
    EQ              reduce using rule 75 (constant -> FCONST .)
    NE              reduce using rule 75 (constant -> FCONST .)
    LAND            reduce using rule 75 (constant -> FCONST .)
    LOR             reduce using rule 75 (constant -> FCONST .)
    EQUALS          reduce using rule 75 (constant -> FCONST .)
    SEMI            reduce using rule 75 (constant -> FCONST .)
    RPAREN          reduce using rule 75 (constant -> FCONST .)
    COMMA           reduce using rule 75 (constant -> FCONST .)


state 14

    (39) expression_statement -> SEMI .

    RBRACE          reduce using rule 39 (expression_statement -> SEMI .)
    SEMI            reduce using rule 39 (expression_statement -> SEMI .)
    LBRACE          reduce using rule 39 (expression_statement -> SEMI .)
    IF              reduce using rule 39 (expression_statement -> SEMI .)
    REPEAT          reduce using rule 39 (expression_statement -> SEMI .)
    UNTIL           reduce using rule 39 (expression_statement -> SEMI .)
    RETURN          reduce using rule 39 (expression_statement -> SEMI .)
    BREAK           reduce using rule 39 (expression_statement -> SEMI .)
    CONTINUE        reduce using rule 39 (expression_statement -> SEMI .)
    LPAREN          reduce using rule 39 (expression_statement -> SEMI .)
    INT             reduce using rule 39 (expression_statement -> SEMI .)
    DOUBLE          reduce using rule 39 (expression_statement -> SEMI .)
    CHAR            reduce using rule 39 (expression_statement -> SEMI .)
    STRING          reduce using rule 39 (expression_statement -> SEMI .)
    KEY             reduce using rule 39 (expression_statement -> SEMI .)
    BOOLEAN         reduce using rule 39 (expression_statement -> SEMI .)
    ID              reduce using rule 39 (expression_statement -> SEMI .)
    LNOT            reduce using rule 39 (expression_statement -> SEMI .)
    ICONST          reduce using rule 39 (expression_statement -> SEMI .)
    FCONST          reduce using rule 39 (expression_statement -> SEMI .)
    SCONST          reduce using rule 39 (expression_statement -> SEMI .)
    MINUS           reduce using rule 39 (expression_statement -> SEMI .)
    TRUE            reduce using rule 39 (expression_statement -> SEMI .)
    FALSE           reduce using rule 39 (expression_statement -> SEMI .)
    ENTER           reduce using rule 39 (expression_statement -> SEMI .)
    SPACE           reduce using rule 39 (expression_statement -> SEMI .)
    EQUALS          reduce using rule 39 (expression_statement -> SEMI .)
    LOR             reduce using rule 39 (expression_statement -> SEMI .)
    LAND            reduce using rule 39 (expression_statement -> SEMI .)
    EQ              reduce using rule 39 (expression_statement -> SEMI .)
    NE              reduce using rule 39 (expression_statement -> SEMI .)
    LT              reduce using rule 39 (expression_statement -> SEMI .)
    GT              reduce using rule 39 (expression_statement -> SEMI .)
    LE              reduce using rule 39 (expression_statement -> SEMI .)
    GE              reduce using rule 39 (expression_statement -> SEMI .)
    PLUS            reduce using rule 39 (expression_statement -> SEMI .)
    TIMES           reduce using rule 39 (expression_statement -> SEMI .)
    DIVIDE          reduce using rule 39 (expression_statement -> SEMI .)
    $end            reduce using rule 39 (expression_statement -> SEMI .)


state 15

    (20) statement -> compound_statement .

    INT             reduce using rule 20 (statement -> compound_statement .)
    DOUBLE          reduce using rule 20 (statement -> compound_statement .)
    CHAR            reduce using rule 20 (statement -> compound_statement .)
    STRING          reduce using rule 20 (statement -> compound_statement .)
    KEY             reduce using rule 20 (statement -> compound_statement .)
    BOOLEAN         reduce using rule 20 (statement -> compound_statement .)
    SEMI            reduce using rule 20 (statement -> compound_statement .)
    LBRACE          reduce using rule 20 (statement -> compound_statement .)
    IF              reduce using rule 20 (statement -> compound_statement .)
    REPEAT          reduce using rule 20 (statement -> compound_statement .)
    UNTIL           reduce using rule 20 (statement -> compound_statement .)
    RETURN          reduce using rule 20 (statement -> compound_statement .)
    BREAK           reduce using rule 20 (statement -> compound_statement .)
    CONTINUE        reduce using rule 20 (statement -> compound_statement .)
    LPAREN          reduce using rule 20 (statement -> compound_statement .)
    ID              reduce using rule 20 (statement -> compound_statement .)
    LNOT            reduce using rule 20 (statement -> compound_statement .)
    ICONST          reduce using rule 20 (statement -> compound_statement .)
    FCONST          reduce using rule 20 (statement -> compound_statement .)
    SCONST          reduce using rule 20 (statement -> compound_statement .)
    MINUS           reduce using rule 20 (statement -> compound_statement .)
    TRUE            reduce using rule 20 (statement -> compound_statement .)
    FALSE           reduce using rule 20 (statement -> compound_statement .)
    ENTER           reduce using rule 20 (statement -> compound_statement .)
    SPACE           reduce using rule 20 (statement -> compound_statement .)
    $end            reduce using rule 20 (statement -> compound_statement .)
    EQUALS          reduce using rule 20 (statement -> compound_statement .)
    LOR             reduce using rule 20 (statement -> compound_statement .)
    LAND            reduce using rule 20 (statement -> compound_statement .)
    EQ              reduce using rule 20 (statement -> compound_statement .)
    NE              reduce using rule 20 (statement -> compound_statement .)
    LT              reduce using rule 20 (statement -> compound_statement .)
    GT              reduce using rule 20 (statement -> compound_statement .)
    LE              reduce using rule 20 (statement -> compound_statement .)
    GE              reduce using rule 20 (statement -> compound_statement .)
    PLUS            reduce using rule 20 (statement -> compound_statement .)
    TIMES           reduce using rule 20 (statement -> compound_statement .)
    DIVIDE          reduce using rule 20 (statement -> compound_statement .)
    RBRACE          reduce using rule 20 (statement -> compound_statement .)


state 16

    (78) constant -> TRUE .

    TIMES           reduce using rule 78 (constant -> TRUE .)
    DIVIDE          reduce using rule 78 (constant -> TRUE .)
    PLUS            reduce using rule 78 (constant -> TRUE .)
    MINUS           reduce using rule 78 (constant -> TRUE .)
    LT              reduce using rule 78 (constant -> TRUE .)
    GT              reduce using rule 78 (constant -> TRUE .)
    LE              reduce using rule 78 (constant -> TRUE .)
    GE              reduce using rule 78 (constant -> TRUE .)
    EQ              reduce using rule 78 (constant -> TRUE .)
    NE              reduce using rule 78 (constant -> TRUE .)
    LAND            reduce using rule 78 (constant -> TRUE .)
    LOR             reduce using rule 78 (constant -> TRUE .)
    EQUALS          reduce using rule 78 (constant -> TRUE .)
    SEMI            reduce using rule 78 (constant -> TRUE .)
    RPAREN          reduce using rule 78 (constant -> TRUE .)
    COMMA           reduce using rule 78 (constant -> TRUE .)


state 17

    (22) statement -> selection_statement .

    INT             reduce using rule 22 (statement -> selection_statement .)
    DOUBLE          reduce using rule 22 (statement -> selection_statement .)
    CHAR            reduce using rule 22 (statement -> selection_statement .)
    STRING          reduce using rule 22 (statement -> selection_statement .)
    KEY             reduce using rule 22 (statement -> selection_statement .)
    BOOLEAN         reduce using rule 22 (statement -> selection_statement .)
    SEMI            reduce using rule 22 (statement -> selection_statement .)
    LBRACE          reduce using rule 22 (statement -> selection_statement .)
    IF              reduce using rule 22 (statement -> selection_statement .)
    REPEAT          reduce using rule 22 (statement -> selection_statement .)
    UNTIL           reduce using rule 22 (statement -> selection_statement .)
    RETURN          reduce using rule 22 (statement -> selection_statement .)
    BREAK           reduce using rule 22 (statement -> selection_statement .)
    CONTINUE        reduce using rule 22 (statement -> selection_statement .)
    LPAREN          reduce using rule 22 (statement -> selection_statement .)
    ID              reduce using rule 22 (statement -> selection_statement .)
    LNOT            reduce using rule 22 (statement -> selection_statement .)
    ICONST          reduce using rule 22 (statement -> selection_statement .)
    FCONST          reduce using rule 22 (statement -> selection_statement .)
    SCONST          reduce using rule 22 (statement -> selection_statement .)
    MINUS           reduce using rule 22 (statement -> selection_statement .)
    TRUE            reduce using rule 22 (statement -> selection_statement .)
    FALSE           reduce using rule 22 (statement -> selection_statement .)
    ENTER           reduce using rule 22 (statement -> selection_statement .)
    SPACE           reduce using rule 22 (statement -> selection_statement .)
    $end            reduce using rule 22 (statement -> selection_statement .)
    EQUALS          reduce using rule 22 (statement -> selection_statement .)
    LOR             reduce using rule 22 (statement -> selection_statement .)
    LAND            reduce using rule 22 (statement -> selection_statement .)
    EQ              reduce using rule 22 (statement -> selection_statement .)
    NE              reduce using rule 22 (statement -> selection_statement .)
    LT              reduce using rule 22 (statement -> selection_statement .)
    GT              reduce using rule 22 (statement -> selection_statement .)
    LE              reduce using rule 22 (statement -> selection_statement .)
    GE              reduce using rule 22 (statement -> selection_statement .)
    PLUS            reduce using rule 22 (statement -> selection_statement .)
    TIMES           reduce using rule 22 (statement -> selection_statement .)
    DIVIDE          reduce using rule 22 (statement -> selection_statement .)
    RBRACE          reduce using rule 22 (statement -> selection_statement .)


state 18

    (76) constant -> SCONST .

    TIMES           reduce using rule 76 (constant -> SCONST .)
    DIVIDE          reduce using rule 76 (constant -> SCONST .)
    PLUS            reduce using rule 76 (constant -> SCONST .)
    MINUS           reduce using rule 76 (constant -> SCONST .)
    LT              reduce using rule 76 (constant -> SCONST .)
    GT              reduce using rule 76 (constant -> SCONST .)
    LE              reduce using rule 76 (constant -> SCONST .)
    GE              reduce using rule 76 (constant -> SCONST .)
    EQ              reduce using rule 76 (constant -> SCONST .)
    NE              reduce using rule 76 (constant -> SCONST .)
    LAND            reduce using rule 76 (constant -> SCONST .)
    LOR             reduce using rule 76 (constant -> SCONST .)
    EQUALS          reduce using rule 76 (constant -> SCONST .)
    SEMI            reduce using rule 76 (constant -> SCONST .)
    RPAREN          reduce using rule 76 (constant -> SCONST .)
    COMMA           reduce using rule 76 (constant -> SCONST .)


state 19

    (28) iteration_statement -> UNTIL . LPAREN expression RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 63


state 20

    (24) statement -> return_statement .

    INT             reduce using rule 24 (statement -> return_statement .)
    DOUBLE          reduce using rule 24 (statement -> return_statement .)
    CHAR            reduce using rule 24 (statement -> return_statement .)
    STRING          reduce using rule 24 (statement -> return_statement .)
    KEY             reduce using rule 24 (statement -> return_statement .)
    BOOLEAN         reduce using rule 24 (statement -> return_statement .)
    SEMI            reduce using rule 24 (statement -> return_statement .)
    LBRACE          reduce using rule 24 (statement -> return_statement .)
    IF              reduce using rule 24 (statement -> return_statement .)
    REPEAT          reduce using rule 24 (statement -> return_statement .)
    UNTIL           reduce using rule 24 (statement -> return_statement .)
    RETURN          reduce using rule 24 (statement -> return_statement .)
    BREAK           reduce using rule 24 (statement -> return_statement .)
    CONTINUE        reduce using rule 24 (statement -> return_statement .)
    LPAREN          reduce using rule 24 (statement -> return_statement .)
    ID              reduce using rule 24 (statement -> return_statement .)
    LNOT            reduce using rule 24 (statement -> return_statement .)
    ICONST          reduce using rule 24 (statement -> return_statement .)
    FCONST          reduce using rule 24 (statement -> return_statement .)
    SCONST          reduce using rule 24 (statement -> return_statement .)
    MINUS           reduce using rule 24 (statement -> return_statement .)
    TRUE            reduce using rule 24 (statement -> return_statement .)
    FALSE           reduce using rule 24 (statement -> return_statement .)
    ENTER           reduce using rule 24 (statement -> return_statement .)
    SPACE           reduce using rule 24 (statement -> return_statement .)
    $end            reduce using rule 24 (statement -> return_statement .)
    EQUALS          reduce using rule 24 (statement -> return_statement .)
    LOR             reduce using rule 24 (statement -> return_statement .)
    LAND            reduce using rule 24 (statement -> return_statement .)
    EQ              reduce using rule 24 (statement -> return_statement .)
    NE              reduce using rule 24 (statement -> return_statement .)
    LT              reduce using rule 24 (statement -> return_statement .)
    GT              reduce using rule 24 (statement -> return_statement .)
    LE              reduce using rule 24 (statement -> return_statement .)
    GE              reduce using rule 24 (statement -> return_statement .)
    PLUS            reduce using rule 24 (statement -> return_statement .)
    TIMES           reduce using rule 24 (statement -> return_statement .)
    DIVIDE          reduce using rule 24 (statement -> return_statement .)
    RBRACE          reduce using rule 24 (statement -> return_statement .)


state 21

    (26) statement -> continue_statement .

    INT             reduce using rule 26 (statement -> continue_statement .)
    DOUBLE          reduce using rule 26 (statement -> continue_statement .)
    CHAR            reduce using rule 26 (statement -> continue_statement .)
    STRING          reduce using rule 26 (statement -> continue_statement .)
    KEY             reduce using rule 26 (statement -> continue_statement .)
    BOOLEAN         reduce using rule 26 (statement -> continue_statement .)
    SEMI            reduce using rule 26 (statement -> continue_statement .)
    LBRACE          reduce using rule 26 (statement -> continue_statement .)
    IF              reduce using rule 26 (statement -> continue_statement .)
    REPEAT          reduce using rule 26 (statement -> continue_statement .)
    UNTIL           reduce using rule 26 (statement -> continue_statement .)
    RETURN          reduce using rule 26 (statement -> continue_statement .)
    BREAK           reduce using rule 26 (statement -> continue_statement .)
    CONTINUE        reduce using rule 26 (statement -> continue_statement .)
    LPAREN          reduce using rule 26 (statement -> continue_statement .)
    ID              reduce using rule 26 (statement -> continue_statement .)
    LNOT            reduce using rule 26 (statement -> continue_statement .)
    ICONST          reduce using rule 26 (statement -> continue_statement .)
    FCONST          reduce using rule 26 (statement -> continue_statement .)
    SCONST          reduce using rule 26 (statement -> continue_statement .)
    MINUS           reduce using rule 26 (statement -> continue_statement .)
    TRUE            reduce using rule 26 (statement -> continue_statement .)
    FALSE           reduce using rule 26 (statement -> continue_statement .)
    ENTER           reduce using rule 26 (statement -> continue_statement .)
    SPACE           reduce using rule 26 (statement -> continue_statement .)
    $end            reduce using rule 26 (statement -> continue_statement .)
    EQUALS          reduce using rule 26 (statement -> continue_statement .)
    LOR             reduce using rule 26 (statement -> continue_statement .)
    LAND            reduce using rule 26 (statement -> continue_statement .)
    EQ              reduce using rule 26 (statement -> continue_statement .)
    NE              reduce using rule 26 (statement -> continue_statement .)
    LT              reduce using rule 26 (statement -> continue_statement .)
    GT              reduce using rule 26 (statement -> continue_statement .)
    LE              reduce using rule 26 (statement -> continue_statement .)
    GE              reduce using rule 26 (statement -> continue_statement .)
    PLUS            reduce using rule 26 (statement -> continue_statement .)
    TIMES           reduce using rule 26 (statement -> continue_statement .)
    DIVIDE          reduce using rule 26 (statement -> continue_statement .)
    RBRACE          reduce using rule 26 (statement -> continue_statement .)


state 22

    (53) equality_expression -> relational_expression .
    (57) relational_expression -> relational_expression . LT additive_expression
    (58) relational_expression -> relational_expression . GT additive_expression
    (59) relational_expression -> relational_expression . LE additive_expression
    (60) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 53 (equality_expression -> relational_expression .)
    NE              reduce using rule 53 (equality_expression -> relational_expression .)
    LAND            reduce using rule 53 (equality_expression -> relational_expression .)
    LOR             reduce using rule 53 (equality_expression -> relational_expression .)
    EQUALS          reduce using rule 53 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 53 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 53 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 53 (equality_expression -> relational_expression .)
    LT              shift and go to state 66
    GT              shift and go to state 64
    LE              shift and go to state 67
    GE              shift and go to state 65


state 23

    (4) external_declaration -> statement .

    INT             reduce using rule 4 (external_declaration -> statement .)
    DOUBLE          reduce using rule 4 (external_declaration -> statement .)
    CHAR            reduce using rule 4 (external_declaration -> statement .)
    STRING          reduce using rule 4 (external_declaration -> statement .)
    KEY             reduce using rule 4 (external_declaration -> statement .)
    BOOLEAN         reduce using rule 4 (external_declaration -> statement .)
    SEMI            reduce using rule 4 (external_declaration -> statement .)
    LBRACE          reduce using rule 4 (external_declaration -> statement .)
    IF              reduce using rule 4 (external_declaration -> statement .)
    REPEAT          reduce using rule 4 (external_declaration -> statement .)
    UNTIL           reduce using rule 4 (external_declaration -> statement .)
    RETURN          reduce using rule 4 (external_declaration -> statement .)
    BREAK           reduce using rule 4 (external_declaration -> statement .)
    CONTINUE        reduce using rule 4 (external_declaration -> statement .)
    LPAREN          reduce using rule 4 (external_declaration -> statement .)
    ID              reduce using rule 4 (external_declaration -> statement .)
    LNOT            reduce using rule 4 (external_declaration -> statement .)
    ICONST          reduce using rule 4 (external_declaration -> statement .)
    FCONST          reduce using rule 4 (external_declaration -> statement .)
    SCONST          reduce using rule 4 (external_declaration -> statement .)
    MINUS           reduce using rule 4 (external_declaration -> statement .)
    TRUE            reduce using rule 4 (external_declaration -> statement .)
    FALSE           reduce using rule 4 (external_declaration -> statement .)
    ENTER           reduce using rule 4 (external_declaration -> statement .)
    SPACE           reduce using rule 4 (external_declaration -> statement .)
    $end            reduce using rule 4 (external_declaration -> statement .)
    EQUALS          reduce using rule 4 (external_declaration -> statement .)
    LOR             reduce using rule 4 (external_declaration -> statement .)
    LAND            reduce using rule 4 (external_declaration -> statement .)
    EQ              reduce using rule 4 (external_declaration -> statement .)
    NE              reduce using rule 4 (external_declaration -> statement .)
    LT              reduce using rule 4 (external_declaration -> statement .)
    GT              reduce using rule 4 (external_declaration -> statement .)
    LE              reduce using rule 4 (external_declaration -> statement .)
    GE              reduce using rule 4 (external_declaration -> statement .)
    PLUS            reduce using rule 4 (external_declaration -> statement .)
    TIMES           reduce using rule 4 (external_declaration -> statement .)
    DIVIDE          reduce using rule 4 (external_declaration -> statement .)


state 24

    (49) logical_OR_expression -> logical_AND_expression .
    (52) logical_AND_expression -> logical_AND_expression . LAND equality_expression

    LOR             reduce using rule 49 (logical_OR_expression -> logical_AND_expression .)
    EQUALS          reduce using rule 49 (logical_OR_expression -> logical_AND_expression .)
    RPAREN          reduce using rule 49 (logical_OR_expression -> logical_AND_expression .)
    SEMI            reduce using rule 49 (logical_OR_expression -> logical_AND_expression .)
    COMMA           reduce using rule 49 (logical_OR_expression -> logical_AND_expression .)
    LAND            shift and go to state 68


state 25

    (5) function_definition -> type . ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type . ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE
    (31) declaration_statement -> type . ID SEMI
    (32) declaration_statement -> type . ID EQUALS assignment_expression SEMI

    ID              shift and go to state 69


state 26

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . statement
    (5) function_definition -> . type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> . type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    external_declaration           shift and go to state 70
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 23
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 25
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    function_definition            shift and go to state 41
    declaration_statement          shift and go to state 47
    empty                          shift and go to state 48
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 27

    (27) iteration_statement -> REPEAT . LPAREN expression RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 71


state 28

    (81) reserved -> SPACE .

    TIMES           reduce using rule 81 (reserved -> SPACE .)
    DIVIDE          reduce using rule 81 (reserved -> SPACE .)
    PLUS            reduce using rule 81 (reserved -> SPACE .)
    MINUS           reduce using rule 81 (reserved -> SPACE .)
    LT              reduce using rule 81 (reserved -> SPACE .)
    GT              reduce using rule 81 (reserved -> SPACE .)
    LE              reduce using rule 81 (reserved -> SPACE .)
    GE              reduce using rule 81 (reserved -> SPACE .)
    EQ              reduce using rule 81 (reserved -> SPACE .)
    NE              reduce using rule 81 (reserved -> SPACE .)
    LAND            reduce using rule 81 (reserved -> SPACE .)
    LOR             reduce using rule 81 (reserved -> SPACE .)
    EQUALS          reduce using rule 81 (reserved -> SPACE .)
    SEMI            reduce using rule 81 (reserved -> SPACE .)
    RPAREN          reduce using rule 81 (reserved -> SPACE .)
    COMMA           reduce using rule 81 (reserved -> SPACE .)


state 29

    (72) primary_expression -> reserved .

    TIMES           reduce using rule 72 (primary_expression -> reserved .)
    DIVIDE          reduce using rule 72 (primary_expression -> reserved .)
    PLUS            reduce using rule 72 (primary_expression -> reserved .)
    MINUS           reduce using rule 72 (primary_expression -> reserved .)
    LT              reduce using rule 72 (primary_expression -> reserved .)
    GT              reduce using rule 72 (primary_expression -> reserved .)
    LE              reduce using rule 72 (primary_expression -> reserved .)
    GE              reduce using rule 72 (primary_expression -> reserved .)
    EQ              reduce using rule 72 (primary_expression -> reserved .)
    NE              reduce using rule 72 (primary_expression -> reserved .)
    LAND            reduce using rule 72 (primary_expression -> reserved .)
    LOR             reduce using rule 72 (primary_expression -> reserved .)
    EQUALS          reduce using rule 72 (primary_expression -> reserved .)
    SEMI            reduce using rule 72 (primary_expression -> reserved .)
    RPAREN          reduce using rule 72 (primary_expression -> reserved .)
    COMMA           reduce using rule 72 (primary_expression -> reserved .)


state 30

    (61) additive_expression -> multiplicative_expression .
    (65) multiplicative_expression -> multiplicative_expression . TIMES primary_expression
    (66) multiplicative_expression -> multiplicative_expression . DIVIDE primary_expression

    PLUS            reduce using rule 61 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 61 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 61 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 61 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 61 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 61 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 61 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 61 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 61 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 61 (additive_expression -> multiplicative_expression .)
    EQUALS          reduce using rule 61 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 61 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 61 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 72


state 31

    (36) compound_statement -> LBRACE . RBRACE
    (37) compound_statement -> LBRACE . statement_list RBRACE
    (67) statement_list -> . statement
    (68) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 76
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 74
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    statement_list                 shift and go to state 77
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 32

    (74) constant -> ICONST .

    TIMES           reduce using rule 74 (constant -> ICONST .)
    DIVIDE          reduce using rule 74 (constant -> ICONST .)
    PLUS            reduce using rule 74 (constant -> ICONST .)
    MINUS           reduce using rule 74 (constant -> ICONST .)
    LT              reduce using rule 74 (constant -> ICONST .)
    GT              reduce using rule 74 (constant -> ICONST .)
    LE              reduce using rule 74 (constant -> ICONST .)
    GE              reduce using rule 74 (constant -> ICONST .)
    EQ              reduce using rule 74 (constant -> ICONST .)
    NE              reduce using rule 74 (constant -> ICONST .)
    LAND            reduce using rule 74 (constant -> ICONST .)
    LOR             reduce using rule 74 (constant -> ICONST .)
    EQUALS          reduce using rule 74 (constant -> ICONST .)
    SEMI            reduce using rule 74 (constant -> ICONST .)
    RPAREN          reduce using rule 74 (constant -> ICONST .)
    COMMA           reduce using rule 74 (constant -> ICONST .)


state 33

    (64) multiplicative_expression -> primary_expression .

    TIMES           reduce using rule 64 (multiplicative_expression -> primary_expression .)
    DIVIDE          reduce using rule 64 (multiplicative_expression -> primary_expression .)
    PLUS            reduce using rule 64 (multiplicative_expression -> primary_expression .)
    MINUS           reduce using rule 64 (multiplicative_expression -> primary_expression .)
    LT              reduce using rule 64 (multiplicative_expression -> primary_expression .)
    GT              reduce using rule 64 (multiplicative_expression -> primary_expression .)
    LE              reduce using rule 64 (multiplicative_expression -> primary_expression .)
    GE              reduce using rule 64 (multiplicative_expression -> primary_expression .)
    EQ              reduce using rule 64 (multiplicative_expression -> primary_expression .)
    NE              reduce using rule 64 (multiplicative_expression -> primary_expression .)
    LAND            reduce using rule 64 (multiplicative_expression -> primary_expression .)
    LOR             reduce using rule 64 (multiplicative_expression -> primary_expression .)
    EQUALS          reduce using rule 64 (multiplicative_expression -> primary_expression .)
    SEMI            reduce using rule 64 (multiplicative_expression -> primary_expression .)
    RPAREN          reduce using rule 64 (multiplicative_expression -> primary_expression .)
    COMMA           reduce using rule 64 (multiplicative_expression -> primary_expression .)


state 34

    (41) expression -> LPAREN . expression RPAREN
    (69) primary_expression -> LPAREN . expression RPAREN
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 34
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    empty                          shift and go to state 48
    additive_expression            shift and go to state 10
    logical_AND_expression         shift and go to state 24
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    expression                     shift and go to state 78
    logical_OR_expression          shift and go to state 52
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 35

    (80) reserved -> ENTER .

    TIMES           reduce using rule 80 (reserved -> ENTER .)
    DIVIDE          reduce using rule 80 (reserved -> ENTER .)
    PLUS            reduce using rule 80 (reserved -> ENTER .)
    MINUS           reduce using rule 80 (reserved -> ENTER .)
    LT              reduce using rule 80 (reserved -> ENTER .)
    GT              reduce using rule 80 (reserved -> ENTER .)
    LE              reduce using rule 80 (reserved -> ENTER .)
    GE              reduce using rule 80 (reserved -> ENTER .)
    EQ              reduce using rule 80 (reserved -> ENTER .)
    NE              reduce using rule 80 (reserved -> ENTER .)
    LAND            reduce using rule 80 (reserved -> ENTER .)
    LOR             reduce using rule 80 (reserved -> ENTER .)
    EQUALS          reduce using rule 80 (reserved -> ENTER .)
    SEMI            reduce using rule 80 (reserved -> ENTER .)
    RPAREN          reduce using rule 80 (reserved -> ENTER .)
    COMMA           reduce using rule 80 (reserved -> ENTER .)


state 36

    (18) type -> BOOLEAN .

    ID              reduce using rule 18 (type -> BOOLEAN .)


state 37

    (43) assignment_expression -> ID . EQUALS assignment_expression
    (42) function_expression -> ID . LPAREN parameter_list RPAREN
    (71) primary_expression -> ID .

  ! shift/reduce conflict for EQUALS resolved as shift
    EQUALS          shift and go to state 79
    LPAREN          shift and go to state 80
    TIMES           reduce using rule 71 (primary_expression -> ID .)
    DIVIDE          reduce using rule 71 (primary_expression -> ID .)
    PLUS            reduce using rule 71 (primary_expression -> ID .)
    MINUS           reduce using rule 71 (primary_expression -> ID .)
    LT              reduce using rule 71 (primary_expression -> ID .)
    GT              reduce using rule 71 (primary_expression -> ID .)
    LE              reduce using rule 71 (primary_expression -> ID .)
    GE              reduce using rule 71 (primary_expression -> ID .)
    EQ              reduce using rule 71 (primary_expression -> ID .)
    NE              reduce using rule 71 (primary_expression -> ID .)
    LAND            reduce using rule 71 (primary_expression -> ID .)
    LOR             reduce using rule 71 (primary_expression -> ID .)
    SEMI            reduce using rule 71 (primary_expression -> ID .)
    RPAREN          reduce using rule 71 (primary_expression -> ID .)
    COMMA           reduce using rule 71 (primary_expression -> ID .)

  ! EQUALS          [ reduce using rule 71 (primary_expression -> ID .) ]


state 38

    (51) logical_AND_expression -> equality_expression .
    (54) equality_expression -> equality_expression . EQ relational_expression
    (55) equality_expression -> equality_expression . NE relational_expression

    LAND            reduce using rule 51 (logical_AND_expression -> equality_expression .)
    LOR             reduce using rule 51 (logical_AND_expression -> equality_expression .)
    EQUALS          reduce using rule 51 (logical_AND_expression -> equality_expression .)
    SEMI            reduce using rule 51 (logical_AND_expression -> equality_expression .)
    RPAREN          reduce using rule 51 (logical_AND_expression -> equality_expression .)
    COMMA           reduce using rule 51 (logical_AND_expression -> equality_expression .)
    EQ              shift and go to state 81
    NE              shift and go to state 82


state 39

    (29) selection_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LPAREN          shift and go to state 83


state 40

    (15) type -> CHAR .

    ID              reduce using rule 15 (type -> CHAR .)


state 41

    (3) external_declaration -> function_definition .

    INT             reduce using rule 3 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    STRING          reduce using rule 3 (external_declaration -> function_definition .)
    KEY             reduce using rule 3 (external_declaration -> function_definition .)
    BOOLEAN         reduce using rule 3 (external_declaration -> function_definition .)
    SEMI            reduce using rule 3 (external_declaration -> function_definition .)
    LBRACE          reduce using rule 3 (external_declaration -> function_definition .)
    IF              reduce using rule 3 (external_declaration -> function_definition .)
    REPEAT          reduce using rule 3 (external_declaration -> function_definition .)
    UNTIL           reduce using rule 3 (external_declaration -> function_definition .)
    RETURN          reduce using rule 3 (external_declaration -> function_definition .)
    BREAK           reduce using rule 3 (external_declaration -> function_definition .)
    CONTINUE        reduce using rule 3 (external_declaration -> function_definition .)
    LPAREN          reduce using rule 3 (external_declaration -> function_definition .)
    ID              reduce using rule 3 (external_declaration -> function_definition .)
    LNOT            reduce using rule 3 (external_declaration -> function_definition .)
    ICONST          reduce using rule 3 (external_declaration -> function_definition .)
    FCONST          reduce using rule 3 (external_declaration -> function_definition .)
    SCONST          reduce using rule 3 (external_declaration -> function_definition .)
    MINUS           reduce using rule 3 (external_declaration -> function_definition .)
    TRUE            reduce using rule 3 (external_declaration -> function_definition .)
    FALSE           reduce using rule 3 (external_declaration -> function_definition .)
    ENTER           reduce using rule 3 (external_declaration -> function_definition .)
    SPACE           reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)
    EQUALS          reduce using rule 3 (external_declaration -> function_definition .)
    LOR             reduce using rule 3 (external_declaration -> function_definition .)
    LAND            reduce using rule 3 (external_declaration -> function_definition .)
    EQ              reduce using rule 3 (external_declaration -> function_definition .)
    NE              reduce using rule 3 (external_declaration -> function_definition .)
    LT              reduce using rule 3 (external_declaration -> function_definition .)
    GT              reduce using rule 3 (external_declaration -> function_definition .)
    LE              reduce using rule 3 (external_declaration -> function_definition .)
    GE              reduce using rule 3 (external_declaration -> function_definition .)
    PLUS            reduce using rule 3 (external_declaration -> function_definition .)
    TIMES           reduce using rule 3 (external_declaration -> function_definition .)
    DIVIDE          reduce using rule 3 (external_declaration -> function_definition .)


state 42

    (79) constant -> FALSE .

    TIMES           reduce using rule 79 (constant -> FALSE .)
    DIVIDE          reduce using rule 79 (constant -> FALSE .)
    PLUS            reduce using rule 79 (constant -> FALSE .)
    MINUS           reduce using rule 79 (constant -> FALSE .)
    LT              reduce using rule 79 (constant -> FALSE .)
    GT              reduce using rule 79 (constant -> FALSE .)
    LE              reduce using rule 79 (constant -> FALSE .)
    GE              reduce using rule 79 (constant -> FALSE .)
    EQ              reduce using rule 79 (constant -> FALSE .)
    NE              reduce using rule 79 (constant -> FALSE .)
    LAND            reduce using rule 79 (constant -> FALSE .)
    LOR             reduce using rule 79 (constant -> FALSE .)
    EQUALS          reduce using rule 79 (constant -> FALSE .)
    SEMI            reduce using rule 79 (constant -> FALSE .)
    RPAREN          reduce using rule 79 (constant -> FALSE .)
    COMMA           reduce using rule 79 (constant -> FALSE .)


state 43

    (13) type -> INT .

    ID              reduce using rule 13 (type -> INT .)


state 44

    (14) type -> DOUBLE .

    ID              reduce using rule 14 (type -> DOUBLE .)


state 45

    (40) expression -> assignment_expression .

    SEMI            reduce using rule 40 (expression -> assignment_expression .)
    RPAREN          reduce using rule 40 (expression -> assignment_expression .)
    COMMA           reduce using rule 40 (expression -> assignment_expression .)


state 46

    (84) break_statement -> BREAK . SEMI

    SEMI            shift and go to state 84


state 47

    (21) statement -> declaration_statement .

    INT             reduce using rule 21 (statement -> declaration_statement .)
    DOUBLE          reduce using rule 21 (statement -> declaration_statement .)
    CHAR            reduce using rule 21 (statement -> declaration_statement .)
    STRING          reduce using rule 21 (statement -> declaration_statement .)
    KEY             reduce using rule 21 (statement -> declaration_statement .)
    BOOLEAN         reduce using rule 21 (statement -> declaration_statement .)
    SEMI            reduce using rule 21 (statement -> declaration_statement .)
    LBRACE          reduce using rule 21 (statement -> declaration_statement .)
    IF              reduce using rule 21 (statement -> declaration_statement .)
    REPEAT          reduce using rule 21 (statement -> declaration_statement .)
    UNTIL           reduce using rule 21 (statement -> declaration_statement .)
    RETURN          reduce using rule 21 (statement -> declaration_statement .)
    BREAK           reduce using rule 21 (statement -> declaration_statement .)
    CONTINUE        reduce using rule 21 (statement -> declaration_statement .)
    LPAREN          reduce using rule 21 (statement -> declaration_statement .)
    ID              reduce using rule 21 (statement -> declaration_statement .)
    LNOT            reduce using rule 21 (statement -> declaration_statement .)
    ICONST          reduce using rule 21 (statement -> declaration_statement .)
    FCONST          reduce using rule 21 (statement -> declaration_statement .)
    SCONST          reduce using rule 21 (statement -> declaration_statement .)
    MINUS           reduce using rule 21 (statement -> declaration_statement .)
    TRUE            reduce using rule 21 (statement -> declaration_statement .)
    FALSE           reduce using rule 21 (statement -> declaration_statement .)
    ENTER           reduce using rule 21 (statement -> declaration_statement .)
    SPACE           reduce using rule 21 (statement -> declaration_statement .)
    $end            reduce using rule 21 (statement -> declaration_statement .)
    EQUALS          reduce using rule 21 (statement -> declaration_statement .)
    LOR             reduce using rule 21 (statement -> declaration_statement .)
    LAND            reduce using rule 21 (statement -> declaration_statement .)
    EQ              reduce using rule 21 (statement -> declaration_statement .)
    NE              reduce using rule 21 (statement -> declaration_statement .)
    LT              reduce using rule 21 (statement -> declaration_statement .)
    GT              reduce using rule 21 (statement -> declaration_statement .)
    LE              reduce using rule 21 (statement -> declaration_statement .)
    GE              reduce using rule 21 (statement -> declaration_statement .)
    PLUS            reduce using rule 21 (statement -> declaration_statement .)
    TIMES           reduce using rule 21 (statement -> declaration_statement .)
    DIVIDE          reduce using rule 21 (statement -> declaration_statement .)
    RBRACE          reduce using rule 21 (statement -> declaration_statement .)


state 48

    (73) primary_expression -> empty .

    TIMES           reduce using rule 73 (primary_expression -> empty .)
    DIVIDE          reduce using rule 73 (primary_expression -> empty .)
    PLUS            reduce using rule 73 (primary_expression -> empty .)
    MINUS           reduce using rule 73 (primary_expression -> empty .)
    LT              reduce using rule 73 (primary_expression -> empty .)
    GT              reduce using rule 73 (primary_expression -> empty .)
    LE              reduce using rule 73 (primary_expression -> empty .)
    GE              reduce using rule 73 (primary_expression -> empty .)
    EQ              reduce using rule 73 (primary_expression -> empty .)
    NE              reduce using rule 73 (primary_expression -> empty .)
    LAND            reduce using rule 73 (primary_expression -> empty .)
    LOR             reduce using rule 73 (primary_expression -> empty .)
    EQUALS          reduce using rule 73 (primary_expression -> empty .)
    SEMI            reduce using rule 73 (primary_expression -> empty .)
    RPAREN          reduce using rule 73 (primary_expression -> empty .)
    COMMA           reduce using rule 73 (primary_expression -> empty .)


state 49

    (17) type -> KEY .

    ID              reduce using rule 17 (type -> KEY .)


state 50

    (46) assignment_expression -> function_expression .

    SEMI            reduce using rule 46 (assignment_expression -> function_expression .)
    RPAREN          reduce using rule 46 (assignment_expression -> function_expression .)
    COMMA           reduce using rule 46 (assignment_expression -> function_expression .)


state 51

    (38) expression_statement -> expression . SEMI

    SEMI            shift and go to state 85


state 52

    (47) logical_NOT_expression -> logical_OR_expression .
    (50) logical_OR_expression -> logical_OR_expression . LOR logical_AND_expression

    EQUALS          reduce using rule 47 (logical_NOT_expression -> logical_OR_expression .)
    SEMI            reduce using rule 47 (logical_NOT_expression -> logical_OR_expression .)
    RPAREN          reduce using rule 47 (logical_NOT_expression -> logical_OR_expression .)
    COMMA           reduce using rule 47 (logical_NOT_expression -> logical_OR_expression .)
    LOR             shift and go to state 86


state 53

    (69) primary_expression -> LPAREN . expression RPAREN
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 34
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    empty                          shift and go to state 48
    additive_expression            shift and go to state 10
    logical_AND_expression         shift and go to state 24
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    expression                     shift and go to state 87
    logical_OR_expression          shift and go to state 52
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 54

    (71) primary_expression -> ID .

    TIMES           reduce using rule 71 (primary_expression -> ID .)
    DIVIDE          reduce using rule 71 (primary_expression -> ID .)
    PLUS            reduce using rule 71 (primary_expression -> ID .)
    MINUS           reduce using rule 71 (primary_expression -> ID .)
    LT              reduce using rule 71 (primary_expression -> ID .)
    GT              reduce using rule 71 (primary_expression -> ID .)
    LE              reduce using rule 71 (primary_expression -> ID .)
    GE              reduce using rule 71 (primary_expression -> ID .)
    EQ              reduce using rule 71 (primary_expression -> ID .)
    NE              reduce using rule 71 (primary_expression -> ID .)
    LAND            reduce using rule 71 (primary_expression -> ID .)
    LOR             reduce using rule 71 (primary_expression -> ID .)
    EQUALS          reduce using rule 71 (primary_expression -> ID .)
    SEMI            reduce using rule 71 (primary_expression -> ID .)
    RPAREN          reduce using rule 71 (primary_expression -> ID .)
    COMMA           reduce using rule 71 (primary_expression -> ID .)


state 55

    (48) logical_NOT_expression -> LNOT logical_OR_expression .
    (50) logical_OR_expression -> logical_OR_expression . LOR logical_AND_expression

    EQUALS          reduce using rule 48 (logical_NOT_expression -> LNOT logical_OR_expression .)
    SEMI            reduce using rule 48 (logical_NOT_expression -> LNOT logical_OR_expression .)
    RPAREN          reduce using rule 48 (logical_NOT_expression -> LNOT logical_OR_expression .)
    COMMA           reduce using rule 48 (logical_NOT_expression -> LNOT logical_OR_expression .)
    LOR             shift and go to state 86


state 56

    (82) return_statement -> RETURN SEMI .

    INT             reduce using rule 82 (return_statement -> RETURN SEMI .)
    DOUBLE          reduce using rule 82 (return_statement -> RETURN SEMI .)
    CHAR            reduce using rule 82 (return_statement -> RETURN SEMI .)
    STRING          reduce using rule 82 (return_statement -> RETURN SEMI .)
    KEY             reduce using rule 82 (return_statement -> RETURN SEMI .)
    BOOLEAN         reduce using rule 82 (return_statement -> RETURN SEMI .)
    SEMI            reduce using rule 82 (return_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 82 (return_statement -> RETURN SEMI .)
    IF              reduce using rule 82 (return_statement -> RETURN SEMI .)
    REPEAT          reduce using rule 82 (return_statement -> RETURN SEMI .)
    UNTIL           reduce using rule 82 (return_statement -> RETURN SEMI .)
    RETURN          reduce using rule 82 (return_statement -> RETURN SEMI .)
    BREAK           reduce using rule 82 (return_statement -> RETURN SEMI .)
    CONTINUE        reduce using rule 82 (return_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 82 (return_statement -> RETURN SEMI .)
    ID              reduce using rule 82 (return_statement -> RETURN SEMI .)
    LNOT            reduce using rule 82 (return_statement -> RETURN SEMI .)
    ICONST          reduce using rule 82 (return_statement -> RETURN SEMI .)
    FCONST          reduce using rule 82 (return_statement -> RETURN SEMI .)
    SCONST          reduce using rule 82 (return_statement -> RETURN SEMI .)
    MINUS           reduce using rule 82 (return_statement -> RETURN SEMI .)
    TRUE            reduce using rule 82 (return_statement -> RETURN SEMI .)
    FALSE           reduce using rule 82 (return_statement -> RETURN SEMI .)
    ENTER           reduce using rule 82 (return_statement -> RETURN SEMI .)
    SPACE           reduce using rule 82 (return_statement -> RETURN SEMI .)
    $end            reduce using rule 82 (return_statement -> RETURN SEMI .)
    EQUALS          reduce using rule 82 (return_statement -> RETURN SEMI .)
    LOR             reduce using rule 82 (return_statement -> RETURN SEMI .)
    LAND            reduce using rule 82 (return_statement -> RETURN SEMI .)
    EQ              reduce using rule 82 (return_statement -> RETURN SEMI .)
    NE              reduce using rule 82 (return_statement -> RETURN SEMI .)
    LT              reduce using rule 82 (return_statement -> RETURN SEMI .)
    GT              reduce using rule 82 (return_statement -> RETURN SEMI .)
    LE              reduce using rule 82 (return_statement -> RETURN SEMI .)
    GE              reduce using rule 82 (return_statement -> RETURN SEMI .)
    PLUS            reduce using rule 82 (return_statement -> RETURN SEMI .)
    TIMES           reduce using rule 82 (return_statement -> RETURN SEMI .)
    DIVIDE          reduce using rule 82 (return_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 82 (return_statement -> RETURN SEMI .)


state 57

    (83) return_statement -> RETURN expression . SEMI

    SEMI            shift and go to state 88


state 58

    (44) assignment_expression -> logical_NOT_expression EQUALS . assignment_expression
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    LPAREN          shift and go to state 53
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 89
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    logical_OR_expression          shift and go to state 52
    additive_expression            shift and go to state 10
    empty                          shift and go to state 48
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    logical_AND_expression         shift and go to state 24
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 59

    (85) continue_statement -> CONTINUE SEMI .

    RBRACE          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    SEMI            reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    LBRACE          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    IF              reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    REPEAT          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    UNTIL           reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    RETURN          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    BREAK           reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    CONTINUE        reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    LPAREN          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    INT             reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    DOUBLE          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    CHAR            reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    STRING          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    KEY             reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    BOOLEAN         reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    ID              reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    LNOT            reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    ICONST          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    FCONST          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    SCONST          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    MINUS           reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    TRUE            reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    FALSE           reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    ENTER           reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    SPACE           reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    EQUALS          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    LOR             reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    LAND            reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    EQ              reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    NE              reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    LT              reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    GT              reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    LE              reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    GE              reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    PLUS            reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    TIMES           reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    DIVIDE          reduce using rule 85 (continue_statement -> CONTINUE SEMI .)
    $end            reduce using rule 85 (continue_statement -> CONTINUE SEMI .)


state 60

    (77) constant -> MINUS ICONST .

    TIMES           reduce using rule 77 (constant -> MINUS ICONST .)
    DIVIDE          reduce using rule 77 (constant -> MINUS ICONST .)
    PLUS            reduce using rule 77 (constant -> MINUS ICONST .)
    MINUS           reduce using rule 77 (constant -> MINUS ICONST .)
    LT              reduce using rule 77 (constant -> MINUS ICONST .)
    GT              reduce using rule 77 (constant -> MINUS ICONST .)
    LE              reduce using rule 77 (constant -> MINUS ICONST .)
    GE              reduce using rule 77 (constant -> MINUS ICONST .)
    EQ              reduce using rule 77 (constant -> MINUS ICONST .)
    NE              reduce using rule 77 (constant -> MINUS ICONST .)
    LAND            reduce using rule 77 (constant -> MINUS ICONST .)
    LOR             reduce using rule 77 (constant -> MINUS ICONST .)
    EQUALS          reduce using rule 77 (constant -> MINUS ICONST .)
    SEMI            reduce using rule 77 (constant -> MINUS ICONST .)
    RPAREN          reduce using rule 77 (constant -> MINUS ICONST .)
    COMMA           reduce using rule 77 (constant -> MINUS ICONST .)


state 61

    (62) additive_expression -> additive_expression PLUS . multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    reserved                       shift and go to state 29
    multiplicative_expression      shift and go to state 90
    empty                          shift and go to state 48
    primary_expression             shift and go to state 33
    constant                       shift and go to state 7

state 62

    (63) additive_expression -> additive_expression MINUS . multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    reserved                       shift and go to state 29
    multiplicative_expression      shift and go to state 91
    empty                          shift and go to state 48
    primary_expression             shift and go to state 33
    constant                       shift and go to state 7

state 63

    (28) iteration_statement -> UNTIL LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 34
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    empty                          shift and go to state 48
    additive_expression            shift and go to state 10
    logical_AND_expression         shift and go to state 24
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    expression                     shift and go to state 92
    logical_OR_expression          shift and go to state 52
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 64

    (58) relational_expression -> relational_expression GT . additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    multiplicative_expression      shift and go to state 30
    empty                          shift and go to state 48
    reserved                       shift and go to state 29
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 33

state 65

    (60) relational_expression -> relational_expression GE . additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    multiplicative_expression      shift and go to state 30
    empty                          shift and go to state 48
    reserved                       shift and go to state 29
    additive_expression            shift and go to state 94
    primary_expression             shift and go to state 33

state 66

    (57) relational_expression -> relational_expression LT . additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    multiplicative_expression      shift and go to state 30
    empty                          shift and go to state 48
    reserved                       shift and go to state 29
    additive_expression            shift and go to state 95
    primary_expression             shift and go to state 33

state 67

    (59) relational_expression -> relational_expression LE . additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    multiplicative_expression      shift and go to state 30
    empty                          shift and go to state 48
    reserved                       shift and go to state 29
    additive_expression            shift and go to state 96
    primary_expression             shift and go to state 33

state 68

    (52) logical_AND_expression -> logical_AND_expression LAND . equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    multiplicative_expression      shift and go to state 30
    empty                          shift and go to state 48
    equality_expression            shift and go to state 97
    primary_expression             shift and go to state 33
    reserved                       shift and go to state 29
    additive_expression            shift and go to state 10
    relational_expression          shift and go to state 22

state 69

    (5) function_definition -> type ID . LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type ID . LPAREN parameter_declaration_list RPAREN LBRACE RBRACE
    (31) declaration_statement -> type ID . SEMI
    (32) declaration_statement -> type ID . EQUALS assignment_expression SEMI

    LPAREN          shift and go to state 100
    SEMI            shift and go to state 98
    EQUALS          shift and go to state 99


state 70

    (2) translation_unit -> translation_unit external_declaration .

    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRING          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    KEY             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BOOLEAN         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SEMI            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LBRACE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    IF              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REPEAT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNTIL           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    RETURN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BREAK           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONTINUE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LPAREN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ID              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LNOT            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ICONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FCONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SCONST          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    MINUS           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TRUE            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FALSE           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENTER           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SPACE           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EQUALS          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LOR             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LAND            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EQ              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    NE              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LT              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    GT              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LE              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    GE              reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    PLUS            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DIVIDE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 71

    (27) iteration_statement -> REPEAT LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 34
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    empty                          shift and go to state 48
    additive_expression            shift and go to state 10
    logical_AND_expression         shift and go to state 24
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    expression                     shift and go to state 101
    logical_OR_expression          shift and go to state 52
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 72

    (66) multiplicative_expression -> multiplicative_expression DIVIDE . primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    reserved                       shift and go to state 29
    primary_expression             shift and go to state 102
    constant                       shift and go to state 7
    empty                          shift and go to state 48

state 73

    (65) multiplicative_expression -> multiplicative_expression TIMES . primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    reserved                       shift and go to state 29
    primary_expression             shift and go to state 103
    constant                       shift and go to state 7
    empty                          shift and go to state 48

state 74

    (67) statement_list -> statement .

    RBRACE          reduce using rule 67 (statement_list -> statement .)
    SEMI            reduce using rule 67 (statement_list -> statement .)
    LBRACE          reduce using rule 67 (statement_list -> statement .)
    IF              reduce using rule 67 (statement_list -> statement .)
    REPEAT          reduce using rule 67 (statement_list -> statement .)
    UNTIL           reduce using rule 67 (statement_list -> statement .)
    RETURN          reduce using rule 67 (statement_list -> statement .)
    BREAK           reduce using rule 67 (statement_list -> statement .)
    CONTINUE        reduce using rule 67 (statement_list -> statement .)
    LPAREN          reduce using rule 67 (statement_list -> statement .)
    INT             reduce using rule 67 (statement_list -> statement .)
    DOUBLE          reduce using rule 67 (statement_list -> statement .)
    CHAR            reduce using rule 67 (statement_list -> statement .)
    STRING          reduce using rule 67 (statement_list -> statement .)
    KEY             reduce using rule 67 (statement_list -> statement .)
    BOOLEAN         reduce using rule 67 (statement_list -> statement .)
    ID              reduce using rule 67 (statement_list -> statement .)
    LNOT            reduce using rule 67 (statement_list -> statement .)
    ICONST          reduce using rule 67 (statement_list -> statement .)
    FCONST          reduce using rule 67 (statement_list -> statement .)
    SCONST          reduce using rule 67 (statement_list -> statement .)
    MINUS           reduce using rule 67 (statement_list -> statement .)
    TRUE            reduce using rule 67 (statement_list -> statement .)
    FALSE           reduce using rule 67 (statement_list -> statement .)
    ENTER           reduce using rule 67 (statement_list -> statement .)
    SPACE           reduce using rule 67 (statement_list -> statement .)
    EQUALS          reduce using rule 67 (statement_list -> statement .)
    LOR             reduce using rule 67 (statement_list -> statement .)
    LAND            reduce using rule 67 (statement_list -> statement .)
    EQ              reduce using rule 67 (statement_list -> statement .)
    NE              reduce using rule 67 (statement_list -> statement .)
    LT              reduce using rule 67 (statement_list -> statement .)
    GT              reduce using rule 67 (statement_list -> statement .)
    LE              reduce using rule 67 (statement_list -> statement .)
    GE              reduce using rule 67 (statement_list -> statement .)
    PLUS            reduce using rule 67 (statement_list -> statement .)
    TIMES           reduce using rule 67 (statement_list -> statement .)
    DIVIDE          reduce using rule 67 (statement_list -> statement .)


state 75

    (31) declaration_statement -> type . ID SEMI
    (32) declaration_statement -> type . ID EQUALS assignment_expression SEMI

    ID              shift and go to state 104


state 76

    (36) compound_statement -> LBRACE RBRACE .

    RBRACE          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    SEMI            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    REPEAT          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    UNTIL           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    INT             reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    CHAR            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    STRING          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    KEY             reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    BOOLEAN         reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    ID              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LNOT            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    ICONST          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    FCONST          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    SCONST          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    TRUE            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    FALSE           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    ENTER           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    SPACE           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    EQUALS          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LOR             reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LAND            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    EQ              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    NE              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LT              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    GT              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    LE              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    GE              reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 36 (compound_statement -> LBRACE RBRACE .)
    $end            reduce using rule 36 (compound_statement -> LBRACE RBRACE .)


state 77

    (37) compound_statement -> LBRACE statement_list . RBRACE
    (68) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 106
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 105
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 78

    (41) expression -> LPAREN expression . RPAREN
    (69) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 107


state 79

    (43) assignment_expression -> ID EQUALS . assignment_expression
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    LPAREN          shift and go to state 53
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 108
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    logical_OR_expression          shift and go to state 52
    additive_expression            shift and go to state 10
    empty                          shift and go to state 48
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    logical_AND_expression         shift and go to state 24
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 80

    (42) function_expression -> ID LPAREN . parameter_list RPAREN
    (7) parameter_list -> . expression
    (8) parameter_list -> . parameter_list COMMA expression
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 34
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 45
    parameter_list                 shift and go to state 109
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    empty                          shift and go to state 48
    additive_expression            shift and go to state 10
    logical_AND_expression         shift and go to state 24
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    expression                     shift and go to state 110
    logical_OR_expression          shift and go to state 52
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 81

    (54) equality_expression -> equality_expression EQ . relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    multiplicative_expression      shift and go to state 30
    empty                          shift and go to state 48
    relational_expression          shift and go to state 111
    reserved                       shift and go to state 29
    additive_expression            shift and go to state 10
    primary_expression             shift and go to state 33

state 82

    (55) equality_expression -> equality_expression NE . relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    multiplicative_expression      shift and go to state 30
    empty                          shift and go to state 48
    relational_expression          shift and go to state 112
    reserved                       shift and go to state 29
    additive_expression            shift and go to state 10
    primary_expression             shift and go to state 33

state 83

    (29) selection_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 34
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    empty                          shift and go to state 48
    additive_expression            shift and go to state 10
    logical_AND_expression         shift and go to state 24
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    expression                     shift and go to state 113
    logical_OR_expression          shift and go to state 52
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 84

    (84) break_statement -> BREAK SEMI .

    RBRACE          reduce using rule 84 (break_statement -> BREAK SEMI .)
    SEMI            reduce using rule 84 (break_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 84 (break_statement -> BREAK SEMI .)
    IF              reduce using rule 84 (break_statement -> BREAK SEMI .)
    REPEAT          reduce using rule 84 (break_statement -> BREAK SEMI .)
    UNTIL           reduce using rule 84 (break_statement -> BREAK SEMI .)
    RETURN          reduce using rule 84 (break_statement -> BREAK SEMI .)
    BREAK           reduce using rule 84 (break_statement -> BREAK SEMI .)
    CONTINUE        reduce using rule 84 (break_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 84 (break_statement -> BREAK SEMI .)
    INT             reduce using rule 84 (break_statement -> BREAK SEMI .)
    DOUBLE          reduce using rule 84 (break_statement -> BREAK SEMI .)
    CHAR            reduce using rule 84 (break_statement -> BREAK SEMI .)
    STRING          reduce using rule 84 (break_statement -> BREAK SEMI .)
    KEY             reduce using rule 84 (break_statement -> BREAK SEMI .)
    BOOLEAN         reduce using rule 84 (break_statement -> BREAK SEMI .)
    ID              reduce using rule 84 (break_statement -> BREAK SEMI .)
    LNOT            reduce using rule 84 (break_statement -> BREAK SEMI .)
    ICONST          reduce using rule 84 (break_statement -> BREAK SEMI .)
    FCONST          reduce using rule 84 (break_statement -> BREAK SEMI .)
    SCONST          reduce using rule 84 (break_statement -> BREAK SEMI .)
    MINUS           reduce using rule 84 (break_statement -> BREAK SEMI .)
    TRUE            reduce using rule 84 (break_statement -> BREAK SEMI .)
    FALSE           reduce using rule 84 (break_statement -> BREAK SEMI .)
    ENTER           reduce using rule 84 (break_statement -> BREAK SEMI .)
    SPACE           reduce using rule 84 (break_statement -> BREAK SEMI .)
    EQUALS          reduce using rule 84 (break_statement -> BREAK SEMI .)
    LOR             reduce using rule 84 (break_statement -> BREAK SEMI .)
    LAND            reduce using rule 84 (break_statement -> BREAK SEMI .)
    EQ              reduce using rule 84 (break_statement -> BREAK SEMI .)
    NE              reduce using rule 84 (break_statement -> BREAK SEMI .)
    LT              reduce using rule 84 (break_statement -> BREAK SEMI .)
    GT              reduce using rule 84 (break_statement -> BREAK SEMI .)
    LE              reduce using rule 84 (break_statement -> BREAK SEMI .)
    GE              reduce using rule 84 (break_statement -> BREAK SEMI .)
    PLUS            reduce using rule 84 (break_statement -> BREAK SEMI .)
    TIMES           reduce using rule 84 (break_statement -> BREAK SEMI .)
    DIVIDE          reduce using rule 84 (break_statement -> BREAK SEMI .)
    $end            reduce using rule 84 (break_statement -> BREAK SEMI .)


state 85

    (38) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 38 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 38 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 38 (expression_statement -> expression SEMI .)
    IF              reduce using rule 38 (expression_statement -> expression SEMI .)
    REPEAT          reduce using rule 38 (expression_statement -> expression SEMI .)
    UNTIL           reduce using rule 38 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 38 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 38 (expression_statement -> expression SEMI .)
    CONTINUE        reduce using rule 38 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 38 (expression_statement -> expression SEMI .)
    INT             reduce using rule 38 (expression_statement -> expression SEMI .)
    DOUBLE          reduce using rule 38 (expression_statement -> expression SEMI .)
    CHAR            reduce using rule 38 (expression_statement -> expression SEMI .)
    STRING          reduce using rule 38 (expression_statement -> expression SEMI .)
    KEY             reduce using rule 38 (expression_statement -> expression SEMI .)
    BOOLEAN         reduce using rule 38 (expression_statement -> expression SEMI .)
    ID              reduce using rule 38 (expression_statement -> expression SEMI .)
    LNOT            reduce using rule 38 (expression_statement -> expression SEMI .)
    ICONST          reduce using rule 38 (expression_statement -> expression SEMI .)
    FCONST          reduce using rule 38 (expression_statement -> expression SEMI .)
    SCONST          reduce using rule 38 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 38 (expression_statement -> expression SEMI .)
    TRUE            reduce using rule 38 (expression_statement -> expression SEMI .)
    FALSE           reduce using rule 38 (expression_statement -> expression SEMI .)
    ENTER           reduce using rule 38 (expression_statement -> expression SEMI .)
    SPACE           reduce using rule 38 (expression_statement -> expression SEMI .)
    EQUALS          reduce using rule 38 (expression_statement -> expression SEMI .)
    LOR             reduce using rule 38 (expression_statement -> expression SEMI .)
    LAND            reduce using rule 38 (expression_statement -> expression SEMI .)
    EQ              reduce using rule 38 (expression_statement -> expression SEMI .)
    NE              reduce using rule 38 (expression_statement -> expression SEMI .)
    LT              reduce using rule 38 (expression_statement -> expression SEMI .)
    GT              reduce using rule 38 (expression_statement -> expression SEMI .)
    LE              reduce using rule 38 (expression_statement -> expression SEMI .)
    GE              reduce using rule 38 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 38 (expression_statement -> expression SEMI .)
    TIMES           reduce using rule 38 (expression_statement -> expression SEMI .)
    DIVIDE          reduce using rule 38 (expression_statement -> expression SEMI .)
    $end            reduce using rule 38 (expression_statement -> expression SEMI .)


state 86

    (50) logical_OR_expression -> logical_OR_expression LOR . logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 53
    ID              shift and go to state 54
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    multiplicative_expression      shift and go to state 30
    empty                          shift and go to state 48
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33
    reserved                       shift and go to state 29
    logical_AND_expression         shift and go to state 114
    additive_expression            shift and go to state 10
    relational_expression          shift and go to state 22

state 87

    (69) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 115


state 88

    (83) return_statement -> RETURN expression SEMI .

    INT             reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    KEY             reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    BOOLEAN         reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    IF              reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    REPEAT          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    UNTIL           reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    ID              reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    LNOT            reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    ICONST          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    FCONST          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    SCONST          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    TRUE            reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    FALSE           reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    ENTER           reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    SPACE           reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    $end            reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    EQUALS          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    LOR             reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    LAND            reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    EQ              reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    NE              reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    LT              reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    GT              reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    LE              reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    GE              reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    DIVIDE          reduce using rule 83 (return_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 83 (return_statement -> RETURN expression SEMI .)


state 89

    (44) assignment_expression -> logical_NOT_expression EQUALS assignment_expression .

    SEMI            reduce using rule 44 (assignment_expression -> logical_NOT_expression EQUALS assignment_expression .)
    RPAREN          reduce using rule 44 (assignment_expression -> logical_NOT_expression EQUALS assignment_expression .)
    COMMA           reduce using rule 44 (assignment_expression -> logical_NOT_expression EQUALS assignment_expression .)


state 90

    (62) additive_expression -> additive_expression PLUS multiplicative_expression .
    (65) multiplicative_expression -> multiplicative_expression . TIMES primary_expression
    (66) multiplicative_expression -> multiplicative_expression . DIVIDE primary_expression

    PLUS            reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LAND            reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOR             reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUALS          reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMI            reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 62 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 72


state 91

    (63) additive_expression -> additive_expression MINUS multiplicative_expression .
    (65) multiplicative_expression -> multiplicative_expression . TIMES primary_expression
    (66) multiplicative_expression -> multiplicative_expression . DIVIDE primary_expression

    PLUS            reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LAND            reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOR             reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUALS          reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMI            reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 63 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 72


state 92

    (28) iteration_statement -> UNTIL LPAREN expression . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 116


state 93

    (58) relational_expression -> relational_expression GT additive_expression .
    (62) additive_expression -> additive_expression . PLUS multiplicative_expression
    (63) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    GT              reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    LE              reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    GE              reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    NE              reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    LAND            reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    LOR             reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    EQUALS          reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    RPAREN          reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    SEMI            reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    COMMA           reduce using rule 58 (relational_expression -> relational_expression GT additive_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 94

    (60) relational_expression -> relational_expression GE additive_expression .
    (62) additive_expression -> additive_expression . PLUS multiplicative_expression
    (63) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    GT              reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    GE              reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    EQ              reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    LAND            reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    LOR             reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    EQUALS          reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    RPAREN          reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    SEMI            reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    COMMA           reduce using rule 60 (relational_expression -> relational_expression GE additive_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 95

    (57) relational_expression -> relational_expression LT additive_expression .
    (62) additive_expression -> additive_expression . PLUS multiplicative_expression
    (63) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    GT              reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    LE              reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    GE              reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    NE              reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    LAND            reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    LOR             reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    EQUALS          reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    RPAREN          reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    SEMI            reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    COMMA           reduce using rule 57 (relational_expression -> relational_expression LT additive_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 96

    (59) relational_expression -> relational_expression LE additive_expression .
    (62) additive_expression -> additive_expression . PLUS multiplicative_expression
    (63) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    GT              reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    GE              reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    EQ              reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    LAND            reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    LOR             reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    EQUALS          reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    RPAREN          reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    SEMI            reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    COMMA           reduce using rule 59 (relational_expression -> relational_expression LE additive_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62


state 97

    (52) logical_AND_expression -> logical_AND_expression LAND equality_expression .
    (54) equality_expression -> equality_expression . EQ relational_expression
    (55) equality_expression -> equality_expression . NE relational_expression

    LAND            reduce using rule 52 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    LOR             reduce using rule 52 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    EQUALS          reduce using rule 52 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    SEMI            reduce using rule 52 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    RPAREN          reduce using rule 52 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    COMMA           reduce using rule 52 (logical_AND_expression -> logical_AND_expression LAND equality_expression .)
    EQ              shift and go to state 81
    NE              shift and go to state 82


state 98

    (31) declaration_statement -> type ID SEMI .

    RBRACE          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    SEMI            reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LBRACE          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    IF              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    REPEAT          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    UNTIL           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    RETURN          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    BREAK           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    CONTINUE        reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LPAREN          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    INT             reduce using rule 31 (declaration_statement -> type ID SEMI .)
    DOUBLE          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    CHAR            reduce using rule 31 (declaration_statement -> type ID SEMI .)
    STRING          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    KEY             reduce using rule 31 (declaration_statement -> type ID SEMI .)
    BOOLEAN         reduce using rule 31 (declaration_statement -> type ID SEMI .)
    ID              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LNOT            reduce using rule 31 (declaration_statement -> type ID SEMI .)
    ICONST          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    FCONST          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    SCONST          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    MINUS           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    TRUE            reduce using rule 31 (declaration_statement -> type ID SEMI .)
    FALSE           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    ENTER           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    SPACE           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    EQUALS          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LOR             reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LAND            reduce using rule 31 (declaration_statement -> type ID SEMI .)
    EQ              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    NE              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LT              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    GT              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    LE              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    GE              reduce using rule 31 (declaration_statement -> type ID SEMI .)
    PLUS            reduce using rule 31 (declaration_statement -> type ID SEMI .)
    TIMES           reduce using rule 31 (declaration_statement -> type ID SEMI .)
    DIVIDE          reduce using rule 31 (declaration_statement -> type ID SEMI .)
    $end            reduce using rule 31 (declaration_statement -> type ID SEMI .)


state 99

    (32) declaration_statement -> type ID EQUALS . assignment_expression SEMI
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    LPAREN          shift and go to state 53
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    SEMI            reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 117
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    empty                          shift and go to state 48
    additive_expression            shift and go to state 10
    logical_AND_expression         shift and go to state 24
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    logical_OR_expression          shift and go to state 52
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 100

    (5) function_definition -> type ID LPAREN . parameter_declaration_list RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type ID LPAREN . parameter_declaration_list RPAREN LBRACE RBRACE
    (9) parameter_declaration_list -> . parameter_declaration
    (10) parameter_declaration_list -> . parameter_declaration_list COMMA parameter_declaration
    (11) parameter_declaration -> . type ID
    (12) parameter_declaration -> . type ID EQUALS assignment_expression
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN

    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36

    parameter_declaration          shift and go to state 119
    type                           shift and go to state 120
    parameter_declaration_list     shift and go to state 118

state 101

    (27) iteration_statement -> REPEAT LPAREN expression . RPAREN LBRACE statement_list RBRACE

    RPAREN          shift and go to state 121


state 102

    (66) multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .

    TIMES           reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    DIVIDE          reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    PLUS            reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    MINUS           reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LT              reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    GT              reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LE              reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    GE              reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    EQ              reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    NE              reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LAND            reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    LOR             reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    EQUALS          reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    SEMI            reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    RPAREN          reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)
    COMMA           reduce using rule 66 (multiplicative_expression -> multiplicative_expression DIVIDE primary_expression .)


state 103

    (65) multiplicative_expression -> multiplicative_expression TIMES primary_expression .

    TIMES           reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    DIVIDE          reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    PLUS            reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    MINUS           reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LT              reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    GT              reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LE              reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    GE              reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    EQ              reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    NE              reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LAND            reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    LOR             reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    EQUALS          reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    SEMI            reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    RPAREN          reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)
    COMMA           reduce using rule 65 (multiplicative_expression -> multiplicative_expression TIMES primary_expression .)


state 104

    (31) declaration_statement -> type ID . SEMI
    (32) declaration_statement -> type ID . EQUALS assignment_expression SEMI

    SEMI            shift and go to state 98
    EQUALS          shift and go to state 99


state 105

    (68) statement_list -> statement_list statement .

    RBRACE          reduce using rule 68 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 68 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 68 (statement_list -> statement_list statement .)
    IF              reduce using rule 68 (statement_list -> statement_list statement .)
    REPEAT          reduce using rule 68 (statement_list -> statement_list statement .)
    UNTIL           reduce using rule 68 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 68 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 68 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 68 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 68 (statement_list -> statement_list statement .)
    INT             reduce using rule 68 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 68 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 68 (statement_list -> statement_list statement .)
    STRING          reduce using rule 68 (statement_list -> statement_list statement .)
    KEY             reduce using rule 68 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 68 (statement_list -> statement_list statement .)
    ID              reduce using rule 68 (statement_list -> statement_list statement .)
    LNOT            reduce using rule 68 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 68 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 68 (statement_list -> statement_list statement .)
    SCONST          reduce using rule 68 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 68 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 68 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 68 (statement_list -> statement_list statement .)
    ENTER           reduce using rule 68 (statement_list -> statement_list statement .)
    SPACE           reduce using rule 68 (statement_list -> statement_list statement .)
    EQUALS          reduce using rule 68 (statement_list -> statement_list statement .)
    LOR             reduce using rule 68 (statement_list -> statement_list statement .)
    LAND            reduce using rule 68 (statement_list -> statement_list statement .)
    EQ              reduce using rule 68 (statement_list -> statement_list statement .)
    NE              reduce using rule 68 (statement_list -> statement_list statement .)
    LT              reduce using rule 68 (statement_list -> statement_list statement .)
    GT              reduce using rule 68 (statement_list -> statement_list statement .)
    LE              reduce using rule 68 (statement_list -> statement_list statement .)
    GE              reduce using rule 68 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 68 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 68 (statement_list -> statement_list statement .)
    DIVIDE          reduce using rule 68 (statement_list -> statement_list statement .)


state 106

    (37) compound_statement -> LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    KEY             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    SPACE           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LOR             reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LAND            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    NE              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 37 (compound_statement -> LBRACE statement_list RBRACE .)


state 107

    (41) expression -> LPAREN expression RPAREN .
    (69) primary_expression -> LPAREN expression RPAREN .

  ! reduce/reduce conflict for SEMI resolved using rule 41 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (expression -> LPAREN expression RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 41 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)

  ! SEMI            [ reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .) ]
  ! RPAREN          [ reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .) ]
  ! COMMA           [ reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .) ]


state 108

    (43) assignment_expression -> ID EQUALS assignment_expression .

    SEMI            reduce using rule 43 (assignment_expression -> ID EQUALS assignment_expression .)
    RPAREN          reduce using rule 43 (assignment_expression -> ID EQUALS assignment_expression .)
    COMMA           reduce using rule 43 (assignment_expression -> ID EQUALS assignment_expression .)


state 109

    (42) function_expression -> ID LPAREN parameter_list . RPAREN
    (8) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 122
    COMMA           shift and go to state 123


state 110

    (7) parameter_list -> expression .

    RPAREN          reduce using rule 7 (parameter_list -> expression .)
    COMMA           reduce using rule 7 (parameter_list -> expression .)


state 111

    (54) equality_expression -> equality_expression EQ relational_expression .
    (57) relational_expression -> relational_expression . LT additive_expression
    (58) relational_expression -> relational_expression . GT additive_expression
    (59) relational_expression -> relational_expression . LE additive_expression
    (60) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    LAND            reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    LOR             reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    EQUALS          reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    SEMI            reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 54 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 66
    GT              shift and go to state 64
    LE              shift and go to state 67
    GE              shift and go to state 65


state 112

    (55) equality_expression -> equality_expression NE relational_expression .
    (57) relational_expression -> relational_expression . LT additive_expression
    (58) relational_expression -> relational_expression . GT additive_expression
    (59) relational_expression -> relational_expression . LE additive_expression
    (60) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    LAND            reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    LOR             reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    EQUALS          reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    SEMI            reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 55 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 66
    GT              shift and go to state 64
    LE              shift and go to state 67
    GE              shift and go to state 65


state 113

    (29) selection_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    RPAREN          shift and go to state 124


state 114

    (50) logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .
    (52) logical_AND_expression -> logical_AND_expression . LAND equality_expression

    LOR             reduce using rule 50 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    EQUALS          reduce using rule 50 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    RPAREN          reduce using rule 50 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    SEMI            reduce using rule 50 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    COMMA           reduce using rule 50 (logical_OR_expression -> logical_OR_expression LOR logical_AND_expression .)
    LAND            shift and go to state 68


state 115

    (69) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 69 (primary_expression -> LPAREN expression RPAREN .)


state 116

    (28) iteration_statement -> UNTIL LPAREN expression RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 125


state 117

    (32) declaration_statement -> type ID EQUALS assignment_expression . SEMI

    SEMI            shift and go to state 126


state 118

    (5) function_definition -> type ID LPAREN parameter_declaration_list . RPAREN LBRACE statement_list RBRACE
    (6) function_definition -> type ID LPAREN parameter_declaration_list . RPAREN LBRACE RBRACE
    (10) parameter_declaration_list -> parameter_declaration_list . COMMA parameter_declaration

    RPAREN          shift and go to state 127
    COMMA           shift and go to state 128


state 119

    (9) parameter_declaration_list -> parameter_declaration .

    RPAREN          reduce using rule 9 (parameter_declaration_list -> parameter_declaration .)
    COMMA           reduce using rule 9 (parameter_declaration_list -> parameter_declaration .)


state 120

    (11) parameter_declaration -> type . ID
    (12) parameter_declaration -> type . ID EQUALS assignment_expression

    ID              shift and go to state 129


state 121

    (27) iteration_statement -> REPEAT LPAREN expression RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 130


state 122

    (42) function_expression -> ID LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 42 (function_expression -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 42 (function_expression -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 42 (function_expression -> ID LPAREN parameter_list RPAREN .)


state 123

    (8) parameter_list -> parameter_list COMMA . expression
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    LPAREN          shift and go to state 34
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    empty                          shift and go to state 48
    additive_expression            shift and go to state 10
    logical_AND_expression         shift and go to state 24
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    expression                     shift and go to state 131
    logical_OR_expression          shift and go to state 52
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 124

    (29) selection_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE
    (30) selection_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE

    LBRACE          shift and go to state 132


state 125

    (28) iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (67) statement_list -> . statement
    (68) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 74
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    statement_list                 shift and go to state 133
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 126

    (32) declaration_statement -> type ID EQUALS assignment_expression SEMI .

    RBRACE          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    SEMI            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LBRACE          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    IF              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    REPEAT          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    UNTIL           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    RETURN          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    BREAK           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    CONTINUE        reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LPAREN          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    INT             reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    DOUBLE          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    CHAR            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    STRING          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    KEY             reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    BOOLEAN         reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    ID              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LNOT            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    ICONST          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    FCONST          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    SCONST          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    MINUS           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    TRUE            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    FALSE           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    ENTER           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    SPACE           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    EQUALS          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LOR             reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LAND            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    EQ              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    NE              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LT              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    GT              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    LE              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    GE              reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    PLUS            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    TIMES           reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    DIVIDE          reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)
    $end            reduce using rule 32 (declaration_statement -> type ID EQUALS assignment_expression SEMI .)


state 127

    (5) function_definition -> type ID LPAREN parameter_declaration_list RPAREN . LBRACE statement_list RBRACE
    (6) function_definition -> type ID LPAREN parameter_declaration_list RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 134


state 128

    (10) parameter_declaration_list -> parameter_declaration_list COMMA . parameter_declaration
    (11) parameter_declaration -> . type ID
    (12) parameter_declaration -> . type ID EQUALS assignment_expression
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN

    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36

    parameter_declaration          shift and go to state 135
    type                           shift and go to state 120

state 129

    (11) parameter_declaration -> type ID .
    (12) parameter_declaration -> type ID . EQUALS assignment_expression

    RPAREN          reduce using rule 11 (parameter_declaration -> type ID .)
    COMMA           reduce using rule 11 (parameter_declaration -> type ID .)
    EQUALS          shift and go to state 136


state 130

    (27) iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (67) statement_list -> . statement
    (68) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 74
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    statement_list                 shift and go to state 137
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 131

    (8) parameter_list -> parameter_list COMMA expression .

    RPAREN          reduce using rule 8 (parameter_list -> parameter_list COMMA expression .)
    COMMA           reduce using rule 8 (parameter_list -> parameter_list COMMA expression .)


state 132

    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (67) statement_list -> . statement
    (68) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 74
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    statement_list                 shift and go to state 138
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 133

    (28) iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (68) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 139
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 105
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 134

    (5) function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE . statement_list RBRACE
    (6) function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE . RBRACE
    (67) statement_list -> . statement
    (68) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 140
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 74
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    statement_list                 shift and go to state 141
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 135

    (10) parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration .

    RPAREN          reduce using rule 10 (parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration .)
    COMMA           reduce using rule 10 (parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration .)


state 136

    (12) parameter_declaration -> type ID EQUALS . assignment_expression
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    LPAREN          shift and go to state 53
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]

    constant                       shift and go to state 7
    assignment_expression          shift and go to state 142
    multiplicative_expression      shift and go to state 30
    logical_NOT_expression         shift and go to state 4
    empty                          shift and go to state 48
    additive_expression            shift and go to state 10
    logical_AND_expression         shift and go to state 24
    relational_expression          shift and go to state 22
    reserved                       shift and go to state 29
    function_expression            shift and go to state 50
    logical_OR_expression          shift and go to state 52
    equality_expression            shift and go to state 38
    primary_expression             shift and go to state 33

state 137

    (27) iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (68) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 143
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 105
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 138

    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE ELSE LBRACE statement_list RBRACE
    (68) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 144
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 105
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 139

    (28) iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    INT             reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SPACE           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 28 (iteration_statement -> UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE .)


state 140

    (6) function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .

    INT             reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    DOUBLE          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    CHAR            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    STRING          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    KEY             reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    BOOLEAN         reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    SEMI            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LBRACE          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    IF              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    REPEAT          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    UNTIL           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    BREAK           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    CONTINUE        reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    ID              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LNOT            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    ICONST          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    FCONST          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    SCONST          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    MINUS           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    TRUE            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    FALSE           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    ENTER           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    SPACE           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    $end            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    EQUALS          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LOR             reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LAND            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    EQ              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    NE              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LT              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    GT              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    LE              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    GE              reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    PLUS            reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    TIMES           reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)
    DIVIDE          reduce using rule 6 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE RBRACE .)


state 141

    (5) function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list . RBRACE
    (68) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 145
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 105
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 142

    (12) parameter_declaration -> type ID EQUALS assignment_expression .

    RPAREN          reduce using rule 12 (parameter_declaration -> type ID EQUALS assignment_expression .)
    COMMA           reduce using rule 12 (parameter_declaration -> type ID EQUALS assignment_expression .)


state 143

    (27) iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    INT             reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SPACE           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 27 (iteration_statement -> REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE .)


state 144

    (29) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .
    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE . ELSE LBRACE statement_list RBRACE

    RBRACE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    INT             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    SPACE           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 29 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ELSE            shift and go to state 146


state 145

    (5) function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .

    INT             reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    STRING          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    KEY             reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    ID              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    SPACE           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LOR             reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LAND            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    EQ              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    NE              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LT              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    GT              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    LE              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    GE              reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 5 (function_definition -> type ID LPAREN parameter_declaration_list RPAREN LBRACE statement_list RBRACE .)


state 146

    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 147


state 147

    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE . statement_list RBRACE
    (67) statement_list -> . statement
    (68) statement_list -> . statement_list statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 74
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    statement_list                 shift and go to state 148
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 148

    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list . RBRACE
    (68) statement_list -> statement_list . statement
    (19) statement -> . expression_statement
    (20) statement -> . compound_statement
    (21) statement -> . declaration_statement
    (22) statement -> . selection_statement
    (23) statement -> . iteration_statement
    (24) statement -> . return_statement
    (25) statement -> . break_statement
    (26) statement -> . continue_statement
    (38) expression_statement -> . expression SEMI
    (39) expression_statement -> . SEMI
    (36) compound_statement -> . LBRACE RBRACE
    (37) compound_statement -> . LBRACE statement_list RBRACE
    (31) declaration_statement -> . type ID SEMI
    (32) declaration_statement -> . type ID EQUALS assignment_expression SEMI
    (29) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (30) selection_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE
    (27) iteration_statement -> . REPEAT LPAREN expression RPAREN LBRACE statement_list RBRACE
    (28) iteration_statement -> . UNTIL LPAREN expression RPAREN LBRACE statement_list RBRACE
    (82) return_statement -> . RETURN SEMI
    (83) return_statement -> . RETURN expression SEMI
    (84) break_statement -> . BREAK SEMI
    (85) continue_statement -> . CONTINUE SEMI
    (40) expression -> . assignment_expression
    (41) expression -> . LPAREN expression RPAREN
    (13) type -> . INT
    (14) type -> . DOUBLE
    (15) type -> . CHAR
    (16) type -> . STRING
    (17) type -> . KEY
    (18) type -> . BOOLEAN
    (43) assignment_expression -> . ID EQUALS assignment_expression
    (44) assignment_expression -> . logical_NOT_expression EQUALS assignment_expression
    (45) assignment_expression -> . logical_NOT_expression
    (46) assignment_expression -> . function_expression
    (47) logical_NOT_expression -> . logical_OR_expression
    (48) logical_NOT_expression -> . LNOT logical_OR_expression
    (42) function_expression -> . ID LPAREN parameter_list RPAREN
    (49) logical_OR_expression -> . logical_AND_expression
    (50) logical_OR_expression -> . logical_OR_expression LOR logical_AND_expression
    (51) logical_AND_expression -> . equality_expression
    (52) logical_AND_expression -> . logical_AND_expression LAND equality_expression
    (53) equality_expression -> . relational_expression
    (54) equality_expression -> . equality_expression EQ relational_expression
    (55) equality_expression -> . equality_expression NE relational_expression
    (56) relational_expression -> . additive_expression
    (57) relational_expression -> . relational_expression LT additive_expression
    (58) relational_expression -> . relational_expression GT additive_expression
    (59) relational_expression -> . relational_expression LE additive_expression
    (60) relational_expression -> . relational_expression GE additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression PLUS multiplicative_expression
    (63) additive_expression -> . additive_expression MINUS multiplicative_expression
    (64) multiplicative_expression -> . primary_expression
    (65) multiplicative_expression -> . multiplicative_expression TIMES primary_expression
    (66) multiplicative_expression -> . multiplicative_expression DIVIDE primary_expression
    (69) primary_expression -> . LPAREN expression RPAREN
    (70) primary_expression -> . constant
    (71) primary_expression -> . ID
    (72) primary_expression -> . reserved
    (73) primary_expression -> . empty
    (74) constant -> . ICONST
    (75) constant -> . FCONST
    (76) constant -> . SCONST
    (77) constant -> . MINUS ICONST
    (78) constant -> . TRUE
    (79) constant -> . FALSE
    (80) reserved -> . ENTER
    (81) reserved -> . SPACE
    (86) empty -> .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    RBRACE          shift and go to state 149
    SEMI            shift and go to state 14
    LBRACE          shift and go to state 31
    IF              shift and go to state 39
    REPEAT          shift and go to state 27
    UNTIL           shift and go to state 19
    RETURN          shift and go to state 3
    BREAK           shift and go to state 46
    CONTINUE        shift and go to state 6
    LPAREN          shift and go to state 34
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    CHAR            shift and go to state 40
    STRING          shift and go to state 11
    KEY             shift and go to state 49
    BOOLEAN         shift and go to state 36
    ID              shift and go to state 37
    LNOT            shift and go to state 2
    ICONST          shift and go to state 32
    FCONST          shift and go to state 13
    SCONST          shift and go to state 18
    MINUS           shift and go to state 9
    TRUE            shift and go to state 16
    FALSE           shift and go to state 42
    ENTER           shift and go to state 35
    SPACE           shift and go to state 28
    TIMES           reduce using rule 86 (empty -> .)
    DIVIDE          reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    EQ              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    LAND            reduce using rule 86 (empty -> .)
    LOR             reduce using rule 86 (empty -> .)
    EQUALS          reduce using rule 86 (empty -> .)

  ! MINUS           [ reduce using rule 86 (empty -> .) ]
  ! SEMI            [ reduce using rule 86 (empty -> .) ]

    expression_statement           shift and go to state 1
    constant                       shift and go to state 7
    logical_NOT_expression         shift and go to state 4
    break_statement                shift and go to state 5
    reserved                       shift and go to state 29
    iteration_statement            shift and go to state 8
    additive_expression            shift and go to state 10
    compound_statement             shift and go to state 15
    selection_statement            shift and go to state 17
    return_statement               shift and go to state 20
    continue_statement             shift and go to state 21
    relational_expression          shift and go to state 22
    statement                      shift and go to state 105
    logical_AND_expression         shift and go to state 24
    type                           shift and go to state 75
    empty                          shift and go to state 48
    assignment_expression          shift and go to state 45
    multiplicative_expression      shift and go to state 30
    primary_expression             shift and go to state 33
    equality_expression            shift and go to state 38
    declaration_statement          shift and go to state 47
    function_expression            shift and go to state 50
    expression                     shift and go to state 51
    logical_OR_expression          shift and go to state 52

state 149

    (30) selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .

    RBRACE          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    IF              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    UNTIL           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    BREAK           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    CONTINUE        reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    INT             reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    STRING          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    KEY             reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ID              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LNOT            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ICONST          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FCONST          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    SCONST          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    ENTER           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    SPACE           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    EQUALS          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LOR             reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LAND            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    EQ              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    NE              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LT              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    GT              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    LE              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    GE              reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)
    $end            reduce using rule 30 (selection_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 2 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 3 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 3 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 26 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 26 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 31 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 34 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 141 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 141 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 148 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 148 resolved as shift
WARNING: reduce/reduce conflict in state 107 resolved using rule (expression -> LPAREN expression RPAREN)
WARNING: rejected rule (primary_expression -> LPAREN expression RPAREN) in state 107
